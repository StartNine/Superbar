<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Superbar"
                    xmlns:ui="clr-namespace:Start9.UI.Wpf;assembly=Start9.UI.Wpf"
                    xmlns:win="clr-namespace:Start9.UI.Wpf.Windows;assembly=Start9.UI.Wpf"
                    xmlns:window="clr-namespace:WindowsSharp.Processes;assembly=WindowsSharp"
                    xmlns:tray="clr-namespace:WindowsSharp;assembly=WindowsSharp"
                    xmlns:tic="clr-namespace:Start9.UI.Wpf.Statics;assembly=Start9.UI.Wpf"
                    xmlns:disk="clr-namespace:WindowsSharp.DiskItems;assembly=WindowsSharp"
                    xmlns:conv="clr-namespace:Start9.UI.Wpf.Converters;assembly=Start9.UI.Wpf"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:e="http://schemas.microsoft.com/expression/2010/interactivity">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/Start9.UI.Wpf;component/Themes/Shale.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <!--#region Converters-->

    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    <conv:IconToImageBrushConverter x:Key="IconToImageBrushConverter"/>
    <local:RectangleScaleConverter x:Key="RectangleScaleConverter"/>
    <conv:DoubleComparisonConverter x:Key="DoubleComparisonConverter"/>
    <conv:ListViewItemIndexToBoolConverter x:Key="ListViewItemIndexToBoolConverter"/>
    <conv:SysDrawingImageToImageBrushConverter x:Key="SysDrawingImageToImageBrushConverter"/>

    <!--#endregion Converters-->


    <!--#region Window Styles-->

    <Style x:Key="TaskbarWindowStyle" TargetType="{x:Type local:MainWindow}">
        <Setter Property="FontFamily" Value="pack://application:,,,/Start9.UI.Wpf;component/Fonts/#Ubuntu"/>
        <Setter Property="ResizeIntervalDistance" Value="40"/>
        <Setter Property="CompositionState" Value="Alpha"/>
        <!--Setter Property="Opacity" Value="0"/-->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:MainWindow}">
                    <Border x:Name="RootBorder" BorderBrush="{DynamicResource WindowBorderBrush}" BorderThickness="0,1,0,0">
                        <Border BorderBrush="{DynamicResource TitlebarBorderBrush}" BorderThickness="0,1,0,0">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource TitlebarActiveGradientStops}"/>
                            </Border.Background>
                            <Grid x:Name="PART_DragMoveGrid" Background="#01000000" Margin="0,-2,0,0">
                                <DockPanel LastChildFill="True">
                                    <ContentControl x:Name="Ql" Content="{TemplateBinding QuickLaunchArea}" DockPanel.Dock="Left"/>
                                    <ContentControl x:Name="Tr" Content="{TemplateBinding TrayArea}" DockPanel.Dock="Right"/>
                                    <ContentControl HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Content="{TemplateBinding Content}"/>
                                </DockPanel>
                                <Thumb x:Name="PART_ResizeThumb" Background="White" Cursor="SizeNS" Opacity="0.01"/>
                            </Grid>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsLocked" Value="True">
                            <Setter TargetName="PART_ResizeThumb" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="DockMode" Value="Left">
                            <Setter Property="Margin" Value="-3,-3,0,-3"/>
                            <Setter TargetName="PART_ResizeThumb" Property="HorizontalAlignment" Value="Right"/>
                        </Trigger>
                        <Trigger Property="DockMode" Value="Right">
                            <Setter Property="Margin" Value="0,-3,-3,-3"/>
                            <Setter TargetName="PART_ResizeThumb" Property="HorizontalAlignment" Value="Left"/>
                        </Trigger>
                        <Trigger Property="DockMode" Value="Top">
                            <Setter Property="Margin" Value="-3,-3,-3,0"/>
                            <Setter TargetName="PART_ResizeThumb" Property="VerticalAlignment" Value="Bottom"/>
                        </Trigger>
                        <Trigger Property="DockMode" Value="Bottom">
                            <Setter TargetName="PART_ResizeThumb" Property="VerticalAlignment" Value="Top"/>
                        </Trigger>
                        <Trigger Property="Orientation" Value="Horizontal">
                            <Setter TargetName="PART_ResizeThumb" Property="Height" Value="5"/>
                        </Trigger>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter TargetName="PART_ResizeThumb" Property="Cursor" Value="SizeWE"/>
                            <Setter TargetName="Ql" Property="DockPanel.Dock" Value="Top"/>
                            <Setter TargetName="Tr" Property="DockPanel.Dock" Value="Bottom"/>
                            <Setter TargetName="PART_ResizeThumb" Property="Width" Value="5"/>
                            <Setter Property="MinWidth" Value="120"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="UseSmallIcons" Value="True">
                <Setter Property="ResizeIntervalDistance" Value="30"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--#endregion Window Styles-->


    <!--#region Taskband Styles-->

    <Style x:Key="TaskBandScrollViewerStyle" TargetType="{x:Type ScrollViewer}">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Background" Value="#01000000"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <DockPanel Background="#01000000" LastChildFill="True">
                        <Grid x:Name="ScrollBarsGrid" Background="Transparent" DockPanel.Dock="Right">
                            <ScrollBar x:Name="PART_VerticalScrollBar" Orientation="Vertical" Value="{TemplateBinding VerticalOffset}" Maximum="{TemplateBinding ScrollableHeight}" ViewportSize="{TemplateBinding ViewportHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                            <!--Grid.Column="1" Grid.Row="0"-->
                            <ScrollBar x:Name="PART_HorizontalScrollBar" Orientation="{Binding Path=Orientation, ElementName=PART_VerticalScrollBar}" Value="{TemplateBinding HorizontalOffset}" Maximum="{TemplateBinding ScrollableWidth}" ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                            <!--Grid.Column="{Binding Path=(Grid.Column), ElementName=PART_VerticalScrollBar}" Grid.Row="{Binding Path=(Grid.Row), ElementName=PART_VerticalScrollBar}"-->
                        </Grid>
                        <ScrollContentPresenter x:Name="ContentPresenter" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                        <!--Grid.Column="0" Grid.Row="0"-->
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:AppBarWindow}}}" Value="Vertical">
                            <!--Setter TargetName="ContentPresenter" Property="Grid.Row" Value="1"/-->
                            <!--Setter TargetName="PART_VerticalScrollBar" Property="Grid.Column" Value="0"/>
                            <Setter TargetName="PART_VerticalScrollBar" Property="Grid.Row" Value="1"/-->
                            <Setter TargetName="PART_VerticalScrollBar" Property="Orientation" Value="Horizontal"/>
                            <Setter TargetName="ScrollBarsGrid" Property="DockPanel.Dock" Value="Bottom"/>
                            <Setter Property="VerticalAlignment" Value="Top"/>

                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:AppBarWindow}}}" Value="Horizontal">
                            <!--Setter Property="HorizontalAlignment" Value="Left"/-->
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TaskBandListViewStyle" TargetType="{x:Type ListView}">
        <Style.Resources>
            <Style TargetType="{x:Type ListViewItem}">
                <Setter Property="OverridesDefaultStyle" Value="True"/>
                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Height" Value="{Binding ResizeIntervalDistance, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}"/>
                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Padding" Value="0"/>
                <Setter Property="Margin" Value="0"/>
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListViewItem}">
                            <Grid x:Name="RootGrid" Background="#01000000" Margin="2,0">
                                <Border x:Name="HoverBackground" Background="#30FFFFFF" Margin="{TemplateBinding Padding}" ClipToBounds="True" RenderTransformOrigin="0,1">
                                    <Border.RenderTransform>
                                        <ScaleTransform ScaleX="1" ScaleY="0"/>
                                    </Border.RenderTransform>
                                </Border>
                                <Border x:Name="PressedBackground" Background="#60FFFFFF" Margin="{TemplateBinding Padding}" ClipToBounds="True">
                                    <Border.RenderTransform>
                                        <ScaleTransform ScaleX="1" ScaleY="0"/>
                                    </Border.RenderTransform>
                                </Border>
                                <Border BorderBrush="{x:Static SystemParameters.WindowGlassBrush}" Margin="{TemplateBinding Padding}" BorderThickness="0,0,0,2" IsHitTestVisible="False"/>
                                <Grid x:Name="ContentGrid" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="2,0">
                                    <ContentPresenter x:Name="PART_ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="4,0" Visibility="Hidden" />
                                    <GridViewRowPresenter x:Name="PART_GridViewRowPesenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="4,0" Visibility="Visible" />
                                </Grid>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="GridView.ColumnCollection" Value="{x:Null}">
                                    <Setter TargetName="PART_ContentPresenter" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="PART_GridViewRowPesenter" Property="Visibility" Value="Hidden"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="True"/>
                                        <Condition Property="IsSelected" Value="False"/>
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="HoverBackground" Property="Visibility" Value="Visible"/>
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="False"/>
                                        <Condition Property="IsSelected" Value="False"/>
                                    </MultiTrigger.Conditions>
                                    <MultiTrigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <!--ThicknessAnimation Storyboard.TargetProperty="Margin" To="2,0" Duration="0:0:0.0625"/-->
                                                <ThicknessAnimation Storyboard.TargetName="ContentGrid" Storyboard.TargetProperty="Margin" To="2,0" Duration="0:0:0.0625"/>
                                                <ThicknessAnimation Storyboard.TargetName="RootGrid" Storyboard.TargetProperty="Margin" To="2,0" Duration="0:0:0.0625"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </MultiTrigger.EnterActions>
                                    <MultiTrigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <!--ThicknessAnimation Storyboard.TargetProperty="Margin" To="0" Duration="0:0:0.0625"/-->
                                                <ThicknessAnimation Storyboard.TargetName="ContentGrid" Storyboard.TargetProperty="Margin" To="4,0" Duration="0:0:0.0625"/>
                                                <ThicknessAnimation Storyboard.TargetName="RootGrid" Storyboard.TargetProperty="Margin" To="0" Duration="0:0:0.0625"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </MultiTrigger.ExitActions>
                                </MultiTrigger>
                                <Trigger Property="IsSelected" Value="True">
                                    <!--Setter TargetName="PressedBackground" Property="Visibility" Value="Visible"/-->
                                    <Trigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="PressedBackground" Storyboard.TargetProperty="RenderTransform.ScaleY" To="1" Duration="0:0:0.0625"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="PressedBackground" Storyboard.TargetProperty="RenderTransform.ScaleY" To="0" Duration="0:0:0.0625"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.ExitActions>
                                    <Setter TargetName="HoverBackground" Property="Visibility" Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="RenderTransform.ScaleY" To="1" Duration="0:0:0.0625"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="RenderTransform.ScaleY" To="0" Duration="0:0:0.0625"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.ExitActions>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:AppBarWindow}}}" Value="Horizontal">
                        <Setter Property="Width" Value="160"/>
                        <Setter Property="MaxWidth" Value="160"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:AppBarWindow}}}" Value="Vertical">
                        <Setter Property="Width" Value="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=DockMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:AppBarWindow}}}" Value="Left">
                        <Setter Property="Padding" Value="2,0,3,0"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Width" Value="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ScrollContentPresenter}}}"/>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ListViewItem}">
                    <Setter Property="OverridesDefaultStyle" Value="True"/>
                    <Setter Property="HorizontalAlignment" Value="Stretch"/>
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="Height" Value="{Binding ResizeIntervalDistance, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}"/>
                    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                    <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                    <Setter Property="BorderBrush" Value="Transparent"/>
                    <Setter Property="BorderThickness" Value="0"/>
                    <Setter Property="Padding" Value="2,0"/>
                    <!--Setter Property="Margin" Value="1,0"/-->
                    <Setter Property="Foreground" Value="White"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ListViewItem}">
                                <Grid Background="#01000000">
                                    <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                        <ContentPresenter x:Name="PART_ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="4,0" Visibility="Hidden" />
                                        <GridViewRowPresenter x:Name="PART_GridViewRowPesenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="4,0" Visibility="Visible" />
                                    </Grid>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="GridView.ColumnCollection" Value="{x:Null}">
                                        <Setter TargetName="PART_ContentPresenter" Property="Visibility" Value="Visible"/>
                                        <Setter TargetName="PART_GridViewRowPesenter" Property="Visibility" Value="Hidden"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>
                        <!--DataTrigger Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:AppBarWindow}}}" Value="Horizontal">
                            <Setter Property="Width" Value="160"/>
                            <Setter Property="MaxWidth" Value="160"/>
                        </DataTrigger-->
                        <DataTrigger Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:AppBarWindow}}}" Value="Vertical">
                            <Setter Property="Width" Value="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=DockMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:AppBarWindow}}}" Value="Left">
                            <Setter Property="Padding" Value="2,0,3,0"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type local:PinnedApplication}">
                    <DataTemplate.Resources>
                        <Style x:Key="GroupTabStyle" TargetType="{x:Type Control}">
                            <Setter Property="Width" Value="8"/>
                            <Setter Property="Margin" Value="-2,0"/>
                            <Setter Property="Padding" Value="0"/>
                            <Setter Property="RenderTransform">
                                <Setter.Value>
                                    <TranslateTransform X="-2" Y="0"/>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type Control}">
                                        <Grid Background="#01000000" ClipToBounds="True">
                                            <!--Border x:Name="HoverBackground" Background="#30FFFFFF" RenderTransformOrigin="0,1">
                                                <Border.RenderTransform>
                                                    <ScaleTransform ScaleX="1" ScaleY="0"/>
                                                </Border.RenderTransform>
                                            </Border>
                                            <Rectangle Fill="#40000000" Width="1" HorizontalAlignment="Left" RenderTransform="{Binding RenderTransform, ElementName=HoverBackground}" RenderTransformOrigin="{Binding RenderTransformOrigin, ElementName=HoverBackground}"/>
                                            <Border x:Name="PressedBackground" Background="#60FFFFFF" Visibility="Collapsed"/-->
                                            <Grid Margin="0,0,2,0">
                                                <Border x:Name="HoverBackground" BorderBrush="{DynamicResource HoverHighlightBrush}" BorderThickness="{TemplateBinding BorderThickness}" RenderTransformOrigin="0,1">
                                                    <Border.RenderTransform>
                                                        <ScaleTransform ScaleX="1" ScaleY="0"/>
                                                    </Border.RenderTransform>
                                                    <Border.Effect>
                                                        <BlurEffect Radius="5"/>
                                                    </Border.Effect>
                                                    <Border Background="{Binding BorderBrush,ElementName=HoverBackground}">
                                                        <Border.OpacityMask>
                                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                                <GradientStop Offset="0" Color="Transparent"/>
                                                                <GradientStop Offset="1" Color="#7F000000"/>
                                                            </LinearGradientBrush>
                                                        </Border.OpacityMask>
                                                    </Border>
                                                </Border>
                                                <!--Border x:Name="PressedBackground" Background="#60FFFFFF" Margin="{TemplateBinding Padding}" ClipToBounds="True" RenderTransformOrigin="0,1">
                                                                <Border.RenderTransform>
                                                                    <ScaleTransform ScaleX="1" ScaleY="0"/>
                                                                </Border.RenderTransform>
                                                            </Border-->
                                                <Border x:Name="PressedBackground" BorderBrush="{DynamicResource SelectedHighlightBrush}" BorderThickness="{TemplateBinding BorderThickness}" RenderTransformOrigin="0,1">
                                                    <Border.RenderTransform>
                                                        <ScaleTransform ScaleX="1" ScaleY="0"/>
                                                    </Border.RenderTransform>
                                                    <Border.Effect>
                                                        <BlurEffect Radius="5"/>
                                                    </Border.Effect>
                                                    <Border Background="{Binding BorderBrush,ElementName=PressedBackground}">
                                                        <Border.OpacityMask>
                                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                                <GradientStop Offset="0" Color="Transparent"/>
                                                                <GradientStop Offset="1" Color="#7F000000"/>
                                                            </LinearGradientBrush>
                                                        </Border.OpacityMask>
                                                    </Border>
                                                </Border>
                                            </Grid>
                                            <Border x:Name="EdgeBorder" BorderBrush="{DynamicResource HoverHighlightBrush}" BorderThickness="0,0,0,2">
                                                <Border BorderBrush="{Binding BorderBrush, ElementName=EdgeBorder}" BorderThickness="{Binding BorderThickness, ElementName=EdgeBorder}" Margin="0,0,0,-2">
                                                    <Border.Effect>
                                                        <BlurEffect Radius="5"/>
                                                    </Border.Effect>
                                                </Border>
                                            </Border>
                                            <Rectangle Fill="#40000000" Width="1" Height="2" HorizontalAlignment="Left" VerticalAlignment="Bottom"/>
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <!--DataTrigger Binding="{Binding IsApplicationActive, Mode=OneWay}" Value="True">
                                                <Setter TargetName="PressedBackground" Property="Visibility" Value="Visible"/>
                                            </DataTrigger-->
                                            <DataTrigger Binding="{Binding IsChecked, ElementName=IconToggleButton}" Value="True">
                                                <DataTrigger.EnterActions>
                                                    <BeginStoryboard>
                                                        <Storyboard>
                                                            <DoubleAnimation Storyboard.TargetName="PressedBackground" Storyboard.TargetProperty="RenderTransform.ScaleY" To="1" Duration="0:0:0.0625"/>
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </DataTrigger.EnterActions>
                                                <DataTrigger.ExitActions>
                                                    <BeginStoryboard>
                                                        <Storyboard>
                                                            <DoubleAnimation Storyboard.TargetName="PressedBackground" Storyboard.TargetProperty="RenderTransform.ScaleY" To="0" Duration="0:0:0.0625"/>
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </DataTrigger.ExitActions>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding IsMouseOver, ElementName=IconToggleButton}" Value="True">
                                                <!--MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding IsMouseOver, ElementName=IconToggleButton}" Value="False"/>
                                                    <Condition Binding="{Binding IsChecked, ElementName=IconToggleButton}" Value="False"/>
                                                </MultiDataTrigger.Conditions-->
                                                <DataTrigger.EnterActions>
                                                    <BeginStoryboard>
                                                        <Storyboard>
                                                            <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="RenderTransform.ScaleY" To="1" Duration="0:0:0.0625"/>
                                                            <DoubleAnimation Storyboard.TargetProperty="RenderTransform.X" To="0" Duration="0:0:0.0625"/>
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </DataTrigger.EnterActions>
                                                <DataTrigger.ExitActions>
                                                    <BeginStoryboard>
                                                        <Storyboard>
                                                            <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="RenderTransform.ScaleY" To="0" Duration="0:0:0.0625"/>
                                                            <DoubleAnimation Storyboard.TargetProperty="RenderTransform.X" To="-2" Duration="0:0:0.0625"/>
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </DataTrigger.ExitActions>
                                                <Setter TargetName="EdgeBorder" Property="BorderBrush" Value="{DynamicResource SelectedHighlightBrush}"/>
                                            </DataTrigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </DataTemplate.Resources>
                    <Grid x:Name="PinnedAppRootGrid" DataContext="{Binding}" MinWidth="44" Height="{Binding ResizeIntervalDistance, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}">
                        <e:Interaction.Behaviors>
                            <local:TaskItemMiddleClickBehavior/>
                            <local:TaskItemDragBehavior Application="{Binding}"/>
                        </e:Interaction.Behaviors>
                        <ListView x:Name="ItemsListView" SelectionMode="Single" ItemsSource="{Binding OpenWindows}" SelectedItem="{Binding SelectedWindow, Mode=TwoWay, FallbackValue={x:Null}}" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Disabled">
                            <ListView.Template>
                                <ControlTemplate TargetType="{x:Type ListView}">
                                    <Grid>
                                        <WrapPanel x:Name="ItemsHostWrapPanel" IsItemsHost="True" MaxWidth="{Binding Path=ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ScrollViewer}}}" HorizontalAlignment="Left" Background="#01000000" Orientation="Horizontal" Margin="0"/>
                                        <Border x:Name="UnderlineBorder" BorderBrush="{DynamicResource HoverHighlightBrush}" BorderThickness="0,0,0,2" Margin="{Binding Margin, ElementName=IconToggleButton}" IsHitTestVisible="False">
                                            <Border BorderThickness="{Binding BorderThickness, ElementName=UnderlineBorder}" BorderBrush="{Binding BorderBrush, ElementName=UnderlineBorder}" Margin="0,0,0,-2" IsHitTestVisible="False">
                                                <Border.Effect>
                                                    <BlurEffect Radius="5"/>
                                                </Border.Effect>
                                            </Border>
                                        </Border>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <DataTrigger Binding="{Binding TaskItemCombineMode}" Value="Always">
                                            <Setter TargetName="UnderlineBorder" Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding OpenWindows.Count}" Value="0">
                                            <Setter TargetName="UnderlineBorder" Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding IsApplicationActive}" Value="True">
                                            <Setter TargetName="UnderlineBorder" Property="BorderBrush" Value="{DynamicResource SelectedHighlightBrush}"/>
                                        </DataTrigger>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Trigger.EnterActions>
                                                <BeginStoryboard>
                                                    <Storyboard>
                                                        <ThicknessAnimation Storyboard.TargetName="UnderlineBorder" Storyboard.TargetProperty="Margin" To="-2,0" Duration="0:0:0.0625"/>
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </Trigger.EnterActions>
                                            <Trigger.ExitActions>
                                                <BeginStoryboard>
                                                    <Storyboard>
                                                        <ThicknessAnimation Storyboard.TargetName="UnderlineBorder" Storyboard.TargetProperty="Margin" To="0" Duration="0:0:0.0625"/>
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </Trigger.ExitActions>
                                        </Trigger>
                                        <DataTrigger Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:AppBarWindow}}}" Value="Vertical">
                                            <Setter TargetName="ItemsHostWrapPanel" Property="Orientation" Value="vertical"/>
                                        </DataTrigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </ListView.Template>
                            <ListView.ItemTemplate>
                                <DataTemplate DataType="{x:Type window:ProcessWindow}">
                                    <DockPanel VerticalAlignment="Center" HorizontalAlignment="Stretch">
                                        <Canvas x:Name="IconCanvas" Width="24" Height="24" VerticalAlignment="Center" Background="{Binding Icon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='24'}" DockPanel.Dock="Left"/>
                                        <!--Button Width="{Binding ActualHeight,RelativeSource={RelativeSource Mode=Self}}" VerticalAlignment="Stretch" DockPanel.Dock="Right" Tag="{Binding}">X</Button-->
                                        <TextBlock Margin="4,0,0,0" Text="{Binding Title}" VerticalAlignment="Center"/>
                                    </DockPanel>
                                    <DataTemplate.Triggers>
                                        <DataTrigger Binding="{Binding Path=UseSmallIcons, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="True">
                                            <!--Setter TargetName="IconCanvas" Property="Background" Value="{Binding SmallIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='16'}"/-->
                                            <Setter TargetName="IconCanvas" Property="Width" Value="16"/>
                                            <Setter TargetName="IconCanvas" Property="Height" Value="16"/>
                                        </DataTrigger>
                                    </DataTemplate.Triggers>
                                </DataTemplate>
                            </ListView.ItemTemplate>
                        </ListView>
                        <DockPanel x:Name="IconDockPanel" MaxWidth="44" Margin="0" Visibility="Collapsed">
                            <DockPanel.ToolTip>
                                <ToolTip IsOpen="{Binding AreThumbnailsShown, Mode=OneWayToSource, FallbackValue=True}" IsHitTestVisible="False" Opacity="0" Content="Test">
                                    <!--ToolTip.Style>
                                                <Style TargetType="{x:Type ToolTip}">
                                                    <Style.Triggers>
                                                        <Trigger Property="IsLoaded" Value="True">
                                                            <Setter Property="IsOpen" Value=""/>
                                                        </Trigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </ToolTip.Style-->
                                </ToolTip>
                            </DockPanel.ToolTip>
                            <DockPanel.ContextMenu>
                                <ContextMenu x:Name="JumpListDummyContextMenu" IsEnabled="True" IsOpen="{Binding Path=IsJumpListOpen, Mode=OneWayToSource, FallbackValue=True}" IsHitTestVisible="False" Opacity="0">
                                    <ContextMenu.Style>
                                        <Style TargetType="{x:Type ContextMenu}">
                                            <Style.Triggers>
                                                <EventTrigger RoutedEvent="Opened">
                                                    <BeginStoryboard>
                                                        <Storyboard>
                                                            <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="IsEnabled">
                                                                <DiscreteBooleanKeyFrame Value="False" KeyTime="0:0:0.1"/>
                                                            </BooleanAnimationUsingKeyFrames>
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </EventTrigger>
                                                <EventTrigger RoutedEvent="Closed">
                                                    <BeginStoryboard>
                                                        <Storyboard>
                                                            <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="IsEnabled">
                                                                <DiscreteBooleanKeyFrame Value="True" KeyTime="0:0:0.1"/>
                                                            </BooleanAnimationUsingKeyFrames>
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </EventTrigger>
                                                <Trigger Property="IsEnabled" Value="False">
                                                    <Setter Property="IsOpen" Value="False"/>
                                                </Trigger>
                                                <Trigger Property="IsEnabled" Value="True">
                                                    <Setter Property="IsOpen" Value="{Binding Path=IsJumpListOpen, Mode=OneWayToSource, FallbackValue=True}"/>
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </ContextMenu.Style>
                                </ContextMenu>
                            </DockPanel.ContextMenu>
                            <Control x:Name="OuterGroupTab" Style="{DynamicResource GroupTabStyle}" Opacity="0.5" DockPanel.Dock="Right"/>
                            <Control x:Name="InnerGroupTab" Style="{DynamicResource GroupTabStyle}" Opacity="0.75" DockPanel.Dock="Right"/>
                            <Grid>
                                <ToggleButton x:Name="IconToggleButton" IsChecked="{Binding IsApplicationActive, Mode=TwoWay, FallbackValue=False}" IsThreeState="False">
                                    <ToggleButton.Style>
                                        <Style TargetType="{x:Type ToggleButton}">
                                            <Setter Property="OverridesDefaultStyle" Value="True" />
                                            <Setter Property="Margin" Value="2,0"/>
                                            <Setter Property="Padding" Value="0"/>
                                            <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                            <Setter Property="VerticalContentAlignment" Value="Center"/>
                                            <Setter Property="BorderThickness" Value="0,0,0,2"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                        <Grid Background="#01000000">
                                                            <!--Border x:Name="HoverBackground" Background="#30FFFFFF" Margin="{TemplateBinding Padding}" ClipToBounds="True" RenderTransformOrigin="0,1">
                                                                <Border.RenderTransform>
                                                                    <ScaleTransform ScaleX="1" ScaleY="0"/>
                                                                </Border.RenderTransform>
                                                            </Border-->
                                                            <Border x:Name="HoverBackground" BorderBrush="{DynamicResource HoverHighlightBrush}" BorderThickness="{TemplateBinding BorderThickness}" RenderTransformOrigin="0,1" Margin="2,0">
                                                                <Border.RenderTransform>
                                                                    <ScaleTransform ScaleX="1" ScaleY="0"/>
                                                                </Border.RenderTransform>
                                                                <Border.Effect>
                                                                    <BlurEffect Radius="5"/>
                                                                </Border.Effect>
                                                                <Border Background="{Binding BorderBrush,ElementName=HoverBackground}">
                                                                    <Border.OpacityMask>
                                                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                                            <GradientStop Offset="0" Color="Transparent"/>
                                                                            <GradientStop Offset="1" Color="#7F000000"/>
                                                                        </LinearGradientBrush>
                                                                    </Border.OpacityMask>
                                                                </Border>
                                                            </Border>
                                                            <!--Border x:Name="PressedBackground" Background="#60FFFFFF" Margin="{TemplateBinding Padding}" ClipToBounds="True" RenderTransformOrigin="0,1">
                                                                <Border.RenderTransform>
                                                                    <ScaleTransform ScaleX="1" ScaleY="0"/>
                                                                </Border.RenderTransform>
                                                            </Border-->
                                                            <Border x:Name="PressedBackground" BorderBrush="{DynamicResource SelectedHighlightBrush}" BorderThickness="{TemplateBinding BorderThickness}" RenderTransformOrigin="0,1" Margin="{Binding Margin, ElementName=HoverBackground}">
                                                                <Border.RenderTransform>
                                                                    <ScaleTransform ScaleX="1" ScaleY="0"/>
                                                                </Border.RenderTransform>
                                                                <Border.Effect>
                                                                    <BlurEffect Radius="5"/>
                                                                </Border.Effect>
                                                                <Border Background="{Binding BorderBrush,ElementName=PressedBackground}">
                                                                    <Border.OpacityMask>
                                                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                                            <GradientStop Offset="0" Color="Transparent"/>
                                                                            <GradientStop Offset="1" Color="#7F000000"/>
                                                                        </LinearGradientBrush>
                                                                    </Border.OpacityMask>
                                                                </Border>
                                                            </Border>
                                                            <ContentPresenter x:Name="PART_ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                                        </Grid>
                                                        <ControlTemplate.Triggers>
                                                            <MultiTrigger>
                                                                <MultiTrigger.Conditions>
                                                                    <Condition Property="IsMouseOver" Value="True"/>
                                                                    <Condition Property="IsChecked" Value="False"/>
                                                                </MultiTrigger.Conditions>
                                                                <!--Setter TargetName="HoverBackground" Property="Visibility" Value="Visible"/-->
                                                            </MultiTrigger>
                                                            <Trigger Property="IsChecked" Value="True">
                                                                <!--Setter TargetName="PressedBackground" Property="Visibility" Value="Visible"/-->
                                                                <Trigger.EnterActions>
                                                                    <BeginStoryboard>
                                                                        <Storyboard>
                                                                            <DoubleAnimation Storyboard.TargetName="PressedBackground" Storyboard.TargetProperty="RenderTransform.ScaleY" To="1" Duration="0:0:0.0625"/>
                                                                        </Storyboard>
                                                                    </BeginStoryboard>
                                                                </Trigger.EnterActions>
                                                                <Trigger.ExitActions>
                                                                    <BeginStoryboard>
                                                                        <Storyboard>
                                                                            <DoubleAnimation Storyboard.TargetName="PressedBackground" Storyboard.TargetProperty="RenderTransform.ScaleY" To="0" Duration="0:0:0.0625"/>
                                                                        </Storyboard>
                                                                    </BeginStoryboard>
                                                                </Trigger.ExitActions>
                                                            </Trigger>
                                                            <MultiTrigger>
                                                                <MultiTrigger.Conditions>
                                                                    <Condition Property="IsMouseOver" Value="True"/>
                                                                    <Condition Property="IsChecked" Value="False"/>
                                                                </MultiTrigger.Conditions>
                                                                <MultiTrigger.EnterActions>
                                                                    <BeginStoryboard>
                                                                        <Storyboard>
                                                                            <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="RenderTransform.ScaleY" To="1" Duration="0:0:0.0625"/>
                                                                        </Storyboard>
                                                                    </BeginStoryboard>
                                                                </MultiTrigger.EnterActions>
                                                                <MultiTrigger.ExitActions>
                                                                    <BeginStoryboard>
                                                                        <Storyboard>
                                                                            <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="RenderTransform.ScaleY" To="0" Duration="0:0:0.0625"/>
                                                                        </Storyboard>
                                                                    </BeginStoryboard>
                                                                </MultiTrigger.ExitActions>
                                                            </MultiTrigger>
                                                            <Trigger Property="IsMouseOver" Value="True">
                                                                <Trigger.EnterActions>
                                                                    <BeginStoryboard>
                                                                        <Storyboard>
                                                                            <ThicknessAnimation Storyboard.TargetProperty="Margin" To="0" Duration="0:0:0.0625"/>
                                                                        </Storyboard>
                                                                    </BeginStoryboard>
                                                                </Trigger.EnterActions>
                                                                <Trigger.ExitActions>
                                                                    <BeginStoryboard>
                                                                        <Storyboard>
                                                                            <ThicknessAnimation Storyboard.TargetProperty="Margin" To="2,0" Duration="0:0:0.0625"/>
                                                                        </Storyboard>
                                                                    </BeginStoryboard>
                                                                </Trigger.ExitActions>
                                                            </Trigger>
                                                            <!--Trigger Property="IsMouseOver" Value="True">
                                                                <Trigger.EnterActions>
                                                                    <BeginStoryboard>
                                                                        <Storyboard>
                                                                            <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="RenderTransform.ScaleY" To="1" Duration="0:0:0.0625"/>
                                                                            <ThicknessAnimation Storyboard.TargetProperty="Margin" To="0" Duration="0:0:0.0625"/>
                                                                        </Storyboard>
                                                                    </BeginStoryboard>
                                                                </Trigger.EnterActions>
                                                                <Trigger.ExitActions>
                                                                    <BeginStoryboard>
                                                                        <Storyboard>
                                                                            <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="RenderTransform.ScaleY" To="0" Duration="0:0:0.0625"/>
                                                                            <ThicknessAnimation Storyboard.TargetProperty="Margin" To="2,0" Duration="0:0:0.0625"/>
                                                                        </Storyboard>
                                                                    </BeginStoryboard>
                                                                </Trigger.ExitActions>
                                                            </Trigger-->
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                    <!--ControlTemplate TargetType="{x:Type ToggleButton}">
                                                        <Grid Background="#01000000">
                                                            <Border x:Name="IdleBackground" BorderBrush="#FF306FD9" BorderThickness="1" CornerRadius="2" Margin="{TemplateBinding Padding}" ClipToBounds="True">
                                                                <Border.Background>
                                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                                        <GradientStop Offset="0" Color="#FF68A7F7"/>
                                                                        <GradientStop Offset="0.25" Color="#FF4386F2"/>
                                                                        <GradientStop Offset="0.875" Color="#FF3980F4"/>
                                                                        <GradientStop Offset="1" Color="#7F316FE8"/>
                                                                    </LinearGradientBrush>
                                                                </Border.Background>
                                                                <Border CornerRadius="1">
                                                                    <Border.Background>
                                                                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                                                            <GradientStop Offset="0" Color="#FF71A6F6"/>
                                                                            <GradientStop Offset="0.015625" Color="#204386F2"/>
                                                                            <GradientStop Offset="0.96875" Color="#203980F4"/>
                                                                            <GradientStop Offset="1" Color="#7F316FE8"/>
                                                                        </LinearGradientBrush>
                                                                    </Border.Background>
                                                                </Border>
                                                            </Border>
                                                            <Border x:Name="HoverBackground" BorderBrush="#FF2C5FB2" BorderThickness="1" CornerRadius="2" Margin="{TemplateBinding Padding}" ClipToBounds="True" Visibility="Collapsed">
                                                                <Border.Background>
                                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                                        <GradientStop Offset="0" Color="#FF8EC6FF"/>
                                                                        <GradientStop Offset="0.25" Color="#FF69AFFF"/>
                                                                        <GradientStop Offset="0.875" Color="#FF55A0FF"/>
                                                                        <GradientStop Offset="1" Color="#7F2A81FF"/>
                                                                    </LinearGradientBrush>
                                                                </Border.Background>
                                                                <Border CornerRadius="1">
                                                                    <Border.Background>
                                                                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                                                            <GradientStop Offset="0" Color="#FF8EC6FF"/>
                                                                            <GradientStop Offset="0.015625" Color="#2069AFFF"/>
                                                                            <GradientStop Offset="0.96875" Color="#2055A0FF"/>
                                                                            <GradientStop Offset="1" Color="#7F2A81FF"/>
                                                                        </LinearGradientBrush>
                                                                    </Border.Background>
                                                                </Border>
                                                            </Border>
                                                            <Border x:Name="PressedBackground" Background="#FF174CBA" BorderBrush="#FF123C92" BorderThickness="1" CornerRadius="2" Margin="{TemplateBinding Padding}" ClipToBounds="True" Visibility="Collapsed">
                                                                <Border ClipToBounds="True">
                                                                    <Border Margin="-1" BorderBrush="#FF123C92" BorderThickness="1" CornerRadius="2">
                                                                        <Border.Effect>
                                                                            <DropShadowEffect Color="#FF123D94" Direction="315" BlurRadius="3" ShadowDepth="2" Opacity="1"/>
                                                                        </Border.Effect>
                                                                    </Border>
                                                                </Border>
                                                            </Border>
                                                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                                        </Grid>
                                                        <ControlTemplate.Triggers>
                                                            <MultiTrigger>
                                                                <MultiTrigger.Conditions>
                                                                    <Condition Property="IsMouseOver" Value="True"/>
                                                                    <Condition Property="IsChecked" Value="False"/>
                                                                </MultiTrigger.Conditions>
                                                                <Setter TargetName="IdleBackground" Property="Visibility" Value="Collapsed"/>
                                                                <Setter TargetName="HoverBackground" Property="Visibility" Value="Visible"/>
                                                            </MultiTrigger>
                                                            <Trigger Property="IsChecked" Value="True">
                                                                <Setter TargetName="IdleBackground" Property="Visibility" Value="Collapsed"/>
                                                                <Setter TargetName="PressedBackground" Property="Visibility" Value="Visible"/>
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate-->
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </ToggleButton.Style>
                                </ToggleButton>
                                <Border x:Name="UnderlineBorder" BorderBrush="{DynamicResource HoverHighlightBrush}" BorderThickness="0,0,0,2" Margin="{Binding Margin, ElementName=IconToggleButton}" IsHitTestVisible="False" Visibility="Collapsed">
                                    <Border BorderBrush="{Binding BorderBrush, ElementName=UnderlineBorder}" BorderThickness="{Binding BorderThickness, ElementName=UnderlineBorder}" Margin="0,0,0,-2">
                                        <Border.Effect>
                                            <BlurEffect Radius="5"/>
                                        </Border.Effect>
                                        <!--Background="{Binding BorderBrush, ElementName=UnderlineBorder}">
                                        <Border.OpacityMask>
                                            <LinearGradientBrush StartPoint="0,0.1" EndPoint="0,0.9">
                                                <GradientStop Offset="0" Color="Transparent"/>
                                                <GradientStop Offset="1" Color="White"/>
                                            </LinearGradientBrush>
                                        </Border.OpacityMask-->
                                    </Border>
                                </Border>
                                <Canvas x:Name="IconCanvas" Width="24" Height="24" HorizontalAlignment="Center" VerticalAlignment="Center" Background="{Binding DiskApplication.ItemLargeIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='24'}" IsHitTestVisible="False"/>
                                <!--Visibility="{Binding Visibility, ElementName=IconToggleButton}"-->
                            </Grid>
                        </DockPanel>
                    </Grid>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsApplicationActive}">
                            <Setter TargetName="UnderlineBorder" Property="BorderBrush" Value="{DynamicResource SelectedHighlightBrush}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=UseSmallIcons, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="True">
                            <Setter TargetName="IconCanvas" Property="Background" Value="{Binding DiskApplication.ItemSmallIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='16'}"/>
                            <Setter TargetName="IconCanvas" Property="Width" Value="16"/>
                            <Setter TargetName="IconCanvas" Property="Height" Value="16"/>
                            <Setter TargetName="PinnedAppRootGrid" Property="MinWidth" Value="36"/>
                            <Setter TargetName="IconDockPanel" Property="MinWidth" Value="36"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=TaskbarCombineMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="Always">
                            <Setter TargetName="ItemsListView" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="IconDockPanel" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="UnderlineBorder" Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding OpenWindows.Count}" Value="2">
                            <Setter TargetName="OuterGroupTab" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="InnerGroupTab" Property="Opacity" Value="0.625"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding OpenWindows.Count}" Value="1">
                            <Setter TargetName="OuterGroupTab" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="InnerGroupTab" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding OpenWindows.Count}" Value="0">
                            <Setter TargetName="OuterGroupTab" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="InnerGroupTab" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="UnderlineBorder" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        
                    </DataTemplate.Triggers>
                </DataTemplate>
                <!--DataTemplate DataType="{x:Type local:ProcessWindowSet}">
                    <Grid MinWidth="60" Height="{Binding ResizeIntervalDistance, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Margin="0,-1">
                        <ListView x:Name="ItemsListView" ItemsSource="{Binding Windows}" Visibility="Collapsed" Style="{DynamicResource InnerListViewStyle}" SelectedItem="{Binding SetActiveWindow, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}, Mode=OneWayToSource}" SelectedIndex="{Binding SelectedIndex, Mode=TwoWay, FallbackValue=-1}">
                            <ListView.Template>
                                <ControlTemplate TargetType="{x:Type ListView}">
                                    <ControlTemplate.Resources>
                                        <Style TargetType="{x:Type ListViewItem}">
                                            <Setter Property="OverridesDefaultStyle" Value="True"/>
                                            <Setter Property="HorizontalAlignment" Value="Stretch"/>
                                            <Setter Property="Background" Value="Transparent"/>
                                            <Setter Property="Height" Value="{Binding ResizeIntervalDistance, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}"/>
                                            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                                            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                                            <Setter Property="BorderBrush" Value="Transparent"/>
                                            <Setter Property="BorderThickness" Value="0"/>
                                            <Setter Property="Padding" Value="0,3,0,2"/>
                                            <Setter Property="Margin" Value="1,0"/>
                                            <Setter Property="Foreground" Value="White"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type ListViewItem}">
                                                        <Grid Background="#01000000">
                                                            <Border x:Name="IdleBackground" BorderBrush="#FF306FD9" BorderThickness="1" CornerRadius="2" Margin="{TemplateBinding Padding}" ClipToBounds="True">
                                                                <Border.Background>
                                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                                        <GradientStop Offset="0" Color="#FF68A7F7"/>
                                                                        <GradientStop Offset="0.25" Color="#FF4386F2"/>
                                                                        <GradientStop Offset="0.875" Color="#FF3980F4"/>
                                                                        <GradientStop Offset="1" Color="#7F316FE8"/>
                                                                    </LinearGradientBrush>
                                                                </Border.Background>
                                                                <Border CornerRadius="1">
                                                                    <Border.Background>
                                                                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                                                            <GradientStop Offset="0" Color="#FF71A6F6"/>
                                                                            <GradientStop Offset="0.015625" Color="#204386F2"/>
                                                                            <GradientStop Offset="0.96875" Color="#203980F4"/>
                                                                            <GradientStop Offset="1" Color="#7F316FE8"/>
                                                                        </LinearGradientBrush>
                                                                    </Border.Background>
                                                                </Border>
                                                            </Border>
                                                            <Border x:Name="HoverBackground" BorderBrush="#FF2C5FB2" BorderThickness="1" CornerRadius="2" Margin="{TemplateBinding Padding}" ClipToBounds="True" Visibility="Collapsed">
                                                                <Border.Background>
                                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                                        <GradientStop Offset="0" Color="#FF8EC6FF"/>
                                                                        <GradientStop Offset="0.25" Color="#FF69AFFF"/>
                                                                        <GradientStop Offset="0.875" Color="#FF55A0FF"/>
                                                                        <GradientStop Offset="1" Color="#7F2A81FF"/>
                                                                    </LinearGradientBrush>
                                                                </Border.Background>
                                                                <Border CornerRadius="1">
                                                                    <Border.Background>
                                                                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                                                            <GradientStop Offset="0" Color="#FF8EC6FF"/>
                                                                            <GradientStop Offset="0.015625" Color="#2069AFFF"/>
                                                                            <GradientStop Offset="0.96875" Color="#2055A0FF"/>
                                                                            <GradientStop Offset="1" Color="#7F2A81FF"/>
                                                                        </LinearGradientBrush>
                                                                    </Border.Background>
                                                                </Border>
                                                            </Border>
                                                            <Border x:Name="PressedBackground" Background="#FF174CBA" BorderBrush="#FF123C92" BorderThickness="1" CornerRadius="2" Margin="{TemplateBinding Padding}" ClipToBounds="True" Visibility="Collapsed">
                                                                <Border ClipToBounds="True">
                                                                    <Border Margin="-1" BorderBrush="#FF123C92" BorderThickness="1" CornerRadius="2">
                                                                        <Border.Effect>
                                                                            <DropShadowEffect Color="#FF123D94" Direction="315" BlurRadius="3" ShadowDepth="2" Opacity="1"/>
                                                                        </Border.Effect>
                                                                    </Border>
                                                                </Border>
                                                            </Border>
                                                            <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                                                <ContentPresenter x:Name="PART_ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="4,0" Visibility="Hidden" />
                                                                <GridViewRowPresenter x:Name="PART_GridViewRowPesenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="4,0" Visibility="Visible" />
                                                            </Grid>
                                                        </Grid>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="GridView.ColumnCollection" Value="{x:Null}">
                                                                <Setter TargetName="PART_ContentPresenter" Property="Visibility" Value="Visible"/>
                                                                <Setter TargetName="PART_GridViewRowPesenter" Property="Visibility" Value="Hidden"/>
                                                            </Trigger>
                                                            <MultiTrigger>
                                                                <MultiTrigger.Conditions>
                                                                    <Condition Property="IsMouseOver" Value="True"/>
                                                                    <Condition Property="IsSelected" Value="False"/>
                                                                </MultiTrigger.Conditions>
                                                                <Setter TargetName="IdleBackground" Property="Visibility" Value="Collapsed"/>
                                                                <Setter TargetName="HoverBackground" Property="Visibility" Value="Visible"/>
                                                            </MultiTrigger>
                                                            <Trigger Property="IsSelected" Value="True">
                                                                <Setter TargetName="IdleBackground" Property="Visibility" Value="Collapsed"/>
                                                                <Setter TargetName="PressedBackground" Property="Visibility" Value="Visible"/>
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:AppBarWindow}}}" Value="Horizontal">
                                                    <Setter Property="Width" Value="160"/>
                                                    <Setter Property="MaxWidth" Value="160"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:AppBarWindow}}}" Value="Vertical">
                                                    <Setter Property="Width" Value="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Path=DockMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:AppBarWindow}}}" Value="Left">
                                                    <Setter Property="Padding" Value="2,0,3,0"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </ControlTemplate.Resources>
                                    <StackPanel IsItemsHost="True" Orientation="Horizontal"/>
                                </ControlTemplate>
                            </ListView.Template>
                            <ListView.ItemTemplate>
                                <DataTemplate DataType="{x:Type window:ProcessWindow}">
                                    <DockPanel VerticalAlignment="Center" HorizontalAlignment="Center">
                                        <Canvas x:Name="IconCanvas" Width="24" Height="24" VerticalAlignment="Center" Background="{Binding Icon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='24'}" DockPanel.Dock="Left"/>
                                        <TextBlock Margin="4,0,0,0" Text="{Binding Title}" VerticalAlignment="Center"/>
                                    </DockPanel>
                                    <DataTemplate.Triggers>
                                        <DataTrigger Binding="{Binding SmallIcon}" Value="{x:Null}">
                                            <Setter TargetName="IconCanvas" Property="Background" Value="Black"/>
                                        </DataTrigger>
                                    </DataTemplate.Triggers>
                                </DataTemplate>
                            </ListView.ItemTemplate>
                        </ListView>
                        <Canvas x:Name="IconCanvas" Width="24" Height="24" HorizontalAlignment="Center" VerticalAlignment="Center" Background="{Binding LargeIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='24'}"/>
                    </Grid>
                    <DataTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding CombineItems, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="False"/>
                                <Condition Binding="{Binding IsRunning}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="IconCanvas" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="ItemsListView" Property="Visibility" Value="Visible"/>
                        </MultiDataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate-->
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <DockPanel>
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" VerticalAlignment="Stretch" UseLayoutRounding="True" SnapsToDevicePixels="True" DockPanel.Dock="Left">
                            <Rectangle Width="1" Fill="{DynamicResource TitlebarBorderBrush}" Margin="0,1,0,0"/>
                            <Rectangle Width="1" Fill="{DynamicResource WindowBorderBrush}"/>
                            <Rectangle Width="1" Fill="{DynamicResource TitlebarBorderBrush}" Margin="0,1,0,0"/>
                        </StackPanel>
                        <WrapPanel x:Name="ItemsHostWrapPanel" IsItemsHost="True" MaxWidth="{Binding Path=ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ScrollViewer}}}" HorizontalAlignment="Left" Background="#01000000" Orientation="Horizontal" Margin="0"/>
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:AppBarWindow}}}" Value="Vertical">
                            <Setter TargetName="ItemsHostWrapPanel" Property="Orientation" Value="vertical"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FlyoutWindowStyle" TargetType="{x:Type win:ShadowedWindow}">
        <Setter Property="CompositionState" Value="Alpha"/>
        <Setter Property="Margin" Value="3,2,3,4"/>
        <Setter Property="Padding" Value="0,0,0,3"/>
        <Setter Property="FontFamily" Value="pack://application:,,,/Start9.UI.Wpf;component/Fonts/#Ubuntu"/>
        <Setter Property="Foreground" Value="{DynamicResource ButtonForegroundBrush}"/>
        <Setter Property="HideTransitionDuration" Value="13"/>
        <Setter Property="ShadowStyle">
            <Setter.Value>
                <Style TargetType="Window">
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="BorderBrush" Value="Transparent"/>
                    <Setter Property="BorderThickness" Value="0"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="Window"/>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type win:ShadowedWindow}">
                    <Grid x:Name="RootGrid" Margin="{TemplateBinding Margin}">
                        <Grid.RenderTransform>
                            <TranslateTransform X="0" Y="25"/>
                        </Grid.RenderTransform>
                        <Border BorderThickness="1" UseLayoutRounding="True" Effect="{DynamicResource DropShadow}" CornerRadius="3">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                            </Border.Background>
                            <ContentPresenter Content="{TemplateBinding Content}" Margin="{TemplateBinding Padding}"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsWindowVisible" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="RootGrid" Storyboard.TargetProperty="RenderTransform.Y" From="25" To="0" Duration="0:0:0.125">
                                            <DoubleAnimation.EasingFunction>
                                                <CircleEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.125"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="RootGrid" Storyboard.TargetProperty="RenderTransform.Y" From="0" To="25" Duration="0:0:0.125">
                                            <DoubleAnimation.EasingFunction>
                                                <CircleEase EasingMode="EaseIn"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="0:0:0.125"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ThumbnailsWindowStyle" TargetType="{x:Type local:ThumbnailsWindow}" BasedOn="{StaticResource FlyoutWindowStyle}">
        <Setter Property="Padding" Value="3,3,0,3"/>
        <Setter Property="RepositionEase">
            <Setter.Value>
                <CircleEase EasingMode="EaseInOut"/>
            </Setter.Value>
        </Setter>
        <!--Setter Property="Background" Value="Transparent"/>
        <Setter Property="Width" Value="200"/>
        <Setter Property="CompositionState" Value="Acrylic"/>
        <-Setter Property="FontFamily" Value="Segoe UI"/->
        <Setter Property="FontFamily" Value="pack://application:,,,/Start9.UI.Wpf;component/Fonts/#Ubuntu"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type win:CompositingWindow}">
                    <Border Background="#C0000000">
                        <ContentPresenter Content="{TemplateBinding Content}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter-->
        <Setter Property="SizeToContent" Value="WidthAndHeight"/>
        <Style.Triggers>
            <!--DataTrigger Binding="{Binding IsCompositionEnabled, Source={x:Static tic:SystemState.Instance}}" Value="True">
                <Setter Property="Margin" Value="7,5,0,5"/>
            </DataTrigger-->
            <DataTrigger Binding="{Binding IsCompositionEnabled, Source={x:Static tic:SystemState.Instance}}" Value="False">
                <Setter Property="Padding" Value="3,3,3,0"/>
                <Setter Property="SizeToContent" Value="Height"/>
                <Setter Property="Width" Value="200"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="DarkListViewItemStyle" TargetType="{x:Type ListViewItem}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Background" Value="#30FFFFFF"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="4"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <ContentPresenter x:Name="PART_ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="4,0" Visibility="Hidden" />
                            <GridViewRowPresenter x:Name="PART_GridViewRowPesenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="4,0" Visibility="Visible" />
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="GridView.ColumnCollection" Value="{x:Null}">
                            <Setter TargetName="PART_ContentPresenter" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="PART_GridViewRowPesenter" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="False"/>
                    <Condition Property="IsSelected" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="#01000000"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ThumbnailsListViewStyle" TargetType="{x:Type ListView}">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type window:ProcessWindow}">
                    <Grid>
                        <DockPanel x:Name="RootDockPanel" LastChildFill="True">
                            <DockPanel x:Name="HeaderDockPanel" VerticalAlignment="Center" HorizontalAlignment="Stretch" MaxWidth="200" DockPanel.Dock="Top">
                                <Canvas x:Name="IconCanvas" Width="16" Height="16" VerticalAlignment="Center" Background="{Binding SmallIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='16'}" DockPanel.Dock="Left"/>
                                <Rectangle x:Name="TitleSpacingDummyRectangle" Width="0" DockPanel.Dock="Right"/>
                                <TextBlock x:Name="TitleTextBlock" Margin="4,0,0,0" Text="{Binding Title}" VerticalAlignment="Center"/>
                            </DockPanel>
                            <Grid x:Name="ThumbnailGrid" Visibility="{Binding IsCompositionEnabled, Source={x:Static tic:SystemState.Instance}, Converter={StaticResource BooleanToVisibilityConverter}, Mode=OneWay}">
                                <Border Background="#7F000000" BorderBrush="#40FFFFFF" BorderThickness="1" CornerRadius="1" Margin="11,0" HorizontalAlignment="Center" VerticalAlignment="Center">
                                    <Rectangle x:Name="ThumbnailRectangle" Fill="{Binding Thumbnail, Converter={StaticResource SysDrawingImageToImageBrushConverter}}" Margin="1">
                                        <!--Width="{Binding WindowBounds.Width, Converter={StaticResource DoubleToFractionOfDoubleConverter}, FallbackValue=0.0}" Height="{Binding WindowBounds.Height, Converter={StaticResource DoubleToFractionOfDoubleConverter}, FallbackValue=0.0}"/-->
                                    </Rectangle>
                                </Border>
                            </Grid>
                        </DockPanel>
                        <Button x:Name="CloseWindowButton" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,-5,-5,0">
                            <Button.Style>
                                <Style TargetType="{x:Type Button}" BasedOn="{StaticResource CaptionButtonStyle}">
                                    <Setter Property="Height" Value="24"/>
                                    <Setter Property="Foreground" Value="{DynamicResource ButtonForegroundBrush}"/>
                                    <Setter Property="Padding" Value="0"/>
                                    <Setter Property="Content">
                                        <Setter.Value>
                                            <Path Data="M 0 0 L 2 0 L 4.5 3 L 7 0 L 9 0 
                                  L 9 2 L 6 4.5 L 9 7 L 9 9 
                                  L 7 9 L 4.5 6 L 2 9 L 0 9 
                                  L 0 7 L 3 4.5 L 0 2 Z" Fill="{Binding Path=Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}}" Stroke="Transparent" StrokeThickness="0" Margin="0,1,1,0" RenderOptions.EdgeMode="Aliased" UseLayoutRounding="True"/>
                                            <!--M 0 -1 L 2 -1 L 4.5 2 L 7 -1 L 9 -1 L 9 1 L 6 3.5 L 9 6 L 9 8 L 7 8 L 4.5 5 L 2 8 L 0 8 L 0 6 L 3 3.5 L 0 1 Z-->
                                        </Setter.Value>
                                    </Setter>
                                    <!--{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ListViewItem}}-->
                                    <!--Setter Property="Width" Value="16"/>
                                    <Setter Property="Height" Value="16"/>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="{x:Type Button}">
                                                <Grid>
                                                    <Border x:Name="RootBorder" BorderBrush="#FF3C181A" BorderThickness="1" CornerRadius="2" Margin="1">
                                                        <Border.Background>
                                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                                <GradientStop Offset="0" Color="#FFE4B4B0"/>
                                                                <GradientStop Offset="0.25" Color="#FFF2927C"/>
                                                                <GradientStop Offset="0.25" Color="#FFBF5943"/>
                                                                <GradientStop Offset="1" Color="#FFCE7F70"/>
                                                            </LinearGradientBrush>
                                                        </Border.Background>
                                                        <Border x:Name="InnerBorder" BorderThickness="1" CornerRadius="1">
                                                            <Border.BorderBrush>
                                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                                    <GradientStop Offset="0" Color="#FFFACAC8"/>
                                                                    <GradientStop Offset="0.25" Color="#FFFDB3AA"/>
                                                                    <GradientStop Offset="0.25" Color="#FFDB8D83"/>
                                                                    <GradientStop Offset="1" Color="#FFEFACA6"/>
                                                                </LinearGradientBrush>
                                                            </Border.BorderBrush>
                                                            <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
                                                                <Grid.Effect>
                                                                    <DropShadowEffect Color="Black" ShadowDepth="0" BlurRadius="1" Opacity="1"/>
                                                                </Grid.Effect>
                                                                <Path Data="M 0 0 L 2 0 L 3 1 L 4 0 L 6 0 L 4 2 L 4 4 L 6 6 L 4 6 L 3 5 L 2 6 L 0 6 L 2 4 L 2 2 Z" Stroke="Black" StrokeThickness="0" HorizontalAlignment="Center" VerticalAlignment="Center" UseLayoutRounding="True">
                                                                    <Path.Effect>
                                                                        <DropShadowEffect Color="Black" ShadowDepth="0" BlurRadius="1" Opacity="1"/>
                                                                    </Path.Effect>
                                                                    <!-M 0 0 L 1 0 L 8 8 L 7 8 Z M 8 0 L 7 0 L 0 8 L 0 7 Z->
                                                                    <!-M 0 0 L 3 0 L 4 1 L 5 0 L 7 0 L 7 1 L 5 3 L 5 5 L 7 7 L 7 6 L 5 7 L 4 6 L 3 7 L 0 7 L 0 6 L 3 5 L 3 3 L 0 1 Z->
                                                                    <Path.Fill>
                                                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                                            <GradientStop Offset="0" Color="White"/>
                                                                            <GradientStop Offset="1" Color="#FFDADADA"/>
                                                                        </LinearGradientBrush>
                                                                    </Path.Fill>
                                                                </Path>
                                                            </Grid>
                                                        </Border>
                                                    </Border>
                                                </Grid>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Setter TargetName="RootBorder" Property="Background">
                                                            <Setter.Value>
                                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                                    <GradientStop Offset="0" Color="#FFE49F92"/>
                                                                    <GradientStop Offset="0.25" Color="#FFDE9284"/>
                                                                    <GradientStop Offset="0.25" Color="#FFB8432C"/>
                                                                    <GradientStop Offset="1" Color="#FFD58576"/>
                                                                </LinearGradientBrush>
                                                            </Setter.Value>
                                                        </Setter>
                                                        <Setter TargetName="InnerBorder" Property="BorderBrush">
                                                            <Setter.Value>
                                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                                    <GradientStop Offset="0" Color="#FFFDE4E0"/>
                                                                    <GradientStop Offset="0.25" Color="#FFFCCEC6"/>
                                                                    <GradientStop Offset="0.25" Color="#FFE78977"/>
                                                                    <GradientStop Offset="1" Color="#FFF8E893"/>
                                                                </LinearGradientBrush>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </Trigger>
                                                    <Trigger Property="IsPressed" Value="True">
                                                        <Setter TargetName="RootBorder" Property="Background">
                                                            <Setter.Value>
                                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                                    <GradientStop Offset="0" Color="#FFE49F92"/>
                                                                    <GradientStop Offset="0.25" Color="#FFDE9284"/>
                                                                    <GradientStop Offset="0.25" Color="#FFB8432C"/>
                                                                    <GradientStop Offset="1" Color="#FFD58576"/>
                                                                </LinearGradientBrush>
                                                            </Setter.Value>
                                                        </Setter>
                                                        <Setter TargetName="InnerBorder" Property="BorderBrush">
                                                            <Setter.Value>
                                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                                    <GradientStop Offset="0" Color="#FFE3CCC1"/>
                                                                    <GradientStop Offset="0.25" Color="#FFCCB0A5"/>
                                                                    <GradientStop Offset="0.25" Color="#FFB28176"/>
                                                                    <GradientStop Offset="1" Color="#FFEFE28F"/>
                                                                </LinearGradientBrush>
                                                            </Setter.Value>
                                                        </Setter>
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter-->
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ListViewItem}}}" Value="False">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                            <e:Interaction.Behaviors>
                                <local:CloseWindowButtonBehavior TargetWindow="{Binding}"/>
                            </e:Interaction.Behaviors>
                        </Button>
                    </Grid>
                    <DataTemplate.Triggers>
                        <Trigger SourceName="CloseWindowButton" Property="IsVisible" Value="True">
                            <Setter TargetName="TitleTextBlock" Property="Margin" Value="4,0,20,0"/>
                            <!--Setter TargetName="TitleSpacingDummyRectangle" Property="Width" Value="20"/-->
                        </Trigger>
                        <DataTrigger Binding="{Binding IsCompositionEnabled, Source={x:Static tic:SystemState.Instance}}" Value="False">
                            <Setter TargetName="HeaderDockPanel" Property="Margin" Value="0,2,0,-2"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsCompositionEnabled, Source={x:Static tic:SystemState.Instance}}" Value="True">
                            <Setter TargetName="HeaderDockPanel" Property="Height" Value="22"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsCompositionEnabled, Source={x:Static tic:SystemState.Instance}}" Value="True"/>
                                <Condition Binding="{Binding ActualWidth, ElementName=ThumbnailRectangle, Converter={StaticResource DoubleComparisonConverter}, ConverterParameter='ge200'}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="HeaderDockPanel" Property="MaxWidth" Value="{Binding ActualWidth, ElementName=ThumbnailRectangle}"/>
                        </MultiDataTrigger>
                        <Trigger SourceName="ThumbnailRectangle" Property="IsVisible" Value="True">
                            <Setter TargetName="ThumbnailRectangle" Property="Width">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource RectangleScaleConverter}" ConverterParameter="200.0,100.0">
                                        <MultiBinding.Bindings>
                                            <Binding Path="WindowBounds.Width"/>
                                            <Binding Path="WindowBounds.Height"/>
                                        </MultiBinding.Bindings>
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="ThumbnailRectangle" Property="Height">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource RectangleScaleConverter}" ConverterParameter="200.0,100.0,v">
                                        <MultiBinding.Bindings>
                                            <Binding Path="WindowBounds.Width"/>
                                            <Binding Path="WindowBounds.Height"/>
                                            <!--Binding Path="aaa" FallbackValue="200.0"/>
                                        <Binding Path="aaa" FallbackValue="110.0"/>
                                        <Binding Path="aaa" FallbackValue="110.0"/-->
                                        </MultiBinding.Bindings>
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <!--DataTrigger Binding="{Binding Thumbnail}" Value="{x:Null}">
                            <Setter TargetName="ThumbnailGrid" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger-->
                        <DataTrigger Binding="{Binding SmallIcon}" Value="{x:Null}">
                            <Setter TargetName="IconCanvas" Property="Background" Value="Black"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource {x:Type ListViewItem}}">
                    <!--Setter Property="OverridesDefaultStyle" Value="True"/>
                    <Setter Property="HorizontalAlignment" Value="Stretch"/>
                    <Setter Property="Background" Value="#01000000"/>
                    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                    <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                    <Setter Property="BorderBrush" Value="Transparent"/>
                    <Setter Property="BorderThickness" Value="0"/>
                    <Setter Property="Padding" Value="7"/>
                    <Setter Property="Foreground" Value="White"/-->
                    <Setter Property="Margin" Value="0,0,3,0"/>
                    <Setter Property="Padding" Value="5"/>
                    <Setter Property="ToolTip">
                        <Setter.Value>
                            <ToolTip IsHitTestVisible="False" Opacity="0" Content="Test"/>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="tic:AttachedProperties.CornerCurves">
                        <Setter.Value>
                            <tic:CornerCurves TopLeft="True" TopRight="True" BottomRight="True" BottomLeft="True"/>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ListViewItem}">
                                <Grid>
                                    <e:Interaction.Behaviors>
                                        <local:PeekBehavior PeekWindow="{Binding}"/>
                                        <local:SysMenuBehavior TargetWindow="{Binding}"/>
                                    </e:Interaction.Behaviors>
                                    <Border x:Name="HoverBackground" CornerRadius="{Binding Path=(tic:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='3,3,3,3;0,0,0,0'}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonHoverBorderBrush}" BorderThickness="1" Opacity="0">
                                        <Border.Background>
                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonHoverBackgroundGradientStops}"/>
                                        </Border.Background>
                                        <Border x:Name="HoverInnerBackground" CornerRadius="{Binding Path=(tic:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='2,2,2,2;0,0,0,0'}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                            <Border.Background>
                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonHoverSecondaryBackgroundGradientStops}"/>
                                            </Border.Background>
                                        </Border>
                                    </Border>
                                    <Border x:Name="SelectedBackground" CornerRadius="{Binding CornerRadius, ElementName=HoverBackground}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonPressedBorderBrush}" BorderThickness="1" Opacity="0">
                                        <Border.Background>
                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedBackgroundGradientStops}"/>
                                        </Border.Background>
                                        <Border CornerRadius="{Binding CornerRadius, ElementName=HoverInnerBackground}" Margin="1" Padding="0" BorderBrush="Transparent" BorderThickness="0">
                                            <Border.Background>
                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedSecondaryBackgroundGradientStops}"/>
                                            </Border.Background>
                                        </Border>
                                    </Border>
                                    <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="{TemplateBinding Padding}">
                                        <ContentPresenter x:Name="PART_ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="0" Visibility="Hidden" />
                                        <GridViewRowPresenter x:Name="PART_GridViewRowPesenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="0" Visibility="Visible" />
                                    </Grid>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="GridView.ColumnCollection" Value="{x:Null}">
                                        <Setter TargetName="PART_ContentPresenter" Property="Visibility" Value="Visible"/>
                                        <Setter TargetName="PART_GridViewRowPesenter" Property="Visibility" Value="Hidden"/>
                                    </Trigger>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Trigger.EnterActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.0625" />
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </Trigger.EnterActions>
                                        <Trigger.ExitActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </Trigger.ExitActions>
                                    </Trigger>
                                    <Trigger Property="IsSelected" Value="True">
                                        <Trigger.EnterActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetName="SelectedBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </Trigger.EnterActions>
                                        <Trigger.ExitActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetName="SelectedBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </Trigger.ExitActions>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                                <!--ControlTemplate.Triggers>
                                    <Trigger Property="GridView.ColumnCollection" Value="{x:Null}">
                                        <Setter TargetName="PART_ContentPresenter" Property="Visibility" Value="Visible"/>
                                        <Setter TargetName="PART_GridViewRowPesenter" Property="Visibility" Value="Hidden"/>
                                    </Trigger>
                                    <DataTrigger Binding="{Binding IsCompositionEnabled, Source={x:Static tic:SystemState.Instance}}" Value="False">
                                        <Setter Property="Padding" Value="2,0"/>
                                        <Setter Property="Height" Value="22"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding IsCompositionEnabled, Source={x:Static tic:SystemState.Instance}}" Value="True">
                                        <Setter Property="Margin" Value="0,0,7,0"/>
                                    </DataTrigger>
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="IsMouseOver" Value="False"/>
                                            <Condition Property="IsSelected" Value="False"/>
                                        </MultiTrigger.Conditions>
                                        <MultiTrigger.EnterActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125"/>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </MultiTrigger.EnterActions>
                                        <MultiTrigger.ExitActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125"/>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </MultiTrigger.ExitActions>
                                    </MultiTrigger>
                                </ControlTemplate.Triggers-->
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <!--Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ListViewItem}">
                                <Grid>
                                    <e:Interaction.Behaviors>
                                        <local:PeekBehavior PeekWindow="{Binding}"/>
                                        <local:SysMenuBehavior TargetWindow="{Binding}"/>
                                    </e:Interaction.Behaviors>
                                    <Border x:Name="HoverBackground" BorderBrush="#7F99DDFD" BorderThickness="1" CornerRadius="3" Margin="0,1" Opacity="0">
                                        <Border.Background>
                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                <GradientStop Offset="0" Color="#4D98DAFB"/>
                                                <GradientStop Offset="1" Color="#4D00ACFB"/>
                                            </LinearGradientBrush>
                                        </Border.Background>
                                    </Border>
                                    <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="{TemplateBinding Padding}">
                                        <ContentPresenter x:Name="PART_ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="0" Visibility="Hidden" />
                                        <GridViewRowPresenter x:Name="PART_GridViewRowPesenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="0" Visibility="Visible" />
                                    </Grid>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="GridView.ColumnCollection" Value="{x:Null}">
                                        <Setter TargetName="PART_ContentPresenter" Property="Visibility" Value="Visible"/>
                                        <Setter TargetName="PART_GridViewRowPesenter" Property="Visibility" Value="Hidden"/>
                                    </Trigger>
                                    <DataTrigger Binding="{Binding IsCompositionEnabled, Source={x:Static tic:SystemState.Instance}}" Value="False">
                                        <Setter Property="Padding" Value="2,0"/>
                                        <Setter Property="Height" Value="22"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding IsCompositionEnabled, Source={x:Static tic:SystemState.Instance}}" Value="True">
                                        <Setter Property="Margin" Value="0,0,7,0"/>
                                    </DataTrigger>
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="IsMouseOver" Value="False"/>
                                            <Condition Property="IsSelected" Value="False"/>
                                        </MultiTrigger.Conditions>
                                        <MultiTrigger.EnterActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125"/>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </MultiTrigger.EnterActions>
                                        <MultiTrigger.ExitActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125"/>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </MultiTrigger.ExitActions>
                                    </MultiTrigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter-->
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <StackPanel x:Name="RootStackPanel" Orientation="Vertical" IsItemsHost="True"/>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsCompositionEnabled, Source={x:Static tic:SystemState.Instance}}" Value="True">
                            <Setter TargetName="RootStackPanel" Property="Orientation" Value="Horizontal"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="JumpListEntryListViewItemStyle" TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource {x:Type ListViewItem}}"/>
    <!--Setter Property="OverridesDefaultStyle" Value="True"/>
    <Setter Property="HorizontalAlignment" Value="Stretch"/>
    <Setter Property="Background" Value="#01000000"/>
    <Setter Property="Height" Value="30"/>
    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="VerticalContentAlignment" Value="Stretch"/>
    <Setter Property="BorderBrush" Value="Transparent"/>
    <Setter Property="BorderThickness" Value="0"/>
    <Setter Property="Padding" Value="12,0"/>
    <Setter Property="Foreground" Value="White"/>
    <Setter Property="Template">
        <Setter.Value>
            <ControlTemplate TargetType="{x:Type ListViewItem}">
                <Grid Background="{TemplateBinding Background}">
                    <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="{TemplateBinding Padding}">
                        <ContentPresenter x:Name="PART_ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="0" Visibility="Hidden" />
                        <GridViewRowPresenter x:Name="PART_GridViewRowPesenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="0" Visibility="Visible" />
                    </Grid>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="GridView.ColumnCollection" Value="{x:Null}">
                        <Setter TargetName="PART_ContentPresenter" Property="Visibility" Value="Visible"/>
                        <Setter TargetName="PART_GridViewRowPesenter" Property="Visibility" Value="Hidden"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Setter.Value>
    </Setter>
    <Style.Triggers>
        <Trigger Property="IsMouseOver" Value="True">
            <Setter Property="Background" Value="#30FFFFFF"/>
        </Trigger>
    </Style.Triggers-->


    <Style x:Key="JumpListWindowStyle" TargetType="{x:Type win:ShadowedWindow}" BasedOn="{StaticResource FlyoutWindowStyle}">
        <!--Setter Property="BorderBrush" Value="#FF46474A"/-->
        <Setter Property="MinWidth" Value="200"/>
        <!--Setter Property="FontFamily" Value="pack://application:,,,/Start9.UI.Wpf;component/Fonts/#Ubuntu"/>
        <Setter Property="HideTransitionDuration" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type win:CompositingWindow}">
                    <Border x:Name="RootBorder" Background="Transparent" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1">
                        <Border.RenderTransform>
                            <TranslateTransform X="0" Y="25"/>
                        </Border.RenderTransform>
                        <ContentPresenter Content="{TemplateBinding Content}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsWindowVisible" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="RootBorder" Storyboard.TargetProperty="RenderTransform.Y" From="25" To="0" Duration="0:0:0.25">
                                            <DoubleAnimation.EasingFunction>
                                                <CircleEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="RootBorder" Storyboard.TargetProperty="RenderTransform.Y" To="0" Duration="0:0:0">
                                            <DoubleAnimation.EasingFunction>
                                                <CircleEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter-->
    </Style>

    <Style x:Key="JumpListSegmentListViewStyle" TargetType="{x:Type ListView}">
        <!--Setter Property="BorderBrush" Value="#FF46474A"/-->
        <Setter Property="Margin" Value="3,3,3,0"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonBackgroundGradientStops}"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Grid>
                        <Border CornerRadius="{Binding Path=(tic:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='3,3,3,3;0,0,0,0'}" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonIdleBorderBrush}" BorderThickness="1">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                            </Border.Background>
                            <Border CornerRadius="{Binding Path=(tic:AttachedProperties.CornerCurves), RelativeSource={RelativeSource Mode=TemplatedParent}, Converter={StaticResource CornerCurvesToCornerRadiusConverter}, ConverterParameter='2,2,2,2;0,0,0,0'}" Margin="1" Padding="0" Background="{TemplateBinding Background}" BorderBrush="Transparent" BorderThickness="0"/>
                        </Border>
                        <StackPanel Margin="{TemplateBinding Padding}" IsItemsHost="True"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="JumpListBottomSegmentListViewStyle" TargetType="{x:Type ListView}" BasedOn="{StaticResource JumpListSegmentListViewStyle}">
        <Style.Resources>
            <LinearGradientBrush x:Key="IconFillBrush" StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource DarkIconGradientStops}"/>
            <!--Style x:Key="{x:Type ListViewItem}" TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource JumpListEntryListViewItemStyle}"/-->
            <Style x:Key="JumpListApplicationListViewItemStyle" TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource JumpListEntryListViewItemStyle}">
                <Setter Property="Margin" Value="0,0,0,-1"/>
                <Setter Property="tic:AttachedProperties.CornerCurves">
                    <Setter.Value>
                        <tic:CornerCurves TopLeft="True" TopRight="True" BottomRight="False" BottomLeft="False"/>
                    </Setter.Value>
                </Setter>
                <Setter Property="Content">
                    <Setter.Value>
                        <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                            <Rectangle VerticalAlignment="Center" Width="16" Height="16" Fill="{DynamicResource JumpListSmallIconImageBrush}" Margin="0,0,6,0"/>
                            <!--Rectangle VerticalAlignment="Center" Width="16" Height="16" Fill="Red" Margin="0,0,12,0"/-->
                            <!--Fill="{Binding {DynamicResource JumpListApplicationIcon}, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='16'}"/-->
                            <TextBlock VerticalAlignment="Center" Text="{DynamicResource JumpListApplicationNameText}"/>
                        </StackPanel>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="JumpListPinListViewItemStyle" TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource JumpListEntryListViewItemStyle}">
                <Setter Property="Margin" Value="0,0,0,-1"/>
                <Setter Property="tic:AttachedProperties.CornerCurves">
                    <Setter.Value>
                        <tic:CornerCurves TopLeft="False" TopRight="False" BottomRight="False" BottomLeft="False"/>
                    </Setter.Value>
                </Setter>
                <Setter Property="Content">
                    <Setter.Value>
                        <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                            <!--Rectangle VerticalAlignment="Center" Width="16" Height="8" Margin="0,0,6,0">
                                <Rectangle.Fill>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource DarkIconGradientStops}"/>
                                </Rectangle.Fill>
                                <Rectangle.Clip>
                                    <!-CombinedGeometry>
                                        <CombinedGeometry.Geometry1>
                                            <RectangleGeometry Rect="0,4,6,1"/>
                                        </CombinedGeometry.Geometry1>
                                        <CombinedGeometry.Geometry2>
                                            <PathGeometry Figures="M 6 0 L 9 2 L 14 2 L 16 1 L 16 8 L 14 7 L 9 7 L 6 9 Z"/>
                                        </CombinedGeometry.Geometry2>
                                    </CombinedGeometry->
                                    <GeometryGroup FillRule="Nonzero">
                                        <RectangleGeometry Rect="0,4,6,1"/>
                                        <PathGeometry Figures="M 6 0 L 9 2 L 14 2 L 16 1 L 16 8 L 14 7 L 9 7 L 6 9 Z"/>
                                    </GeometryGroup>
                                </Rectangle.Clip-->
                                <!--Rectangle Width="6" Height="1" Fill="#FFE4E4E4" Canvas.Top="4"/>
                                <Path Data="M 0 0 L 3 2 L 8 2 L 10 1 L 10 8 L 8 7 L 3 7 L 0 9 Z" Canvas.Left="6" SnapsToDevicePixels="True">
                                    <Path.Fill>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                            <GradientStop Offset="0" Color="#FFE9E9E9"/>
                                            <GradientStop Offset="1" Color="#FF747474"/>
                                        </LinearGradientBrush>
                                    </Path.Fill>
                                </Path-->
                                <!--Path Data="M 0 0 L 3 2 L 8 2 L 10 1 L 10 6 L 8 5 L 3 5 L 0 7 Z" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}" StrokeThickness="1" Canvas.Left="6"/-->
                            <!--/Rectangle-->
                            <Path Data="M 6 0 L 9 2 L 14 2 L 16 1 L 16 8 L 14 7 L 9 7 L 6 9 Z M 0 4 L 6 4 L 6 5 L 0 5 Z" VerticalAlignment="Center" Margin="0,0,6,0" Effect="{DynamicResource DropShadow}" Fill="{DynamicResource IconFillBrush}" RenderOptions.EdgeMode="Aliased" UseLayoutRounding="True"/>
                            <TextBlock VerticalAlignment="Center" Text="{DynamicResource JumpListPinApplicationText}"/>
                        </StackPanel>
                    </Setter.Value>
                </Setter>
                <!--Style.Triggers>
                    <DataTrigger Binding="{Binding IsPinned, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type local:JumpListWindow}}}" Value="False">
                        <Setter Property="Content">
                            <Setter.Value>
                                <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                                    <Rectangle VerticalAlignment="Center" Width="16" Height="8" Fill="Red" Margin="0,0,12,0"/>
                                    <TextBlock VerticalAlignment="Center" Text="{DynamicResource JumpListPinApplicationText}"/>
                                </StackPanel>
                            </Setter.Value>
                        </Setter>
                    </DataTrigger>
                </Style.Triggers-->
            </Style>

            <Style x:Key="JumpListKillProcessesListViewItemStyle" TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource JumpListEntryListViewItemStyle}">
                <Setter Property="Margin" Value="0,0,0,-1"/>
                <Setter Property="tic:AttachedProperties.CornerCurves">
                    <Setter.Value>
                        <tic:CornerCurves TopLeft="False" TopRight="False" BottomRight="False" BottomLeft="False"/>
                    </Setter.Value>
                </Setter>
                <Setter Property="Content">
                    <Setter.Value>
                        <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                            <Canvas Width="16" Height="16" VerticalAlignment="Center" Margin="1,0,5,0" Effect="{DynamicResource DropShadow}" RenderOptions.EdgeMode="Aliased" UseLayoutRounding="True">
                                <Path Data="M 0 0 L 5 5" StrokeThickness="3" Stroke="{DynamicResource IconFillBrush}"/>
                                <!--Path.Stroke>
                                    <LinearGradientBrush StartPoint="0.75,0.25" EndPoint="0.25,0.75">
                                        <GradientStop Offset="0" Color="#FF42280A"/>
                                        <GradientStop Offset="0.13" Color="#FF563D23"/>
                                        <GradientStop Offset="0.18" Color="#FF4F3012"/>
                                        <GradientStop Offset="0.31" Color="#FF633A15"/>
                                        <GradientStop Offset="0.31" Color="#FF633A15"/>
                                        <GradientStop Offset="0.5" Color="#FF734620"/>
                                        <GradientStop Offset="0.72" Color="#FF6D4928"/>
                                        <GradientStop Offset="0.86" Color="#FF866140"/>
                                        <GradientStop Offset="1" Color="#FFA47D59"/>
                                    </LinearGradientBrush>
                                </Path.Stroke-->
                                <Path StrokeThickness="0" Data="M 2 0 L 12 10 L 9 10 L 6 9 L 0 2 Z" Fill="{DynamicResource IconFillBrush}" Canvas.Left="3" Canvas.Top="3"/>
                                <!--Path StrokeThickness="0" Data="M 2 0 L 12 10 L 9 10 L 6 9 L 0 2 Z" Fill="{DynamicResource HoverHighlightBrush}" Canvas.Left="3" Canvas.Top="4"/-->
                                <!--Path.Fill>
                                        <LinearGradientBrush StartPoint="1,0" EndPoint="0,1">
                                            <GradientStop Offset="0.45" Color="#FFBBBBBB"/>
                                            <GradientStop Offset="0.55" Color="#FF888888"/>
                                        </LinearGradientBrush>
                                    </Path.Fill-->
                            </Canvas>
                            <!--Path VerticalAlignment="Center" Data="M 0 0 L 12 12 M 12 0 L 0 12" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}" StrokeThickness="1" /-->
                            <TextBlock VerticalAlignment="Center" Text="{DynamicResource JumpListKillProcessesText}"/>
                        </StackPanel>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="JumpListCloseWindowsListViewItemStyle" TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource JumpListEntryListViewItemStyle}">
                <Setter Property="tic:AttachedProperties.CornerCurves">
                    <Setter.Value>
                        <tic:CornerCurves TopLeft="False" TopRight="False" BottomRight="True" BottomLeft="True"/>
                    </Setter.Value>
                </Setter>
                <Setter Property="Content">
                    <Setter.Value>
                        <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                            <Path VerticalAlignment="Center" Data="M 0 0 L 2 0 L 4.5 3 L 7 0 L 9 0 
                                  L 9 2 L 6 4.5 L 9 7 L 9 9 
                                  L 7 9 L 4.5 6 L 2 9 L 0 9 
                                  L 0 7 L 3 4.5 L 0 2 Z" Margin="4,0,9,0" Fill="{DynamicResource IconFillBrush}" Effect="{DynamicResource DropShadow}" RenderOptions.EdgeMode="Aliased" UseLayoutRounding="True"/>
                            <TextBlock VerticalAlignment="Center" Text="{DynamicResource JumpListCloseWindowsText}"/>
                        </StackPanel>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.Resources>
    </Style>

    <!--Style x:Key="TaskItemButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="44" />
        <Setter Property="Height" Value="{Binding Path=ResizeIntervalDistance, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type local:MainWindow}}}"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Background="#01000000">
                        <Grid Margin="1,3,1,2">
                            <Grid x:Name="IdleBackground" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                <themes:ClassicBorderDecorator BorderStyle="Raised" BorderThickness="2.5"/>
                            </Grid>
                            <Grid x:Name="SelectedBackground" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Visibility="Hidden">
                                <themes:ClassicBorderDecorator BorderStyle="Sunken" BorderThickness="2" Background="White"/>
                            </Grid>
                        </Grid>
                        <StackPanel HorizontalAlignment="Left" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Orientation="Horizontal" Margin="5,0">
                            <-ContentControl Content="{TemplateBinding Icon}" Margin="0,0,2,0" Focusable="False" IsTabStop="False" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/->
                            <TextBlock Text="{TemplateBinding Content}" Margin="2,0,0,0" Focusable="False" TextWrapping="Wrap" LineStackingStrategy="BlockLineHeight" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </StackPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="SelectedBackground" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=UseSmallIcons, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="True">
                <Setter Property="MinWidth" Value="36"/>
            </DataTrigger>
        </Style.Triggers>
    </Style-->

    <Style x:Key="TaskBandCycleButtonGridStyle" TargetType="{x:Type UniformGrid}">
        <Style.Resources>

        </Style.Resources>
        <Setter Property="Width" Value="10"/>
    </Style>

    <!--#endregion Taskband Styles-->


    <!--#region Start/QuickLaunch Styles-->

    <Style x:Key="StartToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Margin" Value="0,-1,0,0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Foreground" Value="{DynamicResource TitlebarIdleForegroundBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Width" Value="50"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Effect" Value="{DynamicResource DropShadow}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Background="{TemplateBinding Background}">
                        <Rectangle Width="10" Height="16" Margin="5,0" HorizontalAlignment="Center" VerticalAlignment="Center">
                            <Rectangle.Fill>
                                <VisualBrush>
                                    <VisualBrush.Visual>
                                        <Path x:Name="IconPath" Fill="{TemplateBinding Foreground}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                            <Path.Data>
                                                <PathGeometry Figures="M.38571 108.65214c5.16228-85.95038 115.74251-91.10762 140.85307-8.02139-89.03993-55.68188-108.06556 79.37758 2.59638 51.83045-1.66143 38.1839-24.21286 125.18536-130.4676 144.38482 37.69596-24.67758 64.23096-51.38016 65.55835-103.04384 0 0-83.70248.80034-78.5402-85.15004z" FillRule="NonZero"/>
                                            </Path.Data>
                                        </Path>
                                    </VisualBrush.Visual>
                                </VisualBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                        <!--Rectangle Width="10" Height="16" Margin="5,0" HorizontalAlignment="Center" VerticalAlignment="Center">
                            <Rectangle.Fill>
                                <VisualBrush>
                                    <VisualBrush.Visual>
                                        <Canvas>
                                            <Path Fill="White" ClipToBounds="True">
                                                <Path.Data>
                                                    <PathGeometry Figures="M.38571 108.65214c5.16228-85.95038 115.74251-91.10762 140.85307-8.02139-89.03993-55.68188-108.06556 79.37758 2.59638 51.83045-1.66143 38.1839-24.21286 125.18536-130.4676 144.38482 37.69596-24.67758 64.23096-51.38016 65.55835-103.04384 0 0-83.70248.80034-78.5402-85.15004z" FillRule="NonZero"/>
                                                </Path.Data>
                                            </Path>
                                        </Canvas>
                                    </VisualBrush.Visual>
                                </VisualBrush>
                            </Rectangle.Fill>
                        </Rectangle-->
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="#30FFFFFF"/>
                        </MultiTrigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{x:Static SystemParameters.WindowGlassBrush}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" Value="#60FFFFFF"/>
                            <Setter Property="Foreground" Value="{x:Static SystemParameters.WindowGlassBrush}"/>
                        </Trigger-->
                        <Trigger Property="IsEnabled" Value="False">
                            <!--Setter Property="Foreground" Value="{DynamicResource TitlebarDisabledForegroundBrush}" /-->
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource TitlebarHoverForegroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource TitlebarPressedForegroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource TitlebarPressedForegroundBrush}" />
                        </Trigger>
                        <DataTrigger Binding="{Binding Path=UseSmallIcons, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="True">
                            <Setter Property="Width" Value="36"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SearchTaskViewBaseToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Foreground" Value="{DynamicResource TitlebarIdleForegroundBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Width" Value="48"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Effect" Value="{DynamicResource DropShadow}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="#30FFFFFF"/>
                        </MultiTrigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{x:Static SystemParameters.WindowGlassBrush}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" Value="#60FFFFFF"/>
                            <Setter Property="Foreground" Value="{x:Static SystemParameters.WindowGlassBrush}"/>
                        </Trigger-->
                        <Trigger Property="IsEnabled" Value="False">
                            <!--Setter Property="Foreground" Value="{DynamicResource TitlebarDisabledForegroundBrush}" /-->
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource TitlebarHoverForegroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource TitlebarPressedForegroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource TitlebarPressedForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=UseSmallIcons, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="True">
                <Setter Property="Width" Value="36"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="SearchToggleButtonStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource SearchTaskViewBaseToggleButtonStyle}">
        <Setter Property="Content">
            <Setter.Value>
                <Canvas Width="16" Height="16">
                    <Path Data="M 0 7 L 7 0" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ToggleButton}}}" StrokeThickness="2" Canvas.Top="9"/>
                    <Ellipse Width="11" Height="11" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ToggleButton}}}" StrokeThickness="2" Canvas.Left="5"/>
                </Canvas>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SearchTextBoxStyle" TargetType="{x:Type TextBox}">
        <Setter Property="Width" Value="344"/>
        <Setter Property="Background" Value="#FF333333"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Foreground" Value="#7FFFFFFF"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ControlTemplate.Resources>
                        <CircleEase x:Key="AnimationEase" EasingMode="EaseOut"/>
                        <CircleEase x:Key="EmblemEase" EasingMode="EaseInOut"/>
                    </ControlTemplate.Resources>
                    <Border Background="{TemplateBinding Background}">
                        <DockPanel>
                            <Grid x:Name="EmblemGrid" Width="22" Height="{Binding Width, RelativeSource={RelativeSource Mode=Self}}" Margin="9" RenderTransformOrigin="0.5,0.5" DockPanel.Dock="Left">
                                <Grid.RenderTransform>
                                    <ScaleTransform ScaleX="1" ScaleY="1"/>
                                </Grid.RenderTransform>
                                <Ellipse x:Name="EmblemOuterEllipse" Stroke="{TemplateBinding Foreground}" StrokeThickness="4" Margin="0" Fill="Transparent" Opacity="0.5"/>
                                <Ellipse x:Name="EmblemInnerEllipse" Stroke="{TemplateBinding Foreground}" StrokeThickness="2" Margin="2" Fill="Transparent"/>
                            </Grid>
                            <Grid Margin="{TemplateBinding Padding}">
                                <ScrollViewer x:Name="PART_ContentHost" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Background="#01000000"/>
                                <TextBlock x:Name="Watermark" Text="Type here to search" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" IsHitTestVisible="False" Visibility="Collapsed"/>
                            </Grid>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Text" Value="{x:Static sys:String.Empty}">
                            <Setter TargetName="Watermark" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <!--ThicknessAnimation Storyboard.TargetName="EmblemGrid" Storyboard.TargetProperty="Margin" To="7" Duration="0:0:2" EasingFunction="{StaticResource EmblemEase}" AutoReverse="True" RepeatBehavior="{x:Static RepeatBehavior.Forever}"/>
                                        <DoubleAnimation Storyboard.TargetName="EmblemGrid" Storyboard.TargetProperty="Width" To="26" Duration="0:0:2" EasingFunction="{StaticResource EmblemEase}" AutoReverse="True" RepeatBehavior="{x:Static RepeatBehavior.Forever}"/-->
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="EmblemGrid" Storyboard.TargetProperty="RenderTransform.ScaleY" Duration="0:0:4" AutoReverse="True" RepeatBehavior="{x:Static RepeatBehavior.Forever}">
                                            <EasingDoubleKeyFrame KeyTime="0:0:1.75" Value="1" EasingFunction="{StaticResource EmblemEase}"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0" EasingFunction="{StaticResource EmblemEase}"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:2.25" Value="1" EasingFunction="{StaticResource EmblemEase}"/>
                                        </DoubleAnimationUsingKeyFrames>

                                        <DoubleAnimation Storyboard.TargetName="EmblemOuterEllipse" Storyboard.TargetProperty="StrokeThickness" To="1" Duration="0:0:1" EasingFunction="{StaticResource EmblemEase}" AutoReverse="True" RepeatBehavior="{x:Static RepeatBehavior.Forever}"/>
                                        <ThicknessAnimation Storyboard.TargetName="EmblemOuterEllipse" Storyboard.TargetProperty="Margin" To="3" Duration="0:0:1" EasingFunction="{StaticResource EmblemEase}" AutoReverse="True" RepeatBehavior="{x:Static RepeatBehavior.Forever}"/>

                                        <DoubleAnimation Storyboard.TargetName="EmblemInnerEllipse" Storyboard.TargetProperty="StrokeThickness" To="4" Duration="0:0:1" EasingFunction="{StaticResource EmblemEase}" AutoReverse="True" RepeatBehavior="{x:Static RepeatBehavior.Forever}"/>
                                        <ThicknessAnimation Storyboard.TargetName="EmblemInnerEllipse" Storyboard.TargetProperty="Margin" To="0" Duration="0:0:1" EasingFunction="{StaticResource EmblemEase}" AutoReverse="True" RepeatBehavior="{x:Static RepeatBehavior.Forever}"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <!--ThicknessAnimation Storyboard.TargetName="EmblemGrid" Storyboard.TargetProperty="Margin" To="9" Duration="0:0:2" EasingFunction="{StaticResource AnimationEase}"/>
                                        <DoubleAnimation Storyboard.TargetName="EmblemGrid" Storyboard.TargetProperty="Width" To="22" Duration="0:0:2" EasingFunction="{StaticResource AnimationEase}"/-->
                                        <DoubleAnimation Storyboard.TargetName="EmblemGrid" Storyboard.TargetProperty="RenderTransform.ScaleY" To="1" Duration="0:0:1" EasingFunction="{StaticResource AnimationEase}"/>

                                        <DoubleAnimation Storyboard.TargetName="EmblemOuterEllipse" Storyboard.TargetProperty="StrokeThickness" To="4" Duration="0:0:1" EasingFunction="{StaticResource AnimationEase}"/>
                                        <ThicknessAnimation Storyboard.TargetName="EmblemOuterEllipse" Storyboard.TargetProperty="Margin" To="0" Duration="0:0:1" EasingFunction="{StaticResource AnimationEase}"/>

                                        <DoubleAnimation Storyboard.TargetName="EmblemInnerEllipse" Storyboard.TargetProperty="StrokeThickness" To="2" Duration="0:0:1" EasingFunction="{StaticResource AnimationEase}"/>
                                        <ThicknessAnimation Storyboard.TargetName="EmblemInnerEllipse" Storyboard.TargetProperty="Margin" To="2" Duration="0:0:1" EasingFunction="{StaticResource AnimationEase}"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                            <Setter Property="Background" Value="#FF4C4C4C"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsFocused, RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="True"/>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" Value="#FFF3F3F3"/>
                            <Setter Property="Foreground" Value="Black"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TaskViewToggleButtonStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource SearchTaskViewBaseToggleButtonStyle}">
        <Setter Property="Content">
            <Setter.Value>
                <Control>
                    <Control.Style>
                        <Style TargetType="{x:Type Control}">
                            <Setter Property="Width" Value="24"/>
                            <Setter Property="Height" Value="14"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type Control}">
                                        <Grid ClipToBounds="True">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="5"/>
                                                <ColumnDefinition Width="14"/>
                                                <ColumnDefinition Width="5"/>
                                            </Grid.ColumnDefinitions>
                                            <Grid ClipToBounds="True" Grid.Column="0">
                                                <Rectangle x:Name="LeftRectangle" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ToggleButton}}}" StrokeThickness="2" Margin="0,2" ClipToBounds="True">
                                                    <Rectangle.RenderTransform>
                                                        <TranslateTransform X="2" Y="0"/>
                                                    </Rectangle.RenderTransform>
                                                </Rectangle>
                                            </Grid>
                                            <Rectangle Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ToggleButton}}}" StrokeThickness="2" Margin="1,0" ClipToBounds="True" Grid.Column="1"/>
                                            <Grid ClipToBounds="True" Grid.Column="2">
                                                <Rectangle x:Name="RightRectangle" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ToggleButton}}}" StrokeThickness="2" Margin="0,2" ClipToBounds="True">
                                                    <Rectangle.RenderTransform>
                                                        <TranslateTransform X="-2" Y="0"/>
                                                    </Rectangle.RenderTransform>
                                                </Rectangle>
                                            </Grid>
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ToggleButton}}}" Value="True">
                                                <DataTrigger.EnterActions>
                                                    <BeginStoryboard>
                                                        <Storyboard>
                                                            <DoubleAnimation Storyboard.TargetName="LeftRectangle" Storyboard.TargetProperty="RenderTransform.X" To="0" Duration="0:0:0.125">
                                                                <DoubleAnimation.EasingFunction>
                                                                    <CircleEase EasingMode="EaseOut"/>
                                                                </DoubleAnimation.EasingFunction>
                                                            </DoubleAnimation>
                                                            <DoubleAnimation Storyboard.TargetName="RightRectangle" Storyboard.TargetProperty="RenderTransform.X" To="0" Duration="0:0:0.125">
                                                                <DoubleAnimation.EasingFunction>
                                                                    <CircleEase EasingMode="EaseOut"/>
                                                                </DoubleAnimation.EasingFunction>
                                                            </DoubleAnimation>
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </DataTrigger.EnterActions>
                                                <DataTrigger.ExitActions>
                                                    <BeginStoryboard>
                                                        <Storyboard>
                                                            <DoubleAnimation Storyboard.TargetName="LeftRectangle" Storyboard.TargetProperty="RenderTransform.X" To="2" Duration="0:0:0.125">
                                                                <DoubleAnimation.EasingFunction>
                                                                    <CircleEase EasingMode="EaseOut"/>
                                                                </DoubleAnimation.EasingFunction>
                                                            </DoubleAnimation>
                                                            <DoubleAnimation Storyboard.TargetName="RightRectangle" Storyboard.TargetProperty="RenderTransform.X" To="-2" Duration="0:0:0.125">
                                                                <DoubleAnimation.EasingFunction>
                                                                    <CircleEase EasingMode="EaseOut"/>
                                                                </DoubleAnimation.EasingFunction>
                                                            </DoubleAnimation>
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </DataTrigger.ExitActions>
                                            </DataTrigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Control.Style>
                </Control>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ActionCenterToggleButtonStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource SearchTaskViewBaseToggleButtonStyle}">
        <Setter Property="Width" Value="40"/>
        <Setter Property="Margin" Value="2,0"/>
        <Setter Property="Content">
            <Setter.Value>
                <!--Path Data="M 0 0 L 16 0 L 16 12 L 10 12 L 8 14 L 6 12 L 0 12 Z" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ToggleButton}}}" StrokeThickness="1"/-->
                <Grid Width="16" Height="16">
                    <Border BorderBrush="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ToggleButton}}}" BorderThickness="2,2,2,0" Margin="0,0,0,3"/>
                    <Path Data="M 0 0 L 6 0 L 8 2 L 10 0 L 16 0" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ToggleButton}}}" StrokeThickness="2" VerticalAlignment="Bottom"/>
                </Grid>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=UseSmallIcons, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="True">
                <Setter Property="Width" Value="30"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type ToolBarTray}" TargetType="{x:Type ToolBarTray}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="IsLocked" Value="{Binding IsLocked,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type local:MainWindow}}}"/>
    </Style>

    <Style x:Key="{x:Type local:SizableToolBar}" TargetType="{x:Type local:SizableToolBar}">
        <Style.Resources>
            <!--Style TargetType="{x:Type ListView}">
                <Style.Resources>
                    <Style TargetType="{x:Type ListViewItem}">
                        <Setter Property="OverridesDefaultStyle" Value="True"/>
                        <Setter Property="HorizontalAlignment" Value="Left"/>
                        <Setter Property="VerticalAlignment" Value="Top"/>
                        <Setter Property="Width" Value="{Binding Height, RelativeSource={RelativeSource Mode=Self}}"/>
                        <Setter Property="Height" Value="30"/>
                        <!-Setter Property="Height" Value="{Binding ResizeIntervalDistance, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}"/->
                        <Setter Property="HorizontalContentAlignment" Value="Center"/>
                        <Setter Property="VerticalContentAlignment" Value="Center"/>
                        <Setter Property="BorderBrush" Value="Transparent"/>
                        <Setter Property="BorderThickness" Value="0"/>
                        <Setter Property="Padding" Value="0,3,0,2"/>
                        <Setter Property="Margin" Value="0"/>
                        <Setter Property="Foreground" Value="White"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ListViewItem}">
                                    <Grid Background="#01000000">
                                        <Border x:Name="HoverBackground" Background="#30FFFFFF" Visibility="Collapsed"/>
                                        <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                            <ContentPresenter x:Name="PART_ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="4,0" Visibility="Hidden" />
                                            <GridViewRowPresenter x:Name="PART_GridViewRowPesenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="4,0" Visibility="Visible" />
                                        </Grid>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="GridView.ColumnCollection" Value="{x:Null}">
                                            <Setter TargetName="PART_ContentPresenter" Property="Visibility" Value="Visible"/>
                                            <Setter TargetName="PART_GridViewRowPesenter" Property="Visibility" Value="Hidden"/>
                                        </Trigger>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter TargetName="HoverBackground" Property="Visibility" Value="Visible"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Path=DockMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:AppBarWindow}}}" Value="Left">
                                <Setter Property="Padding" Value="2,0,3,0"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Style.Resources>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListView}">
                            <WrapPanel x:Name="ItemsHostWrapPanel" IsItemsHost="True" Width="{Binding Path=ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ScrollViewer}}}" VerticalAlignment="Stretch" Orientation="Horizontal" Margin="0,-1,0,-3"/>
                            <ControlTemplate.Triggers>
                                <DataTrigger Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:AppBarWindow}}}" Value="Vertical">
                                    <Setter TargetName="ItemsHostWrapPanel" Property="Orientation" Value="vertical"/>
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="ItemTemplate">
                    <Setter.Value>
                        <DataTemplate DataType="{x:Type disk:DiskItem}">
                            <Rectangle Width="16" Height="16" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{Binding ItemSmallIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='16'}" IsHitTestVisible="False">
                                <Rectangle.ToolTip>
                                    <TextBlock Text="{Binding ItemDisplayName}"/>
                                </Rectangle.ToolTip>
                            </Rectangle>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </Style-->

            <Style x:Key="ToolBarThumbStyle" TargetType="{x:Type Thumb}">
                <Setter Property="Width" Value="8" />
                <Setter Property="VerticalAlignment" Value="Stretch"/>
                <Setter Property="Cursor" Value="SizeAll" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Thumb}">
                            <UniformGrid Rows="1" Background="#01000000" SnapsToDevicePixels="True">
                                <!--Separator HorizontalAlignment="Left"/>
                                <Separator HorizontalAlignment="Right"/-->
                                <Rectangle HorizontalAlignment="Center" VerticalAlignment="Stretch" Width="1" Margin="0,2" Fill="#60FFFFFF"/>
                                <Rectangle HorizontalAlignment="Center" VerticalAlignment="Stretch" Width="1" Margin="0,2" Fill="#60FFFFFF"/>
                            </UniformGrid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ToolBarOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
                <Setter Property="OverridesDefaultStyle" Value="true" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border x:Name="Border" CornerRadius="0" SnapsToDevicePixels="true">
                                <Border.Background>
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="#00000000" Offset="0" />
                                        <GradientStop Offset="1" />
                                    </LinearGradientBrush>
                                </Border.Background>
                                <Grid>
                                    <Path x:Name="Arrow" Fill="Black" VerticalAlignment="Bottom" Margin="2,3" Data="M -0.5 3 L 5.5 3 L 2.5 6 Z" />
                                    <ContentPresenter />
                                </Grid>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.Resources>
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:SizableToolBar}">
                    <Grid>
                        <DockPanel>
                            <ToggleButton x:Name="OverflowToggleButton" DockPanel.Dock="Right" IsEnabled="{TemplateBinding HasOverflowItems}" Style="{DynamicResource ToolBarOverflowButtonStyle}" ClickMode="Press" IsChecked="{Binding IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                                <Popup x:Name="OverflowPopup" AllowsTransparency="true" Placement="Bottom" StaysOpen="false" Focusable="false" PopupAnimation="Slide" IsOpen="{Binding IsOverflowOpen,  RelativeSource={RelativeSource TemplatedParent}}">
                                    <Border x:Name="DropDownBorder" BorderThickness="1">
                                        <ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel" Margin="2" WrapWidth="200" Focusable="true" FocusVisualStyle="{x:Null}" KeyboardNavigation.TabNavigation="Cycle" KeyboardNavigation.DirectionalNavigation="Cycle" />
                                    </Border>
                                </Popup>
                            </ToggleButton>
                            <Thumb x:Name="ToolBarThumb" Style="{DynamicResource ToolBarThumbStyle}" DockPanel.Dock="Left"/>
                            <Thumb x:Name="PART_ResizeThumb" Style="{DynamicResource ToolBarThumbStyle}" DockPanel.Dock="Right"/>
                            <ToolBarPanel x:Name="PART_ToolBarPanel" Background="{TemplateBinding Background}" IsItemsHost="true" Margin="0,1,2,2" Orientation="Horizontal"/>
                        </DockPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsOverflowOpen" Value="True">
                            <Setter TargetName="ToolBarThumb" Property="IsEnabled" Value="False" />
                        </Trigger>
                        <Trigger Property="ToolBarTray.IsLocked" Value="True">
                            <Setter TargetName="ToolBarThumb" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasOverflowItems" Value="False">
                            <Setter TargetName="OverflowToggleButton" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type disk:DiskItem}">
                    <Button x:Name="RootButton">
                        <Button.Style>
                            <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                                <Setter Property="OverridesDefaultStyle" Value="True"/>
                                <Setter Property="HorizontalAlignment" Value="Left"/>
                                <Setter Property="VerticalAlignment" Value="Top"/>
                                <Setter Property="Width" Value="{Binding Height, RelativeSource={RelativeSource Mode=Self}}"/>
                                <Setter Property="Height" Value="30"/>
                                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                <Setter Property="VerticalContentAlignment" Value="Center"/>
                                <Setter Property="BorderBrush" Value="Transparent"/>
                                <Setter Property="BorderThickness" Value="0"/>
                                <Setter Property="Padding" Value="0"/>
                                <Setter Property="Foreground" Value="{DynamicResource TitlebarIdleForegroundBrush}"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type Button}">
                                            <Grid Background="#01000000">
                                                <Border x:Name="HoverBackground" BorderThickness="0" BorderBrush="Transparent" Margin="0" IsHitTestVisible="False" Background="{DynamicResource HoverHighlightBrush}" RenderTransformOrigin="0.5,1">
                                                    <Border.RenderTransform>
                                                        <ScaleTransform ScaleX="1" ScaleY="0"/>
                                                    </Border.RenderTransform>
                                                    <Border.OpacityMask>
                                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                            <GradientStop Offset="0" Color="Transparent"/>
                                                            <GradientStop Offset="1" Color="#7F000000"/>
                                                        </LinearGradientBrush>
                                                    </Border.OpacityMask>
                                                    <Border.Effect>
                                                        <BlurEffect Radius="5"/>
                                                    </Border.Effect>
                                                </Border>
                                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" Focusable="False"/>
                                            </Grid>
                                            <ControlTemplate.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Trigger.EnterActions>
                                                        <BeginStoryboard>
                                                            <Storyboard>
                                                                <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="RenderTransform.ScaleY" To="1" Duration="0:0:0.0625"/>
                                                            </Storyboard>
                                                        </BeginStoryboard>
                                                    </Trigger.EnterActions>
                                                    <Trigger.ExitActions>
                                                        <BeginStoryboard>
                                                            <Storyboard>
                                                                <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="RenderTransform.ScaleY" To="0" Duration="0:0:0.0625"/>
                                                            </Storyboard>
                                                        </BeginStoryboard>
                                                    </Trigger.ExitActions>
                                                </Trigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </Button.Style>
                        <e:Interaction.Behaviors>
                            <local:ToolBarClickBehavior TargetButton="{Binding ElementName=RootButton}" DiskFile="{Binding}"/>
                            <!--RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Button}}-->
                        </e:Interaction.Behaviors>
                        <DockPanel>
                            <DockPanel.ToolTip>
                                <TextBlock Text="{Binding ItemDisplayName}"/>
                            </DockPanel.ToolTip>
                            <Rectangle Width="16" Height="16" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{Binding ItemSmallIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='16'}" IsHitTestVisible="False" DockPanel.Dock="Left"/>
                            <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" Text="{Binding ItemDisplayName}" Foreground="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type Button}}}" Visibility="Collapsed"/>
                        </DockPanel>
                    </Button>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <!--Setter Property="ItemContainerStyle">
            <Setter.Value>
                
            </Setter.Value>
        </Setter-->
    </Style>

    <!--#endregion Start/QuickLaunch Styles-->


    <!--#region Tray Styles-->

    <Style x:Key="ShowTrayFlyoutButtonStyle" TargetType="ToggleButton" BasedOn="{StaticResource SearchTaskViewBaseToggleButtonStyle}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Width" Value="27"/>
        <Setter Property="Height" Value="27"/>
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Effect" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Background="{TemplateBinding Background}">
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" VerticalAlignment="Stretch" UseLayoutRounding="True" SnapsToDevicePixels="True">
                            <Rectangle Width="1" Fill="{DynamicResource TitlebarBorderBrush}" Margin="0,1,0,0"/>
                            <Rectangle Width="1" Fill="{DynamicResource WindowBorderBrush}"/>
                            <Rectangle Width="1" Fill="{DynamicResource TitlebarBorderBrush}" Margin="0,1,0,0"/>
                        </StackPanel>
                        <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" Effect="{DynamicResource DropShadow}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="Horizontal">
                            <Setter Property="VerticalAlignment" Value="Stretch"/>
                            <Setter Property="Padding" Value="3,0,0,0"/>
                            <Setter Property="Height" Value="Auto"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="Vertical">
                            <Setter Property="HorizontalAlignment" Value="Stretch"/>
                            <Setter Property="Width" Value="Auto"/>
                        </DataTrigger>
                        
                        <Trigger Property="IsEnabled" Value="False">
                            <!--Setter Property="Foreground" Value="{DynamicResource TitlebarDisabledForegroundBrush}" /-->
                            <Setter Property="Opacity" Value="0.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource TitlebarHoverForegroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource TitlebarPressedForegroundBrush}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource TitlebarPressedForegroundBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Content">
            <Setter.Value>
                <Path HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 6 L 6 0 L 12 6" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ToggleButton}}}" StrokeThickness="2"/>
            </Setter.Value>
        </Setter>
        <!--Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid Background="#01000000">
                        <Border x:Name="HoverBackground" Background="#30FFFFFF" Visibility="Collapsed"/>
                        <Grid x:Name="PressedBackground" Background="#60FFFFFF" Visibility="Collapsed"/>
                        <Path HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 6 L 6 0 L 12 6" Stroke="White" StrokeThickness="2"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="HoverBackground" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="PressedBackground" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="Horizontal">
                            <Setter Property="VerticalAlignment" Value="Stretch"/>
                            <Setter Property="Height" Value="Auto"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="Vertical">
                            <Setter Property="HorizontalAlignment" Value="Stretch"/>
                            <Setter Property="Width" Value="Auto"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter-->
    </Style>

    <Style x:Key="ShowTrayFlyoutIcon" TargetType="Control">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Background" Value="Black"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Control">
                    <StackPanel Orientation="Vertical">
                        <Path Width="6" Height="4" Data="M 1 3 L 3 0 L 5 3 L 3 0 L 1 3 Z" Stroke="{TemplateBinding Foreground}" StrokeThickness="1"/>
                        <Path Width="6" Height="4" Data="M 1 3 L 3 0 L 5 3 L 3 0 L 1 3 Z" Stroke="{TemplateBinding Foreground}" StrokeThickness="1"/>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TrayItemListViewItemStyle" TargetType="{x:Type ListViewItem}">
        <Setter Property="Padding" Value="0"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Grid Background="#01000000">
                        <Grid x:Name="ContentGrid" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" UseLayoutRounding="True">
                            <Grid.Effect>
                                <DropShadowEffect Color="Black" Direction="315" BlurRadius="3" ShadowDepth="2" Opacity="0.375"/>
                            </Grid.Effect>
                            <ContentPresenter x:Name="PART_ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" Visibility="Collapsed" />
                            <GridViewRowPresenter x:Name="PART_GridViewRowPesenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" Visibility="Visible" />
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="GridView.ColumnCollection" Value="{x:Null}">
                            <Setter TargetName="PART_ContentPresenter" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="PART_GridViewRowPesenter" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <!--Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverOuterBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverOuterBorder" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SystemTrayBaseListViewStyle" TargetType="{x:Type ListView}">
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type tray:SystemTrayItem}">
                    <Grid Background="#01000000">
                        <Grid.ToolTip>
                            <ToolTip Content="{Binding ToolTipText}"/>
                        </Grid.ToolTip>
                        <Rectangle x:Name="IconRectangle" Width="16" Height="16" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="Red"/>
                        <!--{Binding ItemIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='16'}-->
                    </Grid>
                    <DataTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="IconRectangle" Property="IsVisible" Value="False"/>
                                <Condition SourceName="IconRectangle" Property="IsVisible" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="IconRectangle" Property="Fill" Value="{Binding ItemIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='16'}"/>
                        </MultiTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource TrayItemListViewItemStyle}">
                    <Setter Property="Width" Value="24"/>
                    <Setter Property="Height" Value="{Binding ResizeIntervalDistance, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}"/>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <WrapPanel x:Name="RootWrapPanel" Orientation="{Binding Path=Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:AppBarWindow}}, FallbackValue=Horizontal}" IsItemsHost="True"/>
                    <ControlTemplate.Triggers>
                        <!--DataTrigger Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:AppBarWindow}}}" Value="Vertical">
                            <Setter TargetName="RootWrapPanel" Property="Orientation" Value="Vertical"/>
                        </DataTrigger-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SystemTrayListViewStyle" TargetType="{x:Type ListView}" BasedOn="{StaticResource SystemTrayBaseListViewStyle}"/>

    <Style x:Key="ExpandedSystemTrayListViewStyle" TargetType="{x:Type ListView}" BasedOn="{StaticResource SystemTrayBaseListViewStyle}">
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource TrayItemListViewItemStyle}">
                    <Setter Property="Width" Value="32"/>
                    <Setter Property="Height" Value="32"/>
                </Style>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Items.Count, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource DoubleComparisonConverter}, ConverterParameter='le25'}" Value="True">
                <Setter Property="Width" Value="160"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Items.Count, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource DoubleComparisonConverter}, ConverterParameter='le16'}" Value="True">
                <Setter Property="Width" Value="128"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Items.Count, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource DoubleComparisonConverter}, ConverterParameter='le9'}" Value="True">
                <Setter Property="Width" Value="96"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Items.Count, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource DoubleComparisonConverter}, ConverterParameter='le4'}" Value="True">
                <Setter Property="Width" Value="64"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Items.Count, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource DoubleComparisonConverter}, ConverterParameter='le1'}" Value="True">
                <Setter Property="Width" Value="32"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ClockStyle" TargetType="TextBlock">
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType=ToggleButton}}"/>
        <Setter Property="Margin" Value="0,2"/>
        <Setter Property="Effect" Value="{DynamicResource DropShadow}"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
    </Style>

    <Style x:Key="ClockToggleButtonStyle" TargetType="ToggleButton">
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Margin" Value="5,0"/>
        <Setter Property="Padding" Value="5,0"/>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="{DynamicResource TitlebarIdleForegroundBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Background="#01000000">
                        <Border x:Name="HoverBackground" BorderThickness="0" BorderBrush="Transparent" Margin="0" IsHitTestVisible="False" Background="{DynamicResource HoverHighlightBrush}" RenderTransformOrigin="0.5,1">
                            <Border.RenderTransform>
                                <ScaleTransform ScaleX="1" ScaleY="0"/>
                            </Border.RenderTransform>
                            <Border.OpacityMask>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                    <GradientStop Offset="0" Color="Transparent"/>
                                    <GradientStop Offset="1" Color="#7F000000"/>
                                </LinearGradientBrush>
                            </Border.OpacityMask>
                            <Border.Effect>
                                <BlurEffect Radius="5"/>
                            </Border.Effect>
                        </Border>
                        <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="RenderTransform.ScaleY" To="1" Duration="0:0:0.0625"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="RenderTransform.ScaleY" To="0" Duration="0:0:0.0625"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <!--MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="#30FFFFFF"/>
                        </MultiTrigger-->
                        <!--Trigger Property="IsPressed" Value="True">
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" Value="#60FFFFFF"/>
                        </Trigger-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ShowDesktopButtonStyle" TargetType="Button">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Width" Value="6"/>
        <Setter Property="ToolTip">
            <Setter.Value>
                <ToolTip IsHitTestVisible="False" Opacity="0"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid Background="#01000000">
                        <!--Border x:Name="HoverBackground" Background="#60FFFFFF" Visibility="Collapsed"/>
                        <Border BorderBrush="#60FFFFFF" BorderThickness="1,0,0,0"/-->
                        <!--Border x:Name="IdleBackground" CornerRadius="0" Margin="0" Padding="0" BorderBrush="{DynamicResource ButtonIdleBorderBrush}" BorderThickness="1,0,0,0">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonIdleBackgroundGradientStops}"/>
                            </Border.Background>
                            <Border x:Name="IdleInnerBackground" CornerRadius="0" Margin="1" Padding="0" Background="{TemplateBinding Background}" BorderBrush="Transparent" BorderThickness="0"/>
                        </Border-->
                        <Grid Margin="3,2,0,0">
                            <Border x:Name="HoverBackground" Opacity="0">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonHoverSecondaryBackgroundGradientStops}"/>
                                </Border.Background>
                            </Border>
                            <Border x:Name="PressedBackground" Opacity="0">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ButtonPressedSecondaryBackgroundGradientStops}"/>
                                </Border.Background>
                            </Border>
                        </Grid>
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" VerticalAlignment="Stretch">
                            <Rectangle Width="1" Fill="{DynamicResource TitlebarBorderBrush}" Margin="0,1,0,0"/>
                            <Rectangle Width="1" Fill="{DynamicResource WindowBorderBrush}"/>
                            <Rectangle Width="1" Fill="{DynamicResource TitlebarBorderBrush}" Margin="0,1,0,0"/>
                        </StackPanel>
                        <ContentControl Content="{TemplateBinding Content}" VerticalAlignment="Center" FontWeight="Bold" FontSize="11"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--DataTrigger Binding="{Binding Path=DockMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:AppBarWindow}}}" Value="Bottom">
                            <Setter Property="Margin" Value="0,2,0,0"/>
                        </DataTrigger-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="PressedBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="PressedBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion Tray Styles-->

    <Style x:Key="{x:Type local:SettingsWindow}" TargetType="{x:Type local:SettingsWindow}" BasedOn="{StaticResource {x:Type win:DecoratableWindow}}">
        <Setter Property="Height" Value="600"/>
        <Setter Property="Width" Value="500"/>
        <Setter Property="BorderThickness" Value="0,58,0,0"/>
        <Style.Resources>
            <Style TargetType="{x:Type TabControl}" BasedOn="{StaticResource LineTabControlStyle}"/>
            <!--Setter Property="Margin" Value="0,-25,0,0"/>
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/-->

            <Style x:Key="{x:Type ui:ToggleSwitch}" TargetType="{x:Type ui:ToggleSwitch}" BasedOn="{StaticResource {x:Type ui:ToggleSwitch}}">
                <Setter Property="Margin" Value="0,5"/>
            </Style>

            <Style x:Key="OptionSideLabelTextBlockStyle" TargetType="{x:Type TextBlock}">
                <Setter Property="VerticalAlignment" Value="Center"/>
                <Setter Property="Width" Value="160"/>
            </Style>

            <Style x:Key="OptionButtonsRowPanelStyle" TargetType="{x:Type Panel}">
                <Setter Property="Margin" Value="1,5,1,6"/>
            </Style>

            <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}">
                <Setter Property="Margin" Value="0,0,-1,-1"/>
            </Style>

            <Style TargetType="{x:Type GroupBox}" BasedOn="{StaticResource {x:Type GroupBox}}">
                <Setter Property="HorizontalAlignment" Value="Stretch"/>
            </Style>

            <Style x:Key="FooterContentControlStyle" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource {x:Type ContentControl}}">
                <Style.Resources>
                    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                        <!--Setter Property="Height" Value="21"/>
                        <Setter Property="VerticalAlignment" Value="Stretch"/-->
                        <Setter Property="Margin" Value="0,0,5,0"/>
                        <Setter Property="UseLayoutRounding" Value="True"/>
                    </Style>
                </Style.Resources>
                <Setter Property="Height" Value="40"/>
                <Setter Property="Padding" Value="5,5,0,5"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ContentControl}">
                            <Border Style="{DynamicResource HorizontalBarBorderStyle}" BorderThickness="0,1,0,0" CornerRadius="0,0,2,2">
                                <ContentPresenter Content="{TemplateBinding Content}" Margin="{TemplateBinding Padding}"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.Resources>
    </Style>
</ResourceDictionary>