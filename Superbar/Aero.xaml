<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:Superbar"
                    xmlns:ui="clr-namespace:Start9.UI.Wpf;assembly=Start9.UI.Wpf"
                    xmlns:win="clr-namespace:Start9.UI.Wpf.Windows;assembly=Start9.UI.Wpf"
                    xmlns:window="clr-namespace:WindowsSharp.Processes;assembly=WindowsSharp"
                    xmlns:disk="clr-namespace:WindowsSharp.DiskItems;assembly=WindowsSharp"
                    xmlns:conv="clr-namespace:Start9.UI.Wpf.Converters;assembly=Start9.UI.Wpf"
                    xmlns:e="http://schemas.microsoft.com/expression/2010/interactivity"
                    xmlns:themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Classic">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/PresentationFramework.Aero;component/themes/Aero.NormalColor.xaml" />
        <ResourceDictionary Source="pack://application:,,,/Start9.UI.Wpf;component/Themes/Aero.NormalColor.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <!--#region Resources-->

    <CircleEase x:Key="ThumbnailsWindowMovementEase" EasingMode="EaseOut"/>

    <!--#endregion Resources-->

    <!--#region Converters-->

    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    <conv:IconToImageBrushConverter x:Key="IconToImageBrushConverter"/>
    <conv:ListViewItemIndexToBoolConverter x:Key="ListViewItemIndexToBoolConverter"/>

    <!--#endregion Converters-->


    <!--#region Window Styles-->

    <Style x:Key="TaskbarWindowStyle" TargetType="{x:Type local:MainWindow}">
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="ResizeIntervalDistance" Value="42"/>
        <Setter Property="CompositionState" Value="Glass"/>
        <!--Setter Property="Opacity" Value="0"/-->
        <Setter Property="DragIndicatorStyle">
            <Setter.Value>
                <Style TargetType="{x:Type win:ShadowedWindow}">
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="CompositionState" Value="Glass"/>
                    <Setter Property="ShadowOffsetThickness" Value="12,12,20,20"/>
                    <Setter Property="ShadowStyle">
                        <Setter.Value>
                            <Style TargetType="Window">
                                <Setter Property="WindowStyle" Value="None"/>
                                <Setter Property="ResizeMode" Value="NoResize"/>
                                <Setter Property="AllowsTransparency" Value="True"/>
                                <Setter Property="Visibility" Value="Visible"/>
                                <Setter Property="RenderTransformOrigin" Value="0.5,0.5"/>
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="Window">
                                            <Rectangle>
                                                <Rectangle.OpacityMask>
                                                    <VisualBrush>
                                                        <VisualBrush.Visual>
                                                            <Border Width="{TemplateBinding ActualWidth}" Height="{TemplateBinding ActualHeight}" Background="Transparent" BorderBrush="Black" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="12,16,20,16">
                                                                <Border VerticalAlignment="Bottom" BorderBrush="Black" BorderThickness="4" Margin="-4,-4,-4,0" CornerRadius="0,0,6,6"/>
                                                            </Border>
                                                        </VisualBrush.Visual>
                                                    </VisualBrush>
                                                </Rectangle.OpacityMask>
                                                <Rectangle.Fill>
                                                    <VisualBrush>
                                                        <VisualBrush.Visual>
                                                            <Grid Width="{TemplateBinding ActualWidth}" Height="{TemplateBinding ActualHeight}" Background="#01000000">
                                                                <Border Margin="18,18,14,14" Background="#C0000000">
                                                                    <Border.Effect>
                                                                        <BlurEffect Radius="14"/>
                                                                    </Border.Effect>
                                                                </Border>
                                                            </Grid>
                                                        </VisualBrush.Visual>
                                                    </VisualBrush>
                                                </Rectangle.Fill>
                                            </Rectangle>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type win:ShadowedWindow}">
                                <Grid>
                                    <Rectangle x:Name="SizingAidRectangle" Fill="#01000000"/>
                                    <Grid>
                                        <Border x:Name="RootBorder" BorderBrush="Black" BorderThickness="1" CornerRadius="6">
                                            <Border.Background>
                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                    <LinearGradientBrush.GradientStops>
                                                        <GradientStop Offset="0" Color="#D74F4F4F"/>
                                                        <GradientStop Offset="0.375" Color="#C7292929"/>
                                                        <GradientStop Offset="1" Color="#B7000000"/>
                                                    </LinearGradientBrush.GradientStops>
                                                </LinearGradientBrush>
                                            </Border.Background>
                                            <Border BorderBrush="#40FFFFFF" BorderThickness="1" CornerRadius="5">
                                                <ContentPresenter Content="{TemplateBinding Content}" Margin="3"/>
                                            </Border>
                                        </Border>
                                    </Grid>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsGlassAvailable" Value="False">
                                        <Setter Property="CompositionState" Value="Alpha"/>
                                        <Setter TargetName="RootBorder" Property="Background">
                                            <Setter.Value>
                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                    <LinearGradientBrush.GradientStops>
                                                        <GradientStop Offset="0" Color="#FF5C5C5C"/>
                                                        <GradientStop Offset="0.375" Color="#FF353535"/>
                                                        <GradientStop Offset="1" Color="Black"/>
                                                    </LinearGradientBrush.GradientStops>
                                                </LinearGradientBrush>
                                            </Setter.Value>
                                        </Setter>
                                        <!--Setter TargetName="ShineRectangle" Property="Fill">
                                            <Setter.Value>
                                                <LinearGradientBrush StartPoint="75,0" EndPoint="125,175" MappingMode="Absolute">
                                                    <GradientStop Offset="0.25" Color="Black"/>
                                                    <GradientStop Offset="0.251" Color="#40000000"/>
                                                </LinearGradientBrush>
                                            </Setter.Value>
                                        </Setter-->
                                        <Setter Property="ShadowStyle">
                                            <Setter.Value>
                                                <Style TargetType="{x:Type Window}">
                                                    <Setter Property="WindowStyle" Value="None"/>
                                                    <Setter Property="ResizeMode" Value="NoResize"/>
                                                    <Setter Property="AllowsTransparency" Value="True"/>
                                                    <Setter Property="Background" Value="Transparent"/>
                                                    <Setter Property="Visibility" Value="Collapsed"/>
                                                </Style>
                                            </Setter.Value>
                                        </Setter>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:MainWindow}">
                    <ControlTemplate.Resources>
                        <LinearGradientBrush x:Key="DarkRegionBrush" StartPoint="0,0" EndPoint="0,1">
                            <GradientStop Offset="0" Color="#AE1F1F1F"/>
                            <!--GradientStop Offset="0.5" Color="#BF181818"/-->
                            <GradientStop Offset="1" Color="#D0111111"/>
                        </LinearGradientBrush>

                        <Style x:Key="TaskbandSeparatorStyle" TargetType="{x:Type Separator}">
                            <Setter Property="Margin" Value="0,-2"/>
                            <Setter Property="VerticalAlignment" Value="Stretch"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type Separator}">
                                        <StackPanel Orientation="Horizontal">
                                            <Rectangle Width="1" Fill="Black"/>
                                            <Rectangle Width="1" Fill="#8FD2D2D2"/>
                                        </StackPanel>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>

                        <GradientStopCollection x:Key="ShineGradientStops">
                            <GradientStop Offset="0" Color="#B8FFFFFF"/>
                            <GradientStop Offset="1" Color="#1CFFFFFF"/>
                        </GradientStopCollection>
                        
                    </ControlTemplate.Resources>
                    <Border x:Name="RootBorder">
                        <Border.RenderTransform>
                            <TranslateTransform x:Name="RootTransform" X="0" Y="0"/>
                        </Border.RenderTransform>
                        <Grid x:Name="PART_DragMoveGrid" Background="#01000000">
                            <DockPanel LastChildFill="True">
                                <Grid x:Name="Ql" DockPanel.Dock="Left">
                                    <Rectangle Fill="{DynamicResource DarkRegionBrush}" Margin="{Binding Margin, ElementName=DarkRectangle}" IsHitTestVisible="False"/>
                                    <StackPanel x:Name="StartEdgeStackPanel" HorizontalAlignment="Left" Width="60" Orientation="Vertical" VerticalAlignment="{Binding VerticalAlignment, ElementName=EdgeStackPanel}" RenderTransformOrigin="{Binding RenderTransformOrigin, ElementName=EdgeStackPanel}" RenderTransform="{Binding RenderTransform, ElementName=EdgeStackPanel}" IsHitTestVisible="False">
                                        <Rectangle Fill="#C0000000" Height="1"/>
                                        <Rectangle Fill="#7FFFFFFF" Height="1"/>
                                    </StackPanel>
                                    <Rectangle HorizontalAlignment="Left" Width="60" Height="{Binding Height,ElementName=ShineRectangle}" VerticalAlignment="{Binding VerticalAlignment, ElementName=ShineRectangle}" Margin="0,1" IsHitTestVisible="False" Fill="{Binding Fill, ElementName=ShineRectangle}"/>
                                    <ContentControl Content="{TemplateBinding QuickLaunchArea}"/>
                                </Grid>
                                <Separator Style="{DynamicResource TaskbandSeparatorStyle}" DockPanel.Dock="Left"/>
                                <Grid x:Name="Tr" DockPanel.Dock="Right" Margin="0,0,15,0">
                                    <Rectangle x:Name="DarkRectangle" Fill="{DynamicResource DarkRegionBrush}" Margin="0,2,0,0" IsHitTestVisible="False"/>
                                    <Separator Style="{DynamicResource TaskbandSeparatorStyle}" HorizontalAlignment="Right" Margin="0,0,-2,0" IsHitTestVisible="False"/>
                                    <ContentControl Content="{TemplateBinding TrayArea}" Margin="0,0,-15,0"/>
                                    <Rectangle HorizontalAlignment="Right" Width="15" Height="{Binding Height,ElementName=ShineRectangle}" VerticalAlignment="{Binding VerticalAlignment, ElementName=ShineRectangle}" Margin="0,1,-15,1" IsHitTestVisible="False" Fill="{Binding Fill, ElementName=ShineRectangle}"/>
                                </Grid>
                                <Separator Style="{DynamicResource TaskbandSeparatorStyle}" DockPanel.Dock="Right"/>
                                <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                    <Rectangle Margin="0,2,0,0">
                                        <Rectangle.Fill>
                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                <GradientStop Offset="0" Color="#35F4F4F4"/>
                                                <!--GradientStop Offset="0.5" Color="#5FA1A1A1"/-->
                                                <GradientStop Offset="1" Color="#894E4E4E"/>
                                            </LinearGradientBrush>
                                        </Rectangle.Fill>
                                    </Rectangle>
                                    <Rectangle x:Name="ShineRectangle" HorizontalAlignment="Stretch" Height="20" VerticalAlignment="Top" Margin="0,1" IsHitTestVisible="False">
                                        <Rectangle.Fill>
                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1" GradientStops="{DynamicResource ShineGradientStops}"/>
                                        </Rectangle.Fill>
                                    </Rectangle>
                                    <ContentControl Content="{TemplateBinding Content}"/>
                                </Grid>
                            </DockPanel>
                            <StackPanel x:Name="EdgeStackPanel" Margin="60,0,0,0" Orientation="Vertical" HorizontalAlignment="Stretch" VerticalAlignment="Top" RenderTransformOrigin="0.5,0.5">
                                <Rectangle Fill="#C0000000" Height="1"/>
                                <Rectangle Fill="#7FFFFFFF" Height="1"/>
                            </StackPanel>
                            <Thumb x:Name="PART_ResizeThumb" Background="White" Cursor="SizeNS" Opacity="0.01" IsHitTestVisible="True"/>
                            <Rectangle HorizontalAlignment="Stretch" Height="{Binding Height,ElementName=ShineRectangle}" VerticalAlignment="{Binding VerticalAlignment, ElementName=ShineRectangle}" Margin="60,1,0,1" IsHitTestVisible="False" Fill="{Binding Fill, ElementName=ShineRectangle}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="DockMode" Value="Bottom">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="RootBorder" Storyboard.TargetProperty="RenderTransform.Y" From="100" To="0" Duration="0:0:0.5">
                                            <DoubleAnimation.EasingFunction>
                                                <CircleEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <!--DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.5"/-->
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                        </Trigger>
                        <!--Trigger Property="IsVisible" Value="True">
                            <Setter Property="Opacity" Value="1"/>
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.5"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                        </Trigger-->
                        <Trigger Property="IsLocked" Value="True">
                            <Setter TargetName="PART_ResizeThumb" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="DockMode" Value="Left">
                            <Setter Property="Margin" Value="-3,-3,0,-3"/>
                            <Setter TargetName="PART_ResizeThumb" Property="HorizontalAlignment" Value="Right"/>
                        </Trigger>
                        <Trigger Property="DockMode" Value="Right">
                            <Setter Property="Margin" Value="0,-3,-3,-3"/>
                            <Setter TargetName="PART_ResizeThumb" Property="HorizontalAlignment" Value="Left"/>
                        </Trigger>
                        <Trigger Property="DockMode" Value="Top">
                            <Setter Property="Margin" Value="-3,-3,-3,0"/>
                            <Setter TargetName="PART_ResizeThumb" Property="VerticalAlignment" Value="Bottom"/>
                            <Setter TargetName="DarkRectangle" Property="Margin" Value="0,0,0,2"/>
                            <Setter TargetName="ShineRectangle" Property="VerticalAlignment" Value="Bottom"/>
                            <Setter TargetName="ShineRectangle" Property="Fill">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0,1" EndPoint="0,0" GradientStops="{DynamicResource ShineGradientStops}"/>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="EdgeStackPanel" Property="VerticalAlignment" Value="Bottom"/>
                            <Setter TargetName="EdgeStackPanel" Property="RenderTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="180"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="DockMode" Value="Bottom">
                            <Setter TargetName="PART_ResizeThumb" Property="VerticalAlignment" Value="Top"/>
                        </Trigger>
                        <Trigger Property="Orientation" Value="Horizontal">
                            <Setter TargetName="PART_ResizeThumb" Property="Height" Value="5"/>
                        </Trigger>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter TargetName="PART_ResizeThumb" Property="Cursor" Value="SizeWE"/>
                            <Setter TargetName="Ql" Property="DockPanel.Dock" Value="Top"/>
                            <Setter TargetName="Tr" Property="DockPanel.Dock" Value="Bottom"/>
                            <Setter TargetName="PART_ResizeThumb" Property="Width" Value="5"/>
                            <Setter Property="MinWidth" Value="120"/>
                        </Trigger>
                        <Trigger Property="UseSmallIcons" Value="True">
                            <Setter TargetName="ShineRectangle" Property="Height" Value="15"/>
                        </Trigger>
                        <Trigger Property="IsGlassAvailable" Value="False">
                            <Setter Property="CompositionState" Value="Alpha"/>
                            <Setter TargetName="RootBorder" Property="Background" Value="Black"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="UseSmallIcons" Value="True">
                <Setter Property="ResizeIntervalDistance" Value="30"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--#endregion Window Styles-->


    <!--#region Taskband Styles-->

    <Style x:Key="TaskBandScrollViewerStyle" TargetType="{x:Type ScrollViewer}">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Background" Value="#01000000"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <DockPanel Background="#01000000" LastChildFill="True">
                        <Grid x:Name="ScrollBarsGrid" Background="Transparent" DockPanel.Dock="Right">
                            <ScrollBar x:Name="PART_VerticalScrollBar" Orientation="Vertical" Value="{TemplateBinding VerticalOffset}" Maximum="{TemplateBinding ScrollableHeight}" ViewportSize="{TemplateBinding ViewportHeight}" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"/>
                            <!--Grid.Column="1" Grid.Row="0"-->
                            <ScrollBar x:Name="PART_HorizontalScrollBar" Orientation="{Binding Path=Orientation, ElementName=PART_VerticalScrollBar}" Value="{TemplateBinding HorizontalOffset}" Maximum="{TemplateBinding ScrollableWidth}" ViewportSize="{TemplateBinding ViewportWidth}" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"/>
                            <!--Grid.Column="{Binding Path=(Grid.Column), ElementName=PART_VerticalScrollBar}" Grid.Row="{Binding Path=(Grid.Row), ElementName=PART_VerticalScrollBar}"-->
                        </Grid>
                        <ScrollContentPresenter x:Name="ContentPresenter" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                        <!--Grid.Column="0" Grid.Row="0"-->
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:AppBarWindow}}}" Value="Vertical">
                            <!--Setter TargetName="ContentPresenter" Property="Grid.Row" Value="1"/-->
                            <!--Setter TargetName="PART_VerticalScrollBar" Property="Grid.Column" Value="0"/>
                            <Setter TargetName="PART_VerticalScrollBar" Property="Grid.Row" Value="1"/-->
                            <Setter TargetName="PART_VerticalScrollBar" Property="Orientation" Value="Horizontal"/>
                            <Setter TargetName="ScrollBarsGrid" Property="DockPanel.Dock" Value="Bottom"/>
                            <Setter Property="VerticalAlignment" Value="Top"/>

                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:AppBarWindow}}}" Value="Horizontal">
                            <!--Setter Property="HorizontalAlignment" Value="Left"/-->
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TaskBandListViewStyle" TargetType="{x:Type ListView}">
        <Style.Resources>
            <Style TargetType="{x:Type ListViewItem}">
                <Setter Property="OverridesDefaultStyle" Value="True"/>
                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Width" Value="{Binding Tag, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ListView}}, Mode=OneWay}"/>
                <Setter Property="MaxWidth" Value="160"/>
                <Setter Property="Height" Value="{Binding ResizeIntervalDistance, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}"/>
                <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="Padding" Value="0"/>
                <Setter Property="Margin" Value="0"/>
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListViewItem}">
                            <Grid Background="#01000000">
                                <Grid x:Name="RootGrid" Margin="0,4,0,0">
                                    <Border x:Name="IdleOuterBorder" BorderBrush="Black" Background="#4D000000" BorderThickness="1,1,0,0" CornerRadius="0">
                                        <Border x:Name="IdleInnerBorder" BorderBrush="#40FFFFFF" BorderThickness="1,1,0,1" CornerRadius="0"/>
                                    </Border>
                                    <Border x:Name="PressedOuterBorder" BorderBrush="Transparent" Background="#B8000000" BorderThickness="{Binding BorderThickness, ElementName=IdleOuterBorder}" CornerRadius="{Binding CornerRadius, ElementName=IdleOuterBorder}" Opacity="0">
                                        <Border x:Name="PressedInnerBorder" BorderBrush="#F7030303" BorderThickness="{Binding BorderThickness, ElementName=IdleInnerBorder}" CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBorder}">
                                            <Grid>
                                                <Rectangle Width="5" HorizontalAlignment="Left">
                                                    <Rectangle.Fill>
                                                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                                            <GradientStop Offset="0" Color="#40000000"/>
                                                            <GradientStop Offset="1" Color="#00000000"/>
                                                        </LinearGradientBrush>
                                                    </Rectangle.Fill>
                                                </Rectangle>
                                                <Rectangle Width="5" HorizontalAlignment="Right">
                                                    <Rectangle.Fill>
                                                        <LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
                                                            <GradientStop Offset="0" Color="#40000000"/>
                                                            <GradientStop Offset="1" Color="#00000000"/>
                                                        </LinearGradientBrush>
                                                    </Rectangle.Fill>
                                                </Rectangle>
                                                <Rectangle Height="7" VerticalAlignment="Top">
                                                    <Rectangle.Fill>
                                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                            <GradientStop Offset="0" Color="#40000000"/>
                                                            <GradientStop Offset="1" Color="#00000000"/>
                                                        </LinearGradientBrush>
                                                    </Rectangle.Fill>
                                                </Rectangle>
                                            </Grid>
                                        </Border>
                                    </Border>
                                    <Grid x:Name="HoverBackground" Opacity="0" Margin="2,2,2,0">
                                        <Rectangle Height="20" VerticalAlignment="Bottom" Margin="0,0,0,1">
                                            <Rectangle.Fill>
                                                <RadialGradientBrush Center="0.5,1" GradientOrigin="0.5,1">
                                                    <GradientStop Offset="0" Color="White"/>
                                                    <GradientStop Offset="0.25" Color="#7F99D9DF"/>
                                                    <GradientStop Offset="1" Color="#0099D9DF"/>
                                                </RadialGradientBrush>
                                            </Rectangle.Fill>
                                        </Rectangle>
                                        <Rectangle Height="1" VerticalAlignment="Bottom" Margin="5,0">
                                            <Rectangle.Fill>
                                                <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                                    <GradientStop Offset="0" Color="#0099D9DF"/>
                                                    <GradientStop Offset="0.375" Color="#EC99D9DF"/>
                                                    <GradientStop Offset="0.5" Color="White"/>
                                                    <GradientStop Offset="0.625" Color="#EC99D9DF"/>
                                                    <GradientStop Offset="1" Color="#0099D9DF"/>
                                                </LinearGradientBrush>
                                            </Rectangle.Fill>
                                        </Rectangle>
                                    </Grid>
                                    <Grid x:Name="ContentGrid" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="2,0">
                                        <ContentPresenter x:Name="PART_ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="4,0" Visibility="Hidden" />
                                        <GridViewRowPresenter x:Name="PART_GridViewRowPesenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="4,0" Visibility="Visible" />
                                    </Grid>
                                </Grid>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="GridView.ColumnCollection" Value="{x:Null}">
                                    <Setter TargetName="PART_ContentPresenter" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="PART_GridViewRowPesenter" Property="Visibility" Value="Hidden"/>
                                </Trigger>
                                <Trigger Property="IsSelected" Value="True">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="PressedOuterBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="PressedOuterBorder" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.ExitActions>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.ExitActions>
                                </Trigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding DockMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="Bottom"/>
                                        <Condition Value="True">
                                            <Condition.Binding>
                                                <MultiBinding Converter="{StaticResource ListViewItemIndexToBoolConverter}" ConverterParameter="last">
                                                    <MultiBinding.Bindings>
                                                        <Binding Mode="OneWay" RelativeSource="{RelativeSource Mode=Self}"/>
                                                        <Binding Mode="OneWay" RelativeSource="{RelativeSource Mode=FindAncestor,AncestorType={x:Type Panel}}"/>
                                                        <Binding Mode="OneWay" Path="Items.Count" RelativeSource="{RelativeSource Mode=FindAncestor,AncestorType={x:Type ListView}}" UpdateSourceTrigger="PropertyChanged"/>
                                                    </MultiBinding.Bindings>
                                                </MultiBinding>
                                            </Condition.Binding>
                                        </Condition>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="IdleOuterBorder" Property="CornerRadius" Value="0,6,0,0"/>
                                    <Setter TargetName="IdleInnerBorder" Property="CornerRadius" Value="0,5,0,0"/>
                                    <Setter TargetName="IdleOuterBorder" Property="BorderThickness" Value="1,1,1,0"/>
                                    <Setter TargetName="IdleInnerBorder" Property="BorderThickness" Value="1"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding DockMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="Bottom"/>
                                        <Condition Value="True">
                                            <Condition.Binding>
                                                <MultiBinding Converter="{StaticResource ListViewItemIndexToBoolConverter}" ConverterParameter="first">
                                                    <MultiBinding.Bindings>
                                                        <Binding Mode="OneWay" RelativeSource="{RelativeSource Mode=Self}"/>
                                                        <Binding Mode="OneWay" RelativeSource="{RelativeSource Mode=FindAncestor,AncestorType={x:Type Panel}}"/>
                                                        <Binding Mode="OneWay" Path="Items.Count" RelativeSource="{RelativeSource Mode=FindAncestor,AncestorType={x:Type ListView}}" UpdateSourceTrigger="PropertyChanged"/>
                                                    </MultiBinding.Bindings>
                                                </MultiBinding>
                                            </Condition.Binding>
                                        </Condition>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="IdleOuterBorder" Property="CornerRadius" Value="6,0,0,0"/>
                                    <Setter TargetName="IdleInnerBorder" Property="CornerRadius" Value="5,0,0,0"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding DockMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="Bottom"/>
                                        <Condition Value="True">
                                            <Condition.Binding>
                                                <MultiBinding Converter="{StaticResource ListViewItemIndexToBoolConverter}" ConverterParameter="first">
                                                    <MultiBinding.Bindings>
                                                        <Binding Mode="OneWay" RelativeSource="{RelativeSource Mode=Self}"/>
                                                        <Binding Mode="OneWay" RelativeSource="{RelativeSource Mode=FindAncestor,AncestorType={x:Type Panel}}"/>
                                                        <Binding Mode="OneWay" Path="Items.Count" RelativeSource="{RelativeSource Mode=FindAncestor,AncestorType={x:Type ListView}}" UpdateSourceTrigger="PropertyChanged"/>
                                                    </MultiBinding.Bindings>
                                                </MultiBinding>
                                            </Condition.Binding>
                                        </Condition>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="IdleOuterBorder" Property="CornerRadius" Value="6,6,0,0"/>
                                    <Setter TargetName="IdleInnerBorder" Property="CornerRadius" Value="5,5,0,0"/>
                                    <Setter TargetName="IdleOuterBorder" Property="BorderThickness" Value="1,1,1,0"/>
                                    <Setter TargetName="IdleInnerBorder" Property="BorderThickness" Value="1"/>
                                </MultiDataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:AppBarWindow}}}" Value="Vertical">
                        <Setter Property="Width" Value="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=DockMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:AppBarWindow}}}" Value="Left">
                        <Setter Property="Padding" Value="2,0,3,0"/>
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
        <Setter Property="Background" Value="#01000000"/>
        <Setter Property="Width" Value="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ScrollContentPresenter}}}"/>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ListViewItem}">
                    <Setter Property="OverridesDefaultStyle" Value="True"/>
                    <Setter Property="HorizontalAlignment" Value="Stretch"/>
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="Height" Value="{Binding ResizeIntervalDistance, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}"/>
                    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                    <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                    <Setter Property="BorderBrush" Value="Transparent"/>
                    <Setter Property="BorderThickness" Value="0"/>
                    <Setter Property="Padding" Value="0"/>
                    <!--Setter Property="Margin" Value="1,0"/-->
                    <Setter Property="Foreground" Value="White"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ListViewItem}">
                                <Grid Background="#01000000">
                                    <Grid Margin="2,0">
                                        <ContentPresenter x:Name="PART_ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="0" Visibility="Hidden" />
                                        <GridViewRowPresenter x:Name="PART_GridViewRowPesenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="0" Visibility="Visible" />
                                    </Grid>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="GridView.ColumnCollection" Value="{x:Null}">
                                        <Setter TargetName="PART_ContentPresenter" Property="Visibility" Value="Visible"/>
                                        <Setter TargetName="PART_GridViewRowPesenter" Property="Visibility" Value="Hidden"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>
                        <!--DataTrigger Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:AppBarWindow}}}" Value="Horizontal">
                            <Setter Property="Width" Value="160"/>
                            <Setter Property="MaxWidth" Value="160"/>
                        </DataTrigger-->
                        <DataTrigger Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:AppBarWindow}}}" Value="Vertical">
                            <Setter Property="Width" Value="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=DockMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:AppBarWindow}}}" Value="Left">
                            <Setter Property="Padding" Value="2,0,3,0"/>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type local:PinnedApplication}">
                    <DataTemplate.Resources>
                        <Style x:Key="GroupTabStyle" TargetType="{x:Type Control}">
                            <Setter Property="Width" Value="4"/>
                            <Setter Property="Margin" Value="0"/>
                            <Setter Property="Padding" Value="0"/>
                            <Setter Property="RenderTransform">
                                <Setter.Value>
                                    <TranslateTransform X="-2" Y="0"/>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type Control}">
                                        <Grid Background="#01000000" ClipToBounds="True" Margin="0">
                                            <Border x:Name="HoverBackground" Background="#30FFFFFF" RenderTransformOrigin="0,1">
                                                <Border.RenderTransform>
                                                    <ScaleTransform ScaleX="1" ScaleY="0"/>
                                                </Border.RenderTransform>
                                            </Border>
                                            <Rectangle Fill="#40000000" Width="1" HorizontalAlignment="Left" RenderTransform="{Binding RenderTransform, ElementName=HoverBackground}" RenderTransformOrigin="{Binding RenderTransformOrigin, ElementName=HoverBackground}"/>
                                            <Border x:Name="PressedBackground" Background="#60FFFFFF" Visibility="Collapsed"/>
                                            <Border BorderBrush="{x:Static SystemParameters.WindowGlassBrush}" BorderThickness="0,0,0,2"/>
                                            <Rectangle Fill="#40000000" Width="1" Height="2" HorizontalAlignment="Left" VerticalAlignment="Bottom"/>
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <!--DataTrigger Binding="{Binding IsApplicationActive, Mode=OneWay}" Value="True">
                                                <Setter TargetName="PressedBackground" Property="Visibility" Value="Visible"/>
                                            </DataTrigger-->
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding IsMouseOver, ElementName=IconToggleButton}" Value="False"/>
                                                    <Condition Binding="{Binding IsChecked, ElementName=IconToggleButton}" Value="False"/>
                                                </MultiDataTrigger.Conditions>
                                                <MultiDataTrigger.EnterActions>
                                                    <BeginStoryboard>
                                                        <Storyboard>
                                                            <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="RenderTransform.ScaleY" To="0" Duration="0:0:0.0625"/>
                                                            <DoubleAnimation Storyboard.TargetProperty="RenderTransform.X" To="-2" Duration="0:0:0.0625"/>
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </MultiDataTrigger.EnterActions>
                                                <MultiDataTrigger.ExitActions>
                                                    <BeginStoryboard>
                                                        <Storyboard>
                                                            <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="RenderTransform.ScaleY" To="1" Duration="0:0:0.0625"/>
                                                            <DoubleAnimation Storyboard.TargetProperty="RenderTransform.X" To="0" Duration="0:0:0.0625"/>
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </MultiDataTrigger.ExitActions>
                                            </MultiDataTrigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </DataTemplate.Resources>
                    <Grid x:Name="PinnedAppRootGrid" DataContext="{Binding}" MinWidth="74" Height="{Binding ResizeIntervalDistance, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}">
                        <e:Interaction.Behaviors>
                            <local:TaskItemMiddleClickBehavior/>
                            <local:TaskItemDragBehavior Application="{Binding}"/>
                        </e:Interaction.Behaviors>
                        <DockPanel x:Name="IconDockPanel" Margin="0" Background="#01000000">
                            <DockPanel.ToolTip>
                                <ToolTip IsOpen="{Binding AreThumbnailsShown, Mode=OneWayToSource, FallbackValue=True}" IsHitTestVisible="False" Opacity="0" Content="Test"/>
                            </DockPanel.ToolTip>
                            <!--DockPanel.ContextMenu>
                                <ContextMenu x:Name="JumpListDummyContextMenu" IsEnabled="True" IsOpen="{Binding Path=IsJumpListOpen, Mode=OneWayToSource, FallbackValue=True}" IsHitTestVisible="False" Opacity="0">
                                    <ContextMenu.Style>
                                        <Style TargetType="{x:Type ContextMenu}">
                                            <Style.Triggers>
                                                <EventTrigger RoutedEvent="Opened">
                                                    <BeginStoryboard>
                                                        <Storyboard>
                                                            <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="IsEnabled">
                                                                <DiscreteBooleanKeyFrame Value="False" KeyTime="0:0:0.1"/>
                                                            </BooleanAnimationUsingKeyFrames>
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </EventTrigger>
                                                <EventTrigger RoutedEvent="Closed">
                                                    <BeginStoryboard>
                                                        <Storyboard>
                                                            <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="IsEnabled">
                                                                <DiscreteBooleanKeyFrame Value="True" KeyTime="0:0:0.1"/>
                                                            </BooleanAnimationUsingKeyFrames>
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </EventTrigger>
                                                <Trigger Property="IsEnabled" Value="False">
                                                    <Setter Property="IsOpen" Value="False"/>
                                                </Trigger>
                                                <Trigger Property="IsEnabled" Value="True">
                                                    <Setter Property="IsOpen" Value="{Binding Path=IsJumpListOpen, Mode=OneWayToSource, FallbackValue=True}"/>
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </ContextMenu.Style>
                                </ContextMenu>
                            </DockPanel.ContextMenu-->
                            <!--Control x:Name="OuterGroupTab" Style="{DynamicResource GroupTabStyle}" Opacity="0.5" DockPanel.Dock="Right"/>
                            <Control x:Name="InnerGroupTab" Style="{DynamicResource GroupTabStyle}" Opacity="0.75" DockPanel.Dock="Right"/-->
                            <ToggleButton x:Name="JumpListToggleButton" IsChecked="{Binding Path=IsJumpListOpen, Mode=TwoWay, FallbackValue=False}" IsThreeState="False" Width="20" DockPanel.Dock="Right">
                                <ToggleButton.Style>
                                    <Style TargetType="{x:Type ToggleButton}">
                                        <Setter Property="OverridesDefaultStyle" Value="True" />
                                        <Setter Property="Margin" Value="0"/>
                                        <Setter Property="Padding" Value="0"/>
                                        <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                        <Setter Property="VerticalContentAlignment" Value="Center"/>
                                        <Setter Property="Opacity" Value="0"/>
                                        <Setter Property="Template">
                                            <Setter.Value>
                                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                    <Grid Background="#01000000">
                                                        <Grid Margin="0,4,0,0">
                                                            <Border x:Name="IdleOuterBorder" BorderBrush="Black" Background="#4D000000" BorderThickness="0,1,1,0" CornerRadius="0,6,0,0">
                                                                <Border x:Name="IdleInnerBorder" BorderBrush="#40FFFFFF" BorderThickness="1" CornerRadius="0,5,0,0"/>
                                                            </Border>
                                                            <Border x:Name="PressedOuterBorder" BorderBrush="Transparent" Background="#B8000000" BorderThickness="0,1,1,0" CornerRadius="{Binding CornerRadius, ElementName=IdleOuterBorder}" Opacity="0">
                                                                <Border x:Name="PressedInnerBorder" BorderBrush="#F7030303" BorderThickness="1" CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBorder}">
                                                                    <Grid>
                                                                        <Rectangle Width="5" HorizontalAlignment="Left">
                                                                            <Rectangle.Fill>
                                                                                <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                                                                    <GradientStop Offset="0" Color="#40000000"/>
                                                                                    <GradientStop Offset="1" Color="#00000000"/>
                                                                                </LinearGradientBrush>
                                                                            </Rectangle.Fill>
                                                                        </Rectangle>
                                                                        <Rectangle Width="5" HorizontalAlignment="Right">
                                                                            <Rectangle.Fill>
                                                                                <LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
                                                                                    <GradientStop Offset="0" Color="#40000000"/>
                                                                                    <GradientStop Offset="1" Color="#00000000"/>
                                                                                </LinearGradientBrush>
                                                                            </Rectangle.Fill>
                                                                        </Rectangle>
                                                                        <Rectangle Height="7" VerticalAlignment="Top">
                                                                            <Rectangle.Fill>
                                                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                                                    <GradientStop Offset="0" Color="#40000000"/>
                                                                                    <GradientStop Offset="1" Color="#00000000"/>
                                                                                </LinearGradientBrush>
                                                                            </Rectangle.Fill>
                                                                        </Rectangle>
                                                                    </Grid>
                                                                </Border>
                                                            </Border>
                                                            <Grid x:Name="HoverBackground" Opacity="0" Margin="0,2,0,0">
                                                                <Rectangle Height="20" VerticalAlignment="Bottom" Margin="0,0,0,1">
                                                                    <Rectangle.Fill>
                                                                        <RadialGradientBrush Center="0.5,1" GradientOrigin="0.5,1">
                                                                            <GradientStop Offset="0" Color="White"/>
                                                                            <GradientStop Offset="0.25" Color="#7F99D9DF"/>
                                                                            <GradientStop Offset="1" Color="#0099D9DF"/>
                                                                        </RadialGradientBrush>
                                                                    </Rectangle.Fill>
                                                                </Rectangle>
                                                                <Rectangle Height="1" VerticalAlignment="Bottom">
                                                                    <Rectangle.Fill>
                                                                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                                                            <GradientStop Offset="0" Color="#0099D9DF"/>
                                                                            <GradientStop Offset="0.375" Color="#EC99D9DF"/>
                                                                            <GradientStop Offset="0.5" Color="White"/>
                                                                            <GradientStop Offset="0.625" Color="#EC99D9DF"/>
                                                                            <GradientStop Offset="1" Color="#0099D9DF"/>
                                                                        </LinearGradientBrush>
                                                                    </Rectangle.Fill>
                                                                </Rectangle>
                                                            </Grid>
                                                            <!--ContentPresenter x:Name="PART_ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/-->
                                                            <Path Data="M 0 4 L 3.5 0 L 7 4 Z" Fill="White" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                                        </Grid>
                                                    </Grid>
                                                    <ControlTemplate.Triggers>
                                                        <MultiTrigger>
                                                            <MultiTrigger.Conditions>
                                                                <Condition Property="IsMouseOver" Value="True"/>
                                                                <Condition Property="IsChecked" Value="False"/>
                                                            </MultiTrigger.Conditions>
                                                        </MultiTrigger>
                                                        <MultiTrigger>
                                                            <MultiTrigger.Conditions>
                                                                <Condition Property="IsPressed" Value="False"/>
                                                                <Condition Property="IsChecked" Value="False"/>
                                                            </MultiTrigger.Conditions>
                                                            <MultiTrigger.EnterActions>
                                                                <BeginStoryboard>
                                                                    <Storyboard>
                                                                        <DoubleAnimation Storyboard.TargetName="PressedOuterBorder" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125"/>
                                                                    </Storyboard>
                                                                </BeginStoryboard>
                                                            </MultiTrigger.EnterActions>
                                                            <MultiTrigger.ExitActions>
                                                                <BeginStoryboard>
                                                                    <Storyboard>
                                                                        <DoubleAnimation Storyboard.TargetName="PressedOuterBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125"/>
                                                                    </Storyboard>
                                                                </BeginStoryboard>
                                                            </MultiTrigger.ExitActions>
                                                        </MultiTrigger>
                                                        <MultiTrigger>
                                                            <MultiTrigger.Conditions>
                                                                <Condition Property="IsMouseOver" Value="True"/>
                                                                <Condition Property="IsPressed" Value="False"/>
                                                            </MultiTrigger.Conditions>
                                                            <MultiTrigger.EnterActions>
                                                                <BeginStoryboard>
                                                                    <Storyboard>
                                                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125"/>
                                                                    </Storyboard>
                                                                </BeginStoryboard>
                                                            </MultiTrigger.EnterActions>
                                                            <MultiTrigger.ExitActions>
                                                                <BeginStoryboard>
                                                                    <Storyboard>
                                                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125"/>
                                                                    </Storyboard>
                                                                </BeginStoryboard>
                                                            </MultiTrigger.ExitActions>
                                                        </MultiTrigger>
                                                        <Trigger Property="IsChecked" Value="True">
                                                            <Setter Property="IsHitTestVisible" Value="False"/>
                                                        </Trigger>
                                                    </ControlTemplate.Triggers>
                                                </ControlTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </ToggleButton.Style>
                            </ToggleButton>
                            <Grid>
                                <Grid x:Name="ItemsGrid" HorizontalAlignment="Left">
                                    <!--Content="{Binding ListViewControl, Mode=OneWayToSource}"-->
                                    <Control HorizontalAlignment="Left" Width="{Binding ActualWidth, ElementName=ItemsListView, Mode=OneWay}" VerticalAlignment="Top" Opacity="{Binding ListSize, Mode=OneWayToSource}" Tag="{Binding ElementName=ItemsListView, Mode=OneWay}" Height="1">
                                        <e:Interaction.Behaviors>
                                            <local:ActualizerBehaviour/>
                                        </e:Interaction.Behaviors>
                                        <!--Rectangle Width="{Binding ActualWidth, ElementName=ItemsListView}"/-->
                                    </Control>
                                    <ListView x:Name="ItemsListView" HorizontalAlignment="Left" SelectionMode="Single" ItemsSource="{Binding OpenWindows}" SelectedItem="{Binding SelectedWindow, Mode=TwoWay, FallbackValue={x:Null}}" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Disabled" Tag="{Binding ItemSize, Mode=OneWay}">
                                        <ListView.Template>
                                            <ControlTemplate TargetType="{x:Type ListView}">
                                                <Grid MaxWidth="{Binding Path=ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ScrollViewer}}}" HorizontalAlignment="Left">
                                                    <!--Grid HorizontalAlignment="Left" VerticalAlignment="Top" Width="{Binding ListSize, Mode=OneWayToSource}">
                                                        <!-Height="{Binding ActualHeight, RelativeSource={RelativeSource Mode=Self}}"->
                                                        <Rectangle x:Name="SizingAid" Width="{TemplateBinding ActualWidth}"/>
                                                        <Grid x:Name="SizingGrid" HorizontalAlignment="Left">
                                                            <Rectangle HorizontalAlignment="Stretch" Width="{Binding Width, ElementName=SizingAid, Mode=OneWayToSource}"/>
                                                            <!-Rectangle Width="{Binding ListSize, Mode=OneWayToSource}"/->
                                                        </Grid>
                                                    </Grid-->
                                                    <WrapPanel x:Name="ItemsHostWrapPanel" IsItemsHost="True" HorizontalAlignment="Stretch" Background="#01000000" Orientation="Horizontal" Margin="0"/>
                                                </Grid>
                                                <ControlTemplate.Triggers>
                                                    <DataTrigger Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:AppBarWindow}}}" Value="Vertical">
                                                        <Setter TargetName="ItemsHostWrapPanel" Property="Orientation" Value="Vertical"/>
                                                    </DataTrigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </ListView.Template>
                                        <ListView.ItemTemplate>
                                            <DataTemplate DataType="{x:Type window:ProcessWindow}">
                                                <DockPanel VerticalAlignment="Center" HorizontalAlignment="Stretch">
                                                    <Canvas x:Name="IconCanvas" Width="24" Height="24" VerticalAlignment="Center" Background="{Binding Icon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='24'}" DockPanel.Dock="Left"/>
                                                    <!--Button Width="{Binding ActualHeight,RelativeSource={RelativeSource Mode=Self}}" VerticalAlignment="Stretch" DockPanel.Dock="Right" Tag="{Binding}">X</Button-->
                                                    <TextBlock Margin="4,0,0,0" Text="{Binding Title}" VerticalAlignment="Center"/>
                                                </DockPanel>
                                                <DataTemplate.Triggers>
                                                    <DataTrigger Binding="{Binding Path=UseSmallIcons, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="True">
                                                        <!--Setter TargetName="IconCanvas" Property="Background" Value="{Binding SmallIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='16'}"/-->
                                                        <Setter TargetName="IconCanvas" Property="Width" Value="16"/>
                                                        <Setter TargetName="IconCanvas" Property="Height" Value="16"/>
                                                    </DataTrigger>
                                                </DataTemplate.Triggers>
                                            </DataTemplate>
                                        </ListView.ItemTemplate>
                                    </ListView>
                                </Grid>
                                <ToggleButton x:Name="IconToggleButton" IsChecked="{Binding IsApplicationActive, Mode=TwoWay, FallbackValue=False}" IsThreeState="False" Visibility="Collapsed">
                                    <ToggleButton.Style>
                                        <Style TargetType="{x:Type ToggleButton}">
                                            <Setter Property="OverridesDefaultStyle" Value="True" />
                                            <Setter Property="Margin" Value="0"/>
                                            <Setter Property="Padding" Value="0"/>
                                            <Setter Property="HorizontalContentAlignment" Value="Center"/>
                                            <Setter Property="VerticalContentAlignment" Value="Center"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                                                        <Grid Background="#01000000">
                                                            <Grid x:Name="RootGrid" Margin="0,4,0,0">
                                                                <Border x:Name="IdleOuterBorder" BorderBrush="Black" Background="#4D000000" BorderThickness="1,1,1,0" CornerRadius="6,0,0,0">
                                                                    <Border x:Name="IdleInnerBorder" BorderBrush="#40FFFFFF" BorderThickness="1" CornerRadius="5,0,0,0"/>
                                                                </Border>
                                                                <Border x:Name="PressedOuterBorder" BorderBrush="Transparent" Background="#B8000000" BorderThickness="1,1,1,0" CornerRadius="{Binding CornerRadius, ElementName=IdleOuterBorder}" Opacity="0">
                                                                    <Border x:Name="PressedInnerBorder" BorderBrush="#F7030303" BorderThickness="1" CornerRadius="{Binding CornerRadius, ElementName=IdleInnerBorder}">
                                                                        <Grid>
                                                                            <Rectangle Width="5" HorizontalAlignment="Left">
                                                                                <Rectangle.Fill>
                                                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                                                                        <GradientStop Offset="0" Color="#40000000"/>
                                                                                        <GradientStop Offset="1" Color="#00000000"/>
                                                                                    </LinearGradientBrush>
                                                                                </Rectangle.Fill>
                                                                            </Rectangle>
                                                                            <Rectangle Width="5" HorizontalAlignment="Right">
                                                                                <Rectangle.Fill>
                                                                                    <LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
                                                                                        <GradientStop Offset="0" Color="#40000000"/>
                                                                                        <GradientStop Offset="1" Color="#00000000"/>
                                                                                    </LinearGradientBrush>
                                                                                </Rectangle.Fill>
                                                                            </Rectangle>
                                                                            <Rectangle Height="7" VerticalAlignment="Top">
                                                                                <Rectangle.Fill>
                                                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                                                        <GradientStop Offset="0" Color="#40000000"/>
                                                                                        <GradientStop Offset="1" Color="#00000000"/>
                                                                                    </LinearGradientBrush>
                                                                                </Rectangle.Fill>
                                                                            </Rectangle>
                                                                        </Grid>
                                                                    </Border>
                                                                </Border>
                                                                <Grid x:Name="HoverBackground" Opacity="0" Margin="2,2,2,0">
                                                                    <Rectangle Height="20" VerticalAlignment="Bottom" Margin="0,0,0,1">
                                                                        <Rectangle.Fill>
                                                                            <RadialGradientBrush Center="0.5,1" GradientOrigin="0.5,1">
                                                                                <GradientStop Offset="0" Color="White"/>
                                                                                <GradientStop Offset="0.25" Color="#7F99D9DF"/>
                                                                                <GradientStop Offset="1" Color="#0099D9DF"/>
                                                                            </RadialGradientBrush>
                                                                        </Rectangle.Fill>
                                                                    </Rectangle>
                                                                    <Rectangle Height="1" VerticalAlignment="Bottom" Margin="5,0">
                                                                        <Rectangle.Fill>
                                                                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                                                                <GradientStop Offset="0" Color="#0099D9DF"/>
                                                                                <GradientStop Offset="0.375" Color="#EC99D9DF"/>
                                                                                <GradientStop Offset="0.5" Color="White"/>
                                                                                <GradientStop Offset="0.625" Color="#EC99D9DF"/>
                                                                                <GradientStop Offset="1" Color="#0099D9DF"/>
                                                                            </LinearGradientBrush>
                                                                        </Rectangle.Fill>
                                                                    </Rectangle>
                                                                </Grid>
                                                                <ContentPresenter x:Name="PART_ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                                            </Grid>
                                                        </Grid>
                                                        <ControlTemplate.Triggers>
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Binding OpenWindows.Count}" Value="0"/>
                                                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=TemplatedParent}}" Value="False"/>
                                                                </MultiDataTrigger.Conditions>
                                                                <MultiDataTrigger.EnterActions>
                                                                    <BeginStoryboard>
                                                                        <Storyboard>
                                                                            <DoubleAnimation Storyboard.TargetName="RootGrid" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125"/>
                                                                        </Storyboard>
                                                                    </BeginStoryboard>
                                                                </MultiDataTrigger.EnterActions>
                                                                <MultiDataTrigger.ExitActions>
                                                                    <BeginStoryboard>
                                                                        <Storyboard>
                                                                            <DoubleAnimation Storyboard.TargetName="RootGrid" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125"/>
                                                                        </Storyboard>
                                                                    </BeginStoryboard>
                                                                </MultiDataTrigger.ExitActions>
                                                            </MultiDataTrigger>
                                                            <MultiTrigger>
                                                                <MultiTrigger.Conditions>
                                                                    <Condition Property="IsPressed" Value="False"/>
                                                                    <Condition Property="IsChecked" Value="False"/>
                                                                </MultiTrigger.Conditions>
                                                                <MultiTrigger.EnterActions>
                                                                    <BeginStoryboard>
                                                                        <Storyboard>
                                                                            <DoubleAnimation Storyboard.TargetName="PressedOuterBorder" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125"/>
                                                                        </Storyboard>
                                                                    </BeginStoryboard>
                                                                </MultiTrigger.EnterActions>
                                                                <MultiTrigger.ExitActions>
                                                                    <BeginStoryboard>
                                                                        <Storyboard>
                                                                            <DoubleAnimation Storyboard.TargetName="PressedOuterBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125"/>
                                                                        </Storyboard>
                                                                    </BeginStoryboard>
                                                                </MultiTrigger.ExitActions>
                                                            </MultiTrigger>
                                                            <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type DockPanel}}}" Value="True">
                                                                <DataTrigger.EnterActions>
                                                                    <BeginStoryboard>
                                                                        <Storyboard>
                                                                            <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125"/>
                                                                        </Storyboard>
                                                                    </BeginStoryboard>
                                                                </DataTrigger.EnterActions>
                                                                <DataTrigger.ExitActions>
                                                                    <BeginStoryboard>
                                                                        <Storyboard>
                                                                            <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125"/>
                                                                        </Storyboard>
                                                                    </BeginStoryboard>
                                                                </DataTrigger.ExitActions>
                                                            </DataTrigger>
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Binding DockMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="Bottom"/>
                                                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type DockPanel}}}" Value="False"/>
                                                                    <!--Condition Binding="{Binding IsJumpListOpen}" Value="False"/-->
                                                                    <Condition Binding="{Binding Opacity, ElementName=JumpListToggleButton}" Value="0"/>
                                                                </MultiDataTrigger.Conditions>
                                                                <Setter TargetName="IdleOuterBorder" Property="CornerRadius" Value="6,6,0,0"/>
                                                                <Setter TargetName="IdleInnerBorder" Property="CornerRadius" Value="5,5,0,0"/>
                                                            </MultiDataTrigger>
                                                            <DataTrigger Binding="{Binding DockMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="Top">
                                                                <Setter TargetName="IdleOuterBorder" Property="CornerRadius" Value="0,0,0,6"/>
                                                                <Setter TargetName="IdleInnerBorder" Property="CornerRadius" Value="0,0,0,5"/>
                                                                <Setter TargetName="RootGrid" Property="Margin" Value="0,0,0,4"/>
                                                            </DataTrigger>
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Binding DockMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="Top"/>
                                                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type DockPanel}}}" Value="False"/>
                                                                    <!--Condition Binding="{Binding IsJumpListOpen}" Value="False"/-->
                                                                    <Condition Binding="{Binding Opacity, ElementName=JumpListToggleButton}" Value="0"/>
                                                                </MultiDataTrigger.Conditions>
                                                                <Setter TargetName="IdleOuterBorder" Property="CornerRadius" Value="0,0,6,6"/>
                                                                <Setter TargetName="IdleInnerBorder" Property="CornerRadius" Value="0,0,5,5"/>
                                                            </MultiDataTrigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </ToggleButton.Style>
                                </ToggleButton>
                                <Grid x:Name="IconGrid" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,2,0,-2" Visibility="Collapsed">
                                    <DockPanel LastChildFill="True" Margin="4,0">
                                        <Grid HorizontalAlignment="Center" VerticalAlignment="Center" DockPanel.Dock="Left" Panel.ZIndex="9999">
                                            <Canvas x:Name="IconCanvas" Width="32" Height="32" Background="{Binding DiskApplication.ItemLargeIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='32'}" IsHitTestVisible="False"/>
                                        </Grid>
                                        <TextBlock x:Name="ItemLabelTextBlock" Text="{Binding DiskApplication.ItemDisplayName}" VerticalAlignment="Center" Margin="4,0" Foreground="White" Visibility="Collapsed"/>
                                    </DockPanel>
                                    <Border x:Name="WindowCounterBorder" Background="#7F000000" BorderBrush="White" BorderThickness="1" CornerRadius="10" MinWidth="20" MinHeight="20" HorizontalAlignment="Right" VerticalAlignment="Bottom" Margin="-5,-1">
                                        <TextBlock Text="{Binding OpenWindows.Count}" Foreground="White" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                    </Border>
                                </Grid>
                            </Grid>
                        </DockPanel>
                    </Grid>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding ShowCombinedLabels, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="True">
                            <Setter TargetName="ItemLabelTextBlock" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="WindowCounterBorder" Property="Margin" Value="2,-1"/>
                        </DataTrigger>
                        <!--DataTrigger Binding="{Binding TaskItemCombineMode}" Value="WhenFull">
                            <Setter TargetName="SizingGrid" Property="Width" Value="{Binding ActualWidth, ElementName=ItemsListView}"/>
                        </DataTrigger-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition SourceName="IconDockPanel" Property="IsMouseOver" Value="False"/>
                                <Condition SourceName="JumpListToggleButton" Property="IsChecked" Value="False"/>
                            </MultiTrigger.Conditions>
                            <!--Setter TargetName="JumpListToggleButton" Property="Visibility" Value="Hidden"/-->
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="JumpListToggleButton" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="JumpListToggleButton" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        <DataTrigger Binding="{Binding Path=UseSmallIcons, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="True">
                            <Setter TargetName="IconCanvas" Property="Background" Value="{Binding DiskApplication.ItemSmallIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='16'}"/>
                            <Setter TargetName="IconCanvas" Property="Width" Value="16"/>
                            <Setter TargetName="IconCanvas" Property="Height" Value="16"/>
                            <Setter TargetName="PinnedAppRootGrid" Property="MinWidth" Value="54"/>
                            <Setter TargetName="IconDockPanel" Property="MinWidth" Value="54"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding TaskItemCombineMode}" Value="Always">
                            <!--Setter TargetName="ItemsGrid" Property="Visibility" Value="Collapsed"/-->
                            <Setter TargetName="ItemsGrid" Property="Opacity" Value="0"/>
                            <Setter TargetName="IconToggleButton" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="IconGrid" Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                        <!--MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding TaskItemCombineMode}" Value="Always"/>
                                <Condition Binding="{Binding ShowCombinedLabels, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="IconDockPanel" Property="MaxWidth" Value="74"/>
                        </MultiDataTrigger-->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding TaskItemCombineMode}" Value="Always"/>
                                <Condition Binding="{Binding Path=UseSmallIcons, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="IconDockPanel" Property="MaxWidth" Value="74"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding TaskItemCombineMode}" Value="Always"/>
                                <Condition Binding="{Binding Path=UseSmallIcons, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="IconDockPanel" Property="MaxWidth" Value="54"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding TaskItemCombineMode}" Value="Always"/>
                                <Condition Binding="{Binding ShowCombinedLabels, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="IconGrid" Property="HorizontalAlignment" Value="Stretch"/>
                            <Setter TargetName="IconDockPanel" Property="MaxWidth" Value="160"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding TaskItemCombineMode}" Value="Always"/>
                                <Condition Binding="{Binding ShowCombinedLabels, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="True"/>
                                <Condition Binding="{Binding OpenWindows.Count}" Value="0"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="IconGrid" Property="HorizontalAlignment" Value="Center"/>
                            <Setter TargetName="ItemLabelTextBlock" Property="Visibility" Value="Collapsed"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding TaskItemCombineMode}" Value="Always"/>
                                <Condition Binding="{Binding ShowCombinedLabels, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="True"/>
                                <Condition Binding="{Binding OpenWindows.Count}" Value="0"/>
                                <Condition Binding="{Binding Path=UseSmallIcons, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="IconDockPanel" Property="MaxWidth" Value="74"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding TaskItemCombineMode}" Value="Always"/>
                                <Condition Binding="{Binding ShowCombinedLabels, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="True"/>
                                <Condition Binding="{Binding OpenWindows.Count}" Value="0"/>
                                <Condition Binding="{Binding Path=UseSmallIcons, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="IconDockPanel" Property="MaxWidth" Value="54"/>
                        </MultiDataTrigger>
                        <!--DataTrigger Binding="{Binding OpenWindows.Count}" Value="2">
                            <Setter TargetName="OuterGroupTab" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="InnerGroupTab" Property="Opacity" Value="0.625"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding OpenWindows.Count}" Value="1">
                            <Setter TargetName="OuterGroupTab" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="InnerGroupTab" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding OpenWindows.Count}" Value="0">
                            <Setter TargetName="OuterGroupTab" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="InnerGroupTab" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="UnderlineBorder" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger-->
                        <DataTrigger Binding="{Binding OpenWindows.Count}" Value="1">
                            <Setter TargetName="ItemLabelTextBlock" Property="Text" Value="{Binding OpenWindows[0].Title}"/>
                            <Setter TargetName="WindowCounterBorder" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding OpenWindows.Count}" Value="0">
                            <Setter TargetName="WindowCounterBorder" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <!--DataTrigger Binding="{Binding Path=TaskbarCombineMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="WhenFull">
                            <Setter TargetName="WindowCounterBorder" Property="Visibility" Value="Collapsed"/>
                        </>
                        <DataTrigger Binding="{Binding Path=TaskbarCombineMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="Never">
                            <Setter TargetName="WindowCounterBorder" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger-->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding TaskItemCombineMode}" Value="Never"/>
                                <Condition Binding="{Binding OpenWindows.Count}" Value="0"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="IconGrid" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="IconToggleButton" Property="Visibility" Value="Visible"/>
                        </MultiDataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
                <!--DataTemplate DataType="{x:Type local:ProcessWindowSet}">
                    <Grid MinWidth="60" Height="{Binding ResizeIntervalDistance, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Margin="0,-1">
                        <ListView x:Name="ItemsListView" ItemsSource="{Binding Windows}" Visibility="Collapsed" Style="{DynamicResource InnerListViewStyle}" SelectedItem="{Binding SetActiveWindow, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}, Mode=OneWayToSource}" SelectedIndex="{Binding SelectedIndex, Mode=TwoWay, FallbackValue=-1}">
                            <ListView.Template>
                                <ControlTemplate TargetType="{x:Type ListView}">
                                    <ControlTemplate.Resources>
                                        <Style TargetType="{x:Type ListViewItem}">
                                            <Setter Property="OverridesDefaultStyle" Value="True"/>
                                            <Setter Property="HorizontalAlignment" Value="Stretch"/>
                                            <Setter Property="Background" Value="Transparent"/>
                                            <Setter Property="Height" Value="{Binding ResizeIntervalDistance, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}"/>
                                            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                                            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                                            <Setter Property="BorderBrush" Value="Transparent"/>
                                            <Setter Property="BorderThickness" Value="0"/>
                                            <Setter Property="Padding" Value="0,3,0,2"/>
                                            <Setter Property="Margin" Value="1,0"/>
                                            <Setter Property="Foreground" Value="White"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type ListViewItem}">
                                                        <Grid Background="#01000000">
                                                            <Border x:Name="IdleBackground" BorderBrush="#FF306FD9" BorderThickness="1" CornerRadius="2" Margin="{TemplateBinding Padding}" ClipToBounds="True">
                                                                <Border.Background>
                                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                                        <GradientStop Offset="0" Color="#FF68A7F7"/>
                                                                        <GradientStop Offset="0.25" Color="#FF4386F2"/>
                                                                        <GradientStop Offset="0.875" Color="#FF3980F4"/>
                                                                        <GradientStop Offset="1" Color="#7F316FE8"/>
                                                                    </LinearGradientBrush>
                                                                </Border.Background>
                                                                <Border CornerRadius="1">
                                                                    <Border.Background>
                                                                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                                                            <GradientStop Offset="0" Color="#FF71A6F6"/>
                                                                            <GradientStop Offset="0.015625" Color="#204386F2"/>
                                                                            <GradientStop Offset="0.96875" Color="#203980F4"/>
                                                                            <GradientStop Offset="1" Color="#7F316FE8"/>
                                                                        </LinearGradientBrush>
                                                                    </Border.Background>
                                                                </Border>
                                                            </Border>
                                                            <Border x:Name="HoverBackground" BorderBrush="#FF2C5FB2" BorderThickness="1" CornerRadius="2" Margin="{TemplateBinding Padding}" ClipToBounds="True" Visibility="Collapsed">
                                                                <Border.Background>
                                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                                        <GradientStop Offset="0" Color="#FF8EC6FF"/>
                                                                        <GradientStop Offset="0.25" Color="#FF69AFFF"/>
                                                                        <GradientStop Offset="0.875" Color="#FF55A0FF"/>
                                                                        <GradientStop Offset="1" Color="#7F2A81FF"/>
                                                                    </LinearGradientBrush>
                                                                </Border.Background>
                                                                <Border CornerRadius="1">
                                                                    <Border.Background>
                                                                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                                                            <GradientStop Offset="0" Color="#FF8EC6FF"/>
                                                                            <GradientStop Offset="0.015625" Color="#2069AFFF"/>
                                                                            <GradientStop Offset="0.96875" Color="#2055A0FF"/>
                                                                            <GradientStop Offset="1" Color="#7F2A81FF"/>
                                                                        </LinearGradientBrush>
                                                                    </Border.Background>
                                                                </Border>
                                                            </Border>
                                                            <Border x:Name="PressedBackground" Background="#FF174CBA" BorderBrush="#FF123C92" BorderThickness="1" CornerRadius="2" Margin="{TemplateBinding Padding}" ClipToBounds="True" Visibility="Collapsed">
                                                                <Border ClipToBounds="True">
                                                                    <Border Margin="-1" BorderBrush="#FF123C92" BorderThickness="1" CornerRadius="2">
                                                                        <Border.Effect>
                                                                            <DropShadowEffect Color="#FF123D94" Direction="315" BlurRadius="3" ShadowDepth="2" Opacity="1"/>
                                                                        </Border.Effect>
                                                                    </Border>
                                                                </Border>
                                                            </Border>
                                                            <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                                                <ContentPresenter x:Name="PART_ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="4,0" Visibility="Hidden" />
                                                                <GridViewRowPresenter x:Name="PART_GridViewRowPesenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="4,0" Visibility="Visible" />
                                                            </Grid>
                                                        </Grid>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="GridView.ColumnCollection" Value="{x:Null}">
                                                                <Setter TargetName="PART_ContentPresenter" Property="Visibility" Value="Visible"/>
                                                                <Setter TargetName="PART_GridViewRowPesenter" Property="Visibility" Value="Hidden"/>
                                                            </Trigger>
                                                            <MultiTrigger>
                                                                <MultiTrigger.Conditions>
                                                                    <Condition Property="IsMouseOver" Value="True"/>
                                                                    <Condition Property="IsSelected" Value="False"/>
                                                                </MultiTrigger.Conditions>
                                                                <Setter TargetName="IdleBackground" Property="Visibility" Value="Collapsed"/>
                                                                <Setter TargetName="HoverBackground" Property="Visibility" Value="Visible"/>
                                                            </MultiTrigger>
                                                            <Trigger Property="IsSelected" Value="True">
                                                                <Setter TargetName="IdleBackground" Property="Visibility" Value="Collapsed"/>
                                                                <Setter TargetName="PressedBackground" Property="Visibility" Value="Visible"/>
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:AppBarWindow}}}" Value="Horizontal">
                                                    <Setter Property="Width" Value="160"/>
                                                    <Setter Property="MaxWidth" Value="160"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:AppBarWindow}}}" Value="Vertical">
                                                    <Setter Property="Width" Value="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Path=DockMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:AppBarWindow}}}" Value="Left">
                                                    <Setter Property="Padding" Value="2,0,3,0"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </ControlTemplate.Resources>
                                    <StackPanel IsItemsHost="True" Orientation="Horizontal"/>
                                </ControlTemplate>
                            </ListView.Template>
                            <ListView.ItemTemplate>
                                <DataTemplate DataType="{x:Type window:ProcessWindow}">
                                    <DockPanel VerticalAlignment="Center" HorizontalAlignment="Center">
                                        <Canvas x:Name="IconCanvas" Width="24" Height="24" VerticalAlignment="Center" Background="{Binding Icon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='24'}" DockPanel.Dock="Left"/>
                                        <TextBlock Margin="4,0,0,0" Text="{Binding Title}" VerticalAlignment="Center"/>
                                    </DockPanel>
                                    <DataTemplate.Triggers>
                                        <DataTrigger Binding="{Binding SmallIcon}" Value="{x:Null}">
                                            <Setter TargetName="IconCanvas" Property="Background" Value="Black"/>
                                        </DataTrigger>
                                    </DataTemplate.Triggers>
                                </DataTemplate>
                            </ListView.ItemTemplate>
                        </ListView>
                        <Canvas x:Name="IconCanvas" Width="24" Height="24" HorizontalAlignment="Center" VerticalAlignment="Center" Background="{Binding LargeIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='24'}"/>
                    </Grid>
                    <DataTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding CombineItems, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="False"/>
                                <Condition Binding="{Binding IsRunning}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="IconCanvas" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="ItemsListView" Property="Visibility" Value="Visible"/>
                        </MultiDataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate-->
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="{TemplateBinding Background}">
                        <WrapPanel x:Name="ItemsHostWrapPanel" IsItemsHost="True" MaxWidth="{Binding Path=ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ScrollViewer}}}" HorizontalAlignment="Left" Background="#01000000" Orientation="Horizontal" Margin="0"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:AppBarWindow}}}" Value="Vertical">
                            <Setter TargetName="ItemsHostWrapPanel" Property="Orientation" Value="vertical"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ThumbnailsWindowStyle" TargetType="{x:Type win:ShadowedWindow}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Width" Value="200"/>
        <Setter Property="CompositionState" Value="Glass"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="Opacity" Value="0"/>
        <Setter Property="ShadowOffsetThickness" Value="12,12,20,20"/>
        <Setter Property="HideTransitionDuration" Value="25"/>
        <Setter Property="ShadowStyle">
            <Setter.Value>
                <Style TargetType="Window">
                    <Setter Property="WindowStyle" Value="None"/>
                    <Setter Property="ResizeMode" Value="NoResize"/>
                    <Setter Property="AllowsTransparency" Value="True"/>
                    <Setter Property="Visibility" Value="Visible"/>
                    <Setter Property="RenderTransformOrigin" Value="0.5,0.5"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="Window">
                                <Rectangle>
                                    <Rectangle.OpacityMask>
                                        <VisualBrush>
                                            <VisualBrush.Visual>
                                                <Border Width="{TemplateBinding ActualWidth}" Height="{TemplateBinding ActualHeight}" Background="Transparent" BorderBrush="Black" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="12,16,20,16">
                                                    <Border VerticalAlignment="Bottom" BorderBrush="Black" BorderThickness="4" Margin="-4,-4,-4,0" CornerRadius="0,0,6,6"/>
                                                </Border>
                                            </VisualBrush.Visual>
                                        </VisualBrush>
                                    </Rectangle.OpacityMask>
                                    <Rectangle.Fill>
                                        <VisualBrush>
                                            <VisualBrush.Visual>
                                                <Grid Width="{TemplateBinding ActualWidth}" Height="{TemplateBinding ActualHeight}" Background="#01000000">
                                                    <Border Margin="18,18,14,14" Background="#C0000000">
                                                        <Border.Effect>
                                                            <BlurEffect Radius="14"/>
                                                        </Border.Effect>
                                                    </Border>
                                                </Grid>
                                            </VisualBrush.Visual>
                                        </VisualBrush>
                                    </Rectangle.Fill>
                                </Rectangle>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type win:ShadowedWindow}">
                    <Grid x:Name="RootGrid">
                        <!--Margin="0,0,0,-16"-->
                        <Grid.RenderTransform>
                            <TranslateTransform X="0" Y="25"/>
                        </Grid.RenderTransform>
                        <Rectangle x:Name="SizingAidRectangle" Fill="#01000000"/>
                        <Grid x:Name="BaseGrid" Margin="0,0,0,4">
                            <Border x:Name="RootBorder" BorderBrush="Black" BorderThickness="1" CornerRadius="6">
                                <Border.Background>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <GradientStop Offset="0" Color="#99000000"/>
                                        <GradientStop Offset="1" Color="#BD0C0C0C"/>
                                    </LinearGradientBrush>
                                </Border.Background>
                                <Border BorderBrush="#40FFFFFF" BorderThickness="1" CornerRadius="5">
                                    <Grid>
                                        <Border CornerRadius="4">
                                            <Border.Background>
                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                    <GradientStop Offset="0" Color="#64FFFFFF"/>
                                                    <GradientStop Offset="1" Color="#01FFFFFF"/>
                                                </LinearGradientBrush>
                                            </Border.Background>
                                            <Border.OpacityMask>
                                                <VisualBrush>
                                                    <VisualBrush.Visual>
                                                        <Rectangle x:Name="ShineRectangle" Width="200" Height="{Binding ActualHeight, ElementName=SizingAidRectangle}" VerticalAlignment="Top">
                                                            <Rectangle.Fill>
                                                                <LinearGradientBrush StartPoint="75,0" EndPoint="125,175" MappingMode="Absolute">
                                                                    <GradientStop Offset="0.5" Color="Black"/>
                                                                    <GradientStop Offset="0.51" Color="#40000000"/>
                                                                </LinearGradientBrush>
                                                            </Rectangle.Fill>
                                                        </Rectangle>
                                                    </VisualBrush.Visual>
                                                </VisualBrush>
                                            </Border.OpacityMask>
                                        </Border>
                                        <ContentPresenter Content="{TemplateBinding Content}" Margin="3"/>
                                    </Grid>
                                </Border>
                            </Border>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsGlassAvailable" Value="False">
                            <Setter Property="CompositionState" Value="Alpha"/>
                            <Setter TargetName="RootBorder" Property="Background" Value="#FF1B1B1B"/>
                            <Setter TargetName="BaseGrid" Property="Margin" Value="0"/>
                            <Setter TargetName="ShineRectangle" Property="Fill">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="75,0" EndPoint="125,175" MappingMode="Absolute">
                                        <GradientStop Offset="0.25" Color="Black"/>
                                        <GradientStop Offset="0.251" Color="#40000000"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="ShadowStyle">
                                <Setter.Value>
                                    <Style TargetType="{x:Type Window}">
                                        <Setter Property="WindowStyle" Value="None"/>
                                        <Setter Property="ResizeMode" Value="NoResize"/>
                                        <Setter Property="AllowsTransparency" Value="True"/>
                                        <Setter Property="Background" Value="Transparent"/>
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                    </Style>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsWindowVisible" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="RootGrid" Storyboard.TargetProperty="RenderTransform.Y" From="25" To="0" Duration="0:0:0.25">
                                            <DoubleAnimation.EasingFunction>
                                                <CircleEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.125"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="RootGrid" Storyboard.TargetProperty="RenderTransform.Y" To="25" Duration="0:0:0.25">
                                            <DoubleAnimation.EasingFunction>
                                                <CircleEase EasingMode="EaseIn"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="0:0:0.25"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DarkListViewItemStyle" TargetType="{x:Type ListViewItem}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Background" Value="#30FFFFFF"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="4"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Grid Background="{TemplateBinding Background}">
                        <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <ContentPresenter x:Name="PART_ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="4,0" Visibility="Hidden" />
                            <GridViewRowPresenter x:Name="PART_GridViewRowPesenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="4,0" Visibility="Visible" />
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="GridView.ColumnCollection" Value="{x:Null}">
                            <Setter TargetName="PART_ContentPresenter" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="PART_GridViewRowPesenter" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="False"/>
                    <Condition Property="IsSelected" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="#01000000"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ThumbnailsListViewStyle" TargetType="{x:Type ListView}">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type window:ProcessWindow}">
                    <DockPanel VerticalAlignment="Center" HorizontalAlignment="Stretch">
                        <Canvas x:Name="IconCanvas" Width="16" Height="16" VerticalAlignment="Center" Background="{Binding SmallIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='16'}" DockPanel.Dock="Left"/>
                        <TextBlock Margin="4,0,0,0" Text="{Binding Title}" VerticalAlignment="Center"/>
                    </DockPanel>
                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding SmallIcon}" Value="{x:Null}">
                            <Setter TargetName="IconCanvas" Property="Background" Value="Black"/>
                        </DataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="{x:Type ListViewItem}">
                    <Setter Property="OverridesDefaultStyle" Value="True"/>
                    <Setter Property="HorizontalAlignment" Value="Stretch"/>
                    <Setter Property="Background" Value="#01000000"/>
                    <Setter Property="Height" Value="22"/>
                    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                    <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                    <Setter Property="BorderBrush" Value="Transparent"/>
                    <Setter Property="BorderThickness" Value="0"/>
                    <Setter Property="Padding" Value="2,0"/>
                    <Setter Property="Foreground" Value="White"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ListViewItem}">
                                <Grid>
                                    <Border x:Name="HoverBackground" BorderBrush="#7F99DDFD" BorderThickness="1" CornerRadius="3" Margin="0,1" Opacity="0">
                                        <Border.Background>
                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                <GradientStop Offset="0" Color="#4D98DAFB"/>
                                                <GradientStop Offset="1" Color="#4D00ACFB"/>
                                            </LinearGradientBrush>
                                        </Border.Background>
                                    </Border>
                                    <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="{TemplateBinding Padding}">
                                        <ContentPresenter x:Name="PART_ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="0" Visibility="Hidden" />
                                        <GridViewRowPresenter x:Name="PART_GridViewRowPesenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="0" Visibility="Visible" />
                                    </Grid>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="GridView.ColumnCollection" Value="{x:Null}">
                                        <Setter TargetName="PART_ContentPresenter" Property="Visibility" Value="Visible"/>
                                        <Setter TargetName="PART_GridViewRowPesenter" Property="Visibility" Value="Hidden"/>
                                    </Trigger>
                                    <MultiTrigger>
                                        <MultiTrigger.Conditions>
                                            <Condition Property="IsMouseOver" Value="False"/>
                                            <Condition Property="IsSelected" Value="False"/>
                                        </MultiTrigger.Conditions>
                                        <MultiTrigger.EnterActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125"/>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </MultiTrigger.EnterActions>
                                        <MultiTrigger.ExitActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125"/>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </MultiTrigger.ExitActions>
                                    </MultiTrigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <StackPanel Orientation="Vertical" IsItemsHost="True"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="JumpListEntryListViewItemStyle" TargetType="{x:Type ListViewItem}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Background" Value="#01000000"/>
        <Setter Property="Height" Value="22"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="2,0"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListViewItem}">
                    <Grid Background="{TemplateBinding Background}">
                        <Border x:Name="HoverBackground" BorderBrush="#7F99DDFD" BorderThickness="1" CornerRadius="3" Margin="0,1" Opacity="0">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                    <!--GradientStop Offset="0" Color="#B38EDAFD"/>
                                        <GradientStop Offset="1" Color="#B384D7FC"/-->
                                    <GradientStop Offset="0" Color="#4D98DAFB"/>
                                    <GradientStop Offset="1" Color="#4D00ACFB"/>
                                </LinearGradientBrush>
                            </Border.Background>
                        </Border>
                        <Border x:Name="zHoverBackground" BorderBrush="#F424A9ED" BorderThickness="1" CornerRadius="3" Margin="4,2" Opacity="0">
                            <Border.Background>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                    <!--GradientStop Offset="0" Color="#B38EDAFD"/>
                                        <GradientStop Offset="1" Color="#B384D7FC"/-->
                                    <GradientStop Offset="0" Color="#A8E6F4FD"/>
                                    <GradientStop Offset="1" Color="#A82FADEC"/>
                                </LinearGradientBrush>
                            </Border.Background>
                            <Border BorderBrush="#CCFFFFFF" BorderThickness="1" CornerRadius="2">
                                <!--Border.BorderBrush>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <GradientStop Offset="0" Color="#B3F3FAFD"/>
                                        <GradientStop Offset="1" Color="#B3DEF2FD"/>
                                    </LinearGradientBrush>
                                </Border.BorderBrush-->
                            </Border>
                        </Border>
                        <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="{TemplateBinding Padding}">
                            <ContentPresenter x:Name="PART_ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="0" Visibility="Hidden" />
                            <GridViewRowPresenter x:Name="PART_GridViewRowPesenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="0" Visibility="Visible" />
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="GridView.ColumnCollection" Value="{x:Null}">
                            <Setter TargetName="PART_ContentPresenter" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="PART_GridViewRowPesenter" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" Value="Red"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="JumpListWindowStyle" TargetType="{x:Type win:ShadowedWindow}">
        <Setter Property="MinWidth" Value="246"/>
        <Setter Property="CompositionState" Value="Glass"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="HideTransitionDuration" Value="2"/>
        <Setter Property="Opacity" Value="0"/>
        <Setter Property="ShadowOffsetThickness" Value="12,12,20,20"/>
        <Setter Property="ShadowStyle">
            <Setter.Value>
                <Style TargetType="Window">
                    <Setter Property="WindowStyle" Value="None"/>
                    <Setter Property="ResizeMode" Value="NoResize"/>
                    <Setter Property="AllowsTransparency" Value="True"/>
                    <Setter Property="Visibility" Value="Visible"/>
                    <Setter Property="RenderTransformOrigin" Value="0.5,0.5"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="Window">
                                <!--Grid-->
                                    <Rectangle x:Name="RootRect">
                                        <!--Rectangle.RenderTransform>
                                            <TranslateTransform X="0" Y="25"/>
                                        </Rectangle.RenderTransform-->
                                        <Rectangle.OpacityMask>
                                            <VisualBrush>
                                                <VisualBrush.Visual>
                                                    <Border Width="{TemplateBinding ActualWidth}" Height="{TemplateBinding ActualHeight}" Background="Transparent" BorderBrush="Black" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="12,16,20,16" />
                                                </VisualBrush.Visual>
                                            </VisualBrush>
                                        </Rectangle.OpacityMask>
                                        <Rectangle.Fill>
                                            <VisualBrush>
                                                <VisualBrush.Visual>
                                                    <Grid Width="{TemplateBinding ActualWidth}" Height="{TemplateBinding ActualHeight}" Background="#01000000">
                                                        <!--Rectangle Width="10" Height="10" Fill="Red" HorizontalAlignment="Right" VerticalAlignment="Top"/-->
                                                        <Border Margin="18,18,14,14" Background="#C0000000">
                                                            <Border.Effect>
                                                                <BlurEffect Radius="14"/>
                                                            </Border.Effect>
                                                        </Border>
                                                    </Grid>
                                                </VisualBrush.Visual>
                                            </VisualBrush>
                                        </Rectangle.Fill>
                                    </Rectangle>
                                <!--/Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="Opacity" Value="0">
                                        <Trigger.ExitActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetName="RootRect" Storyboard.TargetProperty="RenderTransform.Y" From="25" To="0" Duration="0:0:0.25">
                                                        <DoubleAnimation.EasingFunction>
                                                            <CircleEase EasingMode="EaseOut"/>
                                                        </DoubleAnimation.EasingFunction>
                                                    </DoubleAnimation>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </Trigger.ExitActions>
                                    </Trigger>
                                    <Trigger Property="Opacity" Value="1">
                                        <Trigger.ExitActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetName="RootRect" Storyboard.TargetProperty="RenderTransform.Y" To="25" Duration="0:0:0">
                                                        <DoubleAnimation.EasingFunction>
                                                            <CircleEase EasingMode="EaseIn"/>
                                                        </DoubleAnimation.EasingFunction>
                                                    </DoubleAnimation>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </Trigger.ExitActions>
                                    </Trigger>
                                </ControlTemplate.Triggers-->
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type win:ShadowedWindow}">
                    <Border x:Name="RootBorder" BorderBrush="#CC000000" BorderThickness="1" CornerRadius="6,6,0,0">
                        <Border.RenderTransform>
                            <TranslateTransform X="0" Y="25"/>
                        </Border.RenderTransform>
                        <Border.Background>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                <LinearGradientBrush.GradientStops>
                                    <GradientStop Offset="0" Color="#D74F4F4F"/>
                                    <GradientStop Offset="0.375" Color="#C7292929"/>
                                    <GradientStop Offset="1" Color="#B7000000"/>
                                </LinearGradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </Border.Background>
                        <Border Background="Transparent" BorderBrush="#40FFFFFF" BorderThickness="1" CornerRadius="5,5,0,0">
                            <ContentPresenter Content="{TemplateBinding Content}" Margin="3"/>
                        </Border>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsGlassAvailable" Value="False">
                            <Setter Property="CompositionState" Value="Alpha"/>
                            <Setter TargetName="RootBorder" Property="Background">
                                <Setter.Value>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStop Offset="0" Color="#FF5C5C5C"/>
                                            <GradientStop Offset="0.375" Color="#FF353535"/>
                                            <GradientStop Offset="1" Color="Black"/>
                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="ShadowStyle">
                                <Setter.Value>
                                    <Style TargetType="{x:Type Window}">
                                        <Setter Property="WindowStyle" Value="None"/>
                                        <Setter Property="ResizeMode" Value="NoResize"/>
                                        <Setter Property="AllowsTransparency" Value="True"/>
                                        <Setter Property="Background" Value="Transparent"/>
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                    </Style>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsWindowVisible" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="RootBorder" Storyboard.TargetProperty="RenderTransform.Y" From="25" To="0" Duration="0:0:0.25">
                                            <DoubleAnimation.EasingFunction>
                                                <CircleEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:0.125"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="RootBorder" Storyboard.TargetProperty="RenderTransform.Y" To="25" Duration="0:0:0">
                                            <DoubleAnimation.EasingFunction>
                                                <CircleEase EasingMode="EaseIn"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                        <DoubleAnimation Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="0:0:0.025"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="JumpListBottomSegmentListViewStyle" TargetType="{x:Type ListView}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListView}">
                    <ControlTemplate.Resources>
                        <!--Style x:Key="{x:Type ListViewItem}" TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource JumpListEntryListViewItemStyle}"/-->

                        <Style x:Key="JumpListApplicationListViewItemStyle" TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource JumpListEntryListViewItemStyle}">
                            <Setter Property="Content">
                                <Setter.Value>
                                    <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                                        <Rectangle VerticalAlignment="Center" Width="16" Height="16" Fill="{DynamicResource JumpListSmallIconImageBrush}" Margin="0,0,6,0"/>
                                        <!--Fill="{Binding {DynamicResource JumpListApplicationIcon}, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='16'}"/-->
                                        <TextBlock VerticalAlignment="Center" Text="{DynamicResource JumpListApplicationNameText}"/>
                                    </StackPanel>
                                </Setter.Value>
                            </Setter>
                        </Style>

                        <Style x:Key="JumpListPinListViewItemStyle" TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource JumpListEntryListViewItemStyle}">
                            <Setter Property="Content">
                                <Setter.Value>
                                    <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                                        <Canvas VerticalAlignment="Center" Width="16" Height="8" Margin="0,0,6,0">
                                            <Rectangle Width="6" Height="1" Fill="#FFE4E4E4" Canvas.Top="4"/>
                                            <Path Data="M 0 0 L 3 2 L 8 2 L 10 1 L 10 8 L 8 7 L 3 7 L 0 9 Z" Canvas.Left="6" SnapsToDevicePixels="True">
                                                <Path.Fill>
                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                        <GradientStop Offset="0" Color="#FFE9E9E9"/>
                                                        <GradientStop Offset="1" Color="#FF747474"/>
                                                    </LinearGradientBrush>
                                                </Path.Fill>
                                            </Path>
                                            <!--Path Data="M 0 0 L 3 2 L 8 2 L 10 1 L 10 6 L 8 5 L 3 5 L 0 7 Z" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}" StrokeThickness="1" Canvas.Left="6"/-->
                                        </Canvas>
                                        <TextBlock VerticalAlignment="Center" Text="{DynamicResource JumpListPinApplicationText}"/>
                                    </StackPanel>
                                </Setter.Value>
                            </Setter>
                            <Style.Triggers>
                                <!--DataTrigger Binding="{Binding IsPinned, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type local:JumpListWindow}}}" Value="False">
                                    <Setter Property="Content">
                                        <Setter.Value>
                                            <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                                                <Rectangle VerticalAlignment="Center" Width="16" Height="8" Fill="Red" Margin="0,0,6,0"/>
                                                <TextBlock VerticalAlignment="Center" Text="{DynamicResource JumpListPinApplicationText}"/>
                                            </StackPanel>
                                        </Setter.Value>
                                    </Setter>
                                </DataTrigger-->
                            </Style.Triggers>
                        </Style>

                        <Style x:Key="JumpListCloseWindowsListViewItemStyle" TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource JumpListEntryListViewItemStyle}">
                            <Setter Property="Content">
                                <Setter.Value>
                                    <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                                        <Grid Width="16" Height="16" VerticalAlignment="Center" Margin="0,0,6,0">
                                            <Border Width="14" Height="14" BorderBrush="#FF3C181A" BorderThickness="1" CornerRadius="2" HorizontalAlignment="Center" VerticalAlignment="Center">
                                                <Border.Background>
                                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                        <GradientStop Offset="0" Color="#FFE4B4B0"/>
                                                        <GradientStop Offset="0.5" Color="#FFF2927C"/>
                                                        <GradientStop Offset="0.5" Color="#FFBF5943"/>
                                                        <GradientStop Offset="1" Color="#FFCE7F70"/>
                                                    </LinearGradientBrush>
                                                </Border.Background>
                                                <Border BorderThickness="1" CornerRadius="1">
                                                    <Border.BorderBrush>
                                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                            <GradientStop Offset="0" Color="#FFFACAC8"/>
                                                            <GradientStop Offset="0.5" Color="#FFFDB3AA"/>
                                                            <GradientStop Offset="0.5" Color="#FFDB8D83"/>
                                                            <GradientStop Offset="1" Color="#FFEFACA6"/>
                                                        </LinearGradientBrush>
                                                    </Border.BorderBrush>
                                                    <Grid HorizontalAlignment="Center" VerticalAlignment="Center">
                                                        <Grid.Effect>
                                                            <DropShadowEffect Color="Black" ShadowDepth="0" BlurRadius="1" Opacity="1"/>
                                                        </Grid.Effect>
                                                        <Path Data="M 0 0 L 2 0 L 3 1 L 4 0 L 6 0 L 4 2 L 4 4 L 6 6 L 4 6 L 3 5 L 2 6 L 0 6 L 2 4 L 2 2 Z" Stroke="Black" StrokeThickness="0" HorizontalAlignment="Center" VerticalAlignment="Center" UseLayoutRounding="True">
                                                            <Path.Effect>
                                                                <DropShadowEffect Color="Black" ShadowDepth="0" BlurRadius="1" Opacity="1"/>
                                                            </Path.Effect>
                                                            <!--M 0 0 L 1 0 L 8 8 L 7 8 Z M 8 0 L 7 0 L 0 8 L 0 7 Z-->
                                                            <!--M 0 0 L 3 0 L 4 1 L 5 0 L 7 0 L 7 1 L 5 3 L 5 5 L 7 7 L 7 6 L 5 7 L 4 6 L 3 7 L 0 7 L 0 6 L 3 5 L 3 3 L 0 1 Z-->
                                                            <Path.Fill>
                                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                                    <GradientStop Offset="0" Color="White"/>
                                                                    <GradientStop Offset="1" Color="#FFDADADA"/>
                                                                </LinearGradientBrush>
                                                            </Path.Fill>
                                                        </Path>
                                                    </Grid>
                                                </Border>
                                            </Border>
                                        </Grid>
                                        <!--Path VerticalAlignment="Center" Data="M 0 0 L 12 12 M 12 0 L 0 12" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListViewItem}}}" StrokeThickness="1" /-->
                                        <TextBlock VerticalAlignment="Center" Text="{DynamicResource JumpListCloseWindowsText}"/>
                                    </StackPanel>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </ControlTemplate.Resources>
                    <StackPanel Background="Transparent" IsItemsHost="True"/>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding IsWindowVisible, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type local:JumpListWindow}}}" Value="False">
                            <Setter Property="IsHitTestVisible" Value="False"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Style x:Key="TaskItemButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="44" />
        <Setter Property="Height" Value="{Binding Path=ResizeIntervalDistance, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type local:MainWindow}}}"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid Background="#01000000">
                        <Grid Margin="1,3,1,2">
                            <Grid x:Name="IdleBackground" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                <themes:ClassicBorderDecorator BorderStyle="Raised" BorderThickness="2.5"/>
                            </Grid>
                            <Grid x:Name="SelectedBackground" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Visibility="Hidden">
                                <themes:ClassicBorderDecorator BorderStyle="Sunken" BorderThickness="2" Background="White"/>
                            </Grid>
                        </Grid>
                        <StackPanel HorizontalAlignment="Left" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Orientation="Horizontal" Margin="5,0">
                            <-ContentControl Content="{TemplateBinding Icon}" Margin="0,0,2,0" Focusable="False" IsTabStop="False" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/->
                            <TextBlock Text="{TemplateBinding Content}" Margin="2,0,0,0" Focusable="False" TextWrapping="Wrap" LineStackingStrategy="BlockLineHeight" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </StackPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="SelectedBackground" Property="Visibility" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=UseSmallIcons, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="True">
                <Setter Property="MinWidth" Value="36"/>
            </DataTrigger>
        </Style.Triggers>
    </Style-->

    <Style x:Key="TaskBandCycleButtonGridStyle" TargetType="{x:Type UniformGrid}">
        <Style.Resources>

        </Style.Resources>
        <Setter Property="Width" Value="10"/>
    </Style>

    <!--#endregion Taskband Styles-->


    <!--#region Start/QuickLaunch Styles-->

    <Style x:Key="StartToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Margin" Value="0,-1,0,0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Width" Value="60"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Background="#01000000">
                        <Grid x:Name="BaseGrid" HorizontalAlignment="Left" VerticalAlignment="Top" Width="44" Height="44" Margin="8,-7">
                            <Ellipse StrokeThickness="1">
                                <Ellipse.Fill>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                                        <GradientStop Offset="0" Color="#FF10100E"/>
                                        <GradientStop Offset="1" Color="#FF40423C"/>
                                    </LinearGradientBrush>
                                </Ellipse.Fill>
                                <Ellipse.Stroke>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                                        <GradientStop Offset="0" Color="#00FFFFFF"/>
                                        <GradientStop Offset="1" Color="#7FFFFFFF"/>
                                    </LinearGradientBrush>
                                </Ellipse.Stroke>
                            </Ellipse>
                            <Grid x:Name="OrbGrid" Margin="2,1,2,3">
                                <Grid>
                                    <Grid x:Name="IdleBackground" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="0" Background="Transparent" Opacity="1">
                                        <Ellipse HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="1">
                                            <Ellipse.Fill>
                                                <RadialGradientBrush GradientOrigin="0.5,1" Center="0.5,1" RadiusY="1">
                                                    <RadialGradientBrush.GradientStops>
                                                        <GradientStop Offset="0" Color="#FF19DBFF"/>
                                                        <GradientStop Offset="1" Color="#FF00355D"/>
                                                    </RadialGradientBrush.GradientStops>
                                                </RadialGradientBrush>
                                            </Ellipse.Fill>
                                        </Ellipse>
                                    </Grid>
                                    <Grid x:Name="HoverBackground" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="0" Background="Transparent" Opacity="0">
                                        <Ellipse HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="1">
                                            <Ellipse.Fill>
                                                <RadialGradientBrush GradientOrigin="0.5,1" Center="0.5,1" RadiusY="1">
                                                    <RadialGradientBrush.GradientStops>
                                                        <GradientStop Offset="0" Color="#FF19DBFF"/>
                                                        <GradientStop Offset="1" Color="#FF076C92"/>
                                                    </RadialGradientBrush.GradientStops>
                                                </RadialGradientBrush>
                                            </Ellipse.Fill>
                                        </Ellipse>
                                    </Grid>
                                    <Grid x:Name="PressedBackground" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="0" Background="Transparent" Opacity="0">
                                    </Grid>
                                    <Grid x:Name="DisabledBackground" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="0" Background="Transparent" Opacity="0">
                                    </Grid>
                                    <!--ContentControl Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" Focusable="False" IsTabStop="False" /-->
                                    <Canvas Width="13.500054199161586821763898920888" Height="24" Margin="0.5,0,-0.5,0">
                                        <Canvas.Background>
                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                <LinearGradientBrush.GradientStops>
                                                    <GradientStop Offset="0" Color="White" />
                                                    <GradientStop Offset="1" Color="#FFDFDFDF" />
                                                </LinearGradientBrush.GradientStops>
                                            </LinearGradientBrush>
                                        </Canvas.Background>
                                        <Canvas.OpacityMask>
                                            <VisualBrush TileMode="None" Viewport="0,0,1,1"
                                                 ViewportUnits="RelativeToBoundingBox"
                                                 Viewbox="0,0,144.00073,256.00027" ViewboxUnits="Absolute">
                                                <VisualBrush.Visual>
                                                    <Canvas Name="svg8" Width="144.00073" Height="256.00027">
                                                        <Canvas.RenderTransform>
                                                            <TranslateTransform X="0" Y="0" />
                                                        </Canvas.RenderTransform>
                                                        <Canvas Name="layer1">
                                                            <Canvas.RenderTransform>
                                                                <TranslateTransform X="-1.8930132e-5" Y="-40.999866" />
                                                            </Canvas.RenderTransform>
                                                            <Path Name="path4485" Fill="#FF000000" StrokeThickness="0.31324857" Stroke="#FF000000" StrokeLineJoin="Miter" StrokeStartLineCap="Flat" StrokeEndLineCap="Flat">
                                                                <Path.Data>
                                                                    <PathGeometry Figures="M 0.38570981 108.65214 C 5.5479943 22.701762 116.12822 17.544525 141.23878 100.63075 52.19885 44.948872 33.173221 180.00833 143.83516 152.4612 142.17373 190.6451 119.6223 277.64656 13.367569 296.84602 51.063522 272.16844 77.598523 245.46586 78.925911 193.80218 c 0 0 -83.7024856 0.80034 -78.54020119 -85.15004 z" FillRule="NonZero" />
                                                                </Path.Data>
                                                            </Path>
                                                        </Canvas>
                                                    </Canvas>
                                                </VisualBrush.Visual>
                                            </VisualBrush>
                                        </Canvas.OpacityMask>
                                        <Canvas.Effect>
                                            <DropShadowEffect x:Name="DropShadow" Color="Black" Direction="275" ShadowDepth="0.5" BlurRadius="2.5" Opacity="1" />
                                        </Canvas.Effect>
                                    </Canvas>
                                    <Ellipse HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="2">
                                        <Ellipse.Fill>
                                            <RadialGradientBrush GradientOrigin="0.5,1" Center="0.5,1" RadiusX="1.5" RadiusY="1.1875">
                                                <RadialGradientBrush.GradientStops>
                                                    <GradientStop Offset="0.5" Color="Transparent"/>
                                                    <GradientStop Offset="0.5" Color="#40FFFFFF"/>
                                                    <GradientStop Offset="1" Color="#C0FFFFFF"/>
                                                </RadialGradientBrush.GradientStops>
                                            </RadialGradientBrush>
                                        </Ellipse.Fill>
                                    </Ellipse>
                                    <Ellipse HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="2">
                                        <Ellipse.Fill>
                                            <RadialGradientBrush GradientOrigin="0.5,0.625" Center="0.5,0.625" RadiusX="1.0625" RadiusY="1">
                                                <RadialGradientBrush.GradientStops>
                                                    <GradientStop Offset="0.375" Color="Transparent"/>
                                                    <GradientStop Offset="0.875" Color="#FFFFFFFF"/>
                                                </RadialGradientBrush.GradientStops>
                                            </RadialGradientBrush>
                                        </Ellipse.Fill>
                                    </Ellipse>
                                </Grid>
                            </Grid>
                        </Grid>
                        <Popup Width="54" Height="54" IsOpen="False" IsHitTestVisible="False" AllowsTransparency="True" VerticalOffset="-1">
                            <Grid Background="#01000000">
                                <!--Grid Margin="0,17,0,0" ClipToBounds="True" Background="#01000000">
                                    <Ellipse Width="42" Height="42" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,-7,0,7" Stroke="#7FFFFFFF">
                                        <Ellipse.Fill>
                                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                                                <GradientStop Offset="0" Color="#FF10100E"/>
                                                <GradientStop Offset="1" Color="#FF40423C"/>
                                            </LinearGradientBrush>
                                        </Ellipse.Fill>
                                    </Ellipse>
                                </Grid-->
                                <Rectangle Margin="8,7,4,7">
                                    <!--Rectangle.Fill>
                                        <VisualBrush Visual="{Binding ElementName=OrbGrid}"/>
                                    </Rectangle.Fill-->
                                </Rectangle>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=DockMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:AppBarWindow}}}" Value="Top">
                            <Setter TargetName="BaseGrid" Property="VerticalAlignment" Value="Bottom"/>
                            <Setter TargetName="OrbGrid" Property="Margin" Value="2,3,2,1"/>
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground"
                                            Storyboard.TargetProperty="Opacity" To="1"
                                            Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground"
                                            Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.5" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="PressedBackground"
                                            Storyboard.TargetProperty="Opacity" To="1"
                                            Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="PressedBackground"
                                            Storyboard.TargetProperty="Opacity" To="0"
                                            Duration="0:0:0.125" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SearchTaskViewBaseToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Foreground" Value="{DynamicResource TaskbarGlyphIdleBrush}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Background="#01000000">
                        <Grid Margin="0,2">
                            <Grid x:Name="HoverBackground" Opacity="1">
                                <Border x:Name="HoverOuterBorder" BorderBrush="Black" Background="#4D000000" BorderThickness="1" CornerRadius="3" Opacity="0">
                                    <Border x:Name="HoverInnerBorder" BorderBrush="#40406F74" BorderThickness="1" CornerRadius="2">
                                        <Grid>
                                            <Rectangle Height="10" VerticalAlignment="Bottom" Margin="1,-1">
                                                <Rectangle.Fill>
                                                    <RadialGradientBrush Center="0.5,1" GradientOrigin="0.5,1">
                                                        <GradientStop Offset="0" Color="#FF89C2C8"/>
                                                        <GradientStop Offset="1" Color="#0089C2C8"/>
                                                    </RadialGradientBrush>
                                                </Rectangle.Fill>
                                            </Rectangle>
                                        </Grid>
                                    </Border>
                                </Border>
                            </Grid>
                            <Border x:Name="PressedOuterBorder" BorderBrush="Transparent" Background="#B8000000" BorderThickness="1" CornerRadius="{Binding CornerRadius, ElementName=HoverOuterBorder}" Opacity="0">
                                <Border x:Name="PressedInnerBorder" BorderBrush="#F7030303" BorderThickness="1" CornerRadius="{Binding CornerRadius, ElementName=HoverInnerBorder}">
                                    <Grid>
                                        <Rectangle Width="5" HorizontalAlignment="Left">
                                            <Rectangle.Fill>
                                                <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                                    <GradientStop Offset="0" Color="#40000000"/>
                                                    <GradientStop Offset="1" Color="#00000000"/>
                                                </LinearGradientBrush>
                                            </Rectangle.Fill>
                                        </Rectangle>
                                        <Rectangle Width="5" HorizontalAlignment="Right">
                                            <Rectangle.Fill>
                                                <LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
                                                    <GradientStop Offset="0" Color="#40000000"/>
                                                    <GradientStop Offset="1" Color="#00000000"/>
                                                </LinearGradientBrush>
                                            </Rectangle.Fill>
                                        </Rectangle>
                                        <Rectangle Height="7" VerticalAlignment="Top">
                                            <Rectangle.Fill>
                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                    <GradientStop Offset="0" Color="#40000000"/>
                                                    <GradientStop Offset="1" Color="#00000000"/>
                                                </LinearGradientBrush>
                                            </Rectangle.Fill>
                                        </Rectangle>
                                    </Grid>
                                </Border>
                            </Border>
                        </Grid>
                        <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}" UseLayoutRounding="True">
                            <ContentPresenter.Effect>
                                <DropShadowEffect Color="Black" Direction="315" BlurRadius="3" ShadowDepth="2" Opacity="0.375"/>
                            </ContentPresenter.Effect>
                        </ContentPresenter>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!--MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="#30FFFFFF"/>
                        </MultiTrigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{x:Static SystemParameters.WindowGlassBrush}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" Value="#60FFFFFF"/>
                            <Setter Property="Foreground" Value="{x:Static SystemParameters.WindowGlassBrush}"/>
                        </Trigger-->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="False"/>
                                <Condition Property="IsChecked" Value="False"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125"/>
                                        <DoubleAnimation Storyboard.TargetName="PressedOuterBorder" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125"/>
                                        <DoubleAnimation Storyboard.TargetName="PressedOuterBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverOuterBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverOuterBorder" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource TaskbarGlyphPressedBrush}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--LinearGradientBrush x:Key="TaskbarGlyphBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientStop Offset="0" Color="#FF3B7CC8"/>
        <GradientStop Offset="1" Color="#FF356D9D"/>
    </LinearGradientBrush-->

    <SolidColorBrush x:Key="TaskbarGlyphIdleBrush">#FF898989</SolidColorBrush>

    <SolidColorBrush x:Key="TaskbarGlyphPressedBrush">#FF636363</SolidColorBrush>

    <SolidColorBrush x:Key="TaskbarGlyphFillBrush">#7F7FA0C0</SolidColorBrush>

    <Style x:Key="SearchToggleButtonStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource SearchTaskViewBaseToggleButtonStyle}">
        <Setter Property="Width" Value="48"/>
        <Setter Property="Content">
            <Setter.Value>
                <!--Grid Width="20" Height="20" HorizontalAlignment="Center" VerticalAlignment="Center">
                    <Grid.RenderTransform>
                        <TranslateTransform X="0" Y="3"/>
                    </Grid.RenderTransform>
                    <Path Data="M 0 9 L 5 4 M 4 0 A 5,5 360 1 1 4,0.01 L 4 0" Stroke="#C0FFFFFF" StrokeThickness="2.5" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    <Path x:Name="SearchIconPath" Data="M 0 9 L 5 4 M 4 0 A 5,5 360 1 1 4,0.01 L 4 0" Stroke="{DynamicResource TaskbarGlyphBrush}" StrokeThickness="1.5" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                </Grid-->
                <Path Data="M 0 9 L 5 4 M 4 0 A 5,5 360 1 1 4,0.01 L 4 0" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ToggleButton}}" Fill="{DynamicResource TaskbarGlyphFillBrush}" StrokeThickness="2" HorizontalAlignment="Center" VerticalAlignment="Center">
                    <Path.RenderTransform>
                        <TranslateTransform X="0" Y="3"/>
                    </Path.RenderTransform>
                </Path>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=UseSmallIcons, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="True">
                <Setter Property="Width" Value="36"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TaskViewToggleButtonStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource SearchTaskViewBaseToggleButtonStyle}">
        <Setter Property="Width" Value="48"/>
        <Setter Property="Content">
            <Setter.Value>
                <Control>
                    <Control.Style>
                        <Style TargetType="{x:Type Control}">
                            <Setter Property="Width" Value="28"/>
                            <Setter Property="Height" Value="18"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="{x:Type Control}">
                                        <!--Grid>
                                            <Rectangle x:Name="ThirdEdgeRectangle" Margin="2" Fill="White">
                                                <Rectangle.OpacityMask>
                                                    <VisualBrush Visual="{Binding ElementName=GlyphRectangle}"/>
                                                </Rectangle.OpacityMask>
                                                <Rectangle.Effect>
                                                    <BlurEffect Radius="2"/>
                                                </Rectangle.Effect>
                                            </Rectangle>
                                            <Rectangle x:Name="SecondEdgeRectangle" Margin="2" Fill="White">
                                                <Rectangle.OpacityMask>
                                                    <VisualBrush Visual="{Binding ElementName=GlyphRectangle}"/>
                                                </Rectangle.OpacityMask>
                                                <Rectangle.Effect>
                                                    <BlurEffect Radius="2"/>
                                                </Rectangle.Effect>
                                            </Rectangle>
                                            <Rectangle x:Name="EdgeRectangle" Margin="2" Fill="White">
                                                <Rectangle.OpacityMask>
                                                    <VisualBrush Visual="{Binding ElementName=GlyphRectangle}"/>
                                                </Rectangle.OpacityMask>
                                                <Rectangle.Effect>
                                                    <BlurEffect Radius="2"/>
                                                </Rectangle.Effect>
                                            </Rectangle>
                                            <Rectangle x:Name="GlyphRectangle" Margin="2" Fill="{DynamicResource TaskbarGlyphBrush}">
                                                <Rectangle.OpacityMask>
                                                    <VisualBrush>
                                                        <VisualBrush.Visual>
                                                            <Grid Width="24" Height="14" ClipToBounds="True" Background="#01000000">
                                                                <Grid.ColumnDefinitions>
                                                                    <ColumnDefinition Width="5"/>
                                                                    <ColumnDefinition Width="14"/>
                                                                    <ColumnDefinition Width="5"/>
                                                                </Grid.ColumnDefinitions>
                                                                <Grid ClipToBounds="True" Grid.Column="0">
                                                                    <Rectangle x:Name="LeftRectangle" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ToggleButton}}}" StrokeThickness="1" Margin="0,2" ClipToBounds="True">
                                                                        <Rectangle.RenderTransform>
                                                                            <TranslateTransform X="2" Y="0"/>
                                                                        </Rectangle.RenderTransform>
                                                                    </Rectangle>
                                                                </Grid>
                                                                <Rectangle Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ToggleButton}}}" StrokeThickness="1" Margin="1,0" ClipToBounds="True" Grid.Column="1"/>
                                                                <Grid ClipToBounds="True" Grid.Column="2">
                                                                    <Rectangle x:Name="RightRectangle" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ToggleButton}}}" StrokeThickness="1" Margin="0,2" ClipToBounds="True">
                                                                        <Rectangle.RenderTransform>
                                                                            <TranslateTransform X="-2" Y="0"/>
                                                                        </Rectangle.RenderTransform>
                                                                    </Rectangle>
                                                                </Grid>
                                                            </Grid>
                                                        </VisualBrush.Visual>
                                                    </VisualBrush>
                                                </Rectangle.OpacityMask>
                                            </Rectangle>
                                        </Grid-->
                                        <Grid>
                                            <Grid Width="24" Height="14" HorizontalAlignment="Center" VerticalAlignment="Center" ClipToBounds="True" Background="#01000000">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="5"/>
                                                    <ColumnDefinition Width="14"/>
                                                    <ColumnDefinition Width="5"/>
                                                </Grid.ColumnDefinitions>
                                                <Grid ClipToBounds="True" Grid.Column="0">
                                                    <Rectangle x:Name="LeftRectangle" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ToggleButton}}}" Fill="{DynamicResource TaskbarGlyphFillBrush}" StrokeThickness="2" Margin="0,2" ClipToBounds="True">
                                                        <Rectangle.RenderTransform>
                                                            <TranslateTransform X="2" Y="0"/>
                                                        </Rectangle.RenderTransform>
                                                    </Rectangle>
                                                </Grid>
                                                <Rectangle Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ToggleButton}}}" Fill="{DynamicResource TaskbarGlyphFillBrush}" StrokeThickness="2" Margin="1,0" ClipToBounds="True" Grid.Column="1"/>
                                                <Grid ClipToBounds="True" Grid.Column="2">
                                                    <Rectangle x:Name="RightRectangle" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ToggleButton}}}" Fill="{DynamicResource TaskbarGlyphFillBrush}" StrokeThickness="2" Margin="0,2" ClipToBounds="True">
                                                        <Rectangle.RenderTransform>
                                                            <TranslateTransform X="-2" Y="0"/>
                                                        </Rectangle.RenderTransform>
                                                    </Rectangle>
                                                </Grid>
                                            </Grid>
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <DataTrigger Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ToggleButton}}}" Value="True">
                                                <DataTrigger.EnterActions>
                                                    <BeginStoryboard>
                                                        <Storyboard>
                                                            <DoubleAnimation Storyboard.TargetName="LeftRectangle" Storyboard.TargetProperty="RenderTransform.X" To="0" Duration="0:0:0.125">
                                                                <DoubleAnimation.EasingFunction>
                                                                    <CircleEase EasingMode="EaseOut"/>
                                                                </DoubleAnimation.EasingFunction>
                                                            </DoubleAnimation>
                                                            <DoubleAnimation Storyboard.TargetName="RightRectangle" Storyboard.TargetProperty="RenderTransform.X" To="0" Duration="0:0:0.125">
                                                                <DoubleAnimation.EasingFunction>
                                                                    <CircleEase EasingMode="EaseOut"/>
                                                                </DoubleAnimation.EasingFunction>
                                                            </DoubleAnimation>
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </DataTrigger.EnterActions>
                                                <DataTrigger.ExitActions>
                                                    <BeginStoryboard>
                                                        <Storyboard>
                                                            <DoubleAnimation Storyboard.TargetName="LeftRectangle" Storyboard.TargetProperty="RenderTransform.X" To="2" Duration="0:0:0.125">
                                                                <DoubleAnimation.EasingFunction>
                                                                    <CircleEase EasingMode="EaseOut"/>
                                                                </DoubleAnimation.EasingFunction>
                                                            </DoubleAnimation>
                                                            <DoubleAnimation Storyboard.TargetName="RightRectangle" Storyboard.TargetProperty="RenderTransform.X" To="-2" Duration="0:0:0.125">
                                                                <DoubleAnimation.EasingFunction>
                                                                    <CircleEase EasingMode="EaseOut"/>
                                                                </DoubleAnimation.EasingFunction>
                                                            </DoubleAnimation>
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </DataTrigger.ExitActions>
                                            </DataTrigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Control.Style>
                </Control>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=UseSmallIcons, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="True">
                <Setter Property="Width" Value="36"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="ActionCenterToggleButtonStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource SearchTaskViewBaseToggleButtonStyle}">
        <Setter Property="Width" Value="40"/>
        <Setter Property="Margin" Value="2,0"/>
        <Setter Property="Content">
            <Setter.Value>
                <!--Path Data="M 0 0 L 16 0 L 16 12 L 10 12 L 8 14 L 6 12 L 0 12 Z" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ToggleButton}}}" StrokeThickness="1"/-->
                <Grid Width="16" Height="16">
                    <Border BorderBrush="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ToggleButton}}}" Background="{DynamicResource TaskbarGlyphFillBrush}" BorderThickness="2,2,2,0" Margin="0,0,0,3"/>
                    <Path Data="M 0 0 L 6 0 L 8 2 L 10 0 L 16 0" Stroke="{Binding Foreground, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ToggleButton}}}" StrokeThickness="2" VerticalAlignment="Bottom" UseLayoutRounding="True"/>
                </Grid>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=UseSmallIcons, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type local:MainWindow}}}" Value="True">
                <Setter Property="Width" Value="30"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="{x:Type ToolBarTray}" TargetType="{x:Type ToolBarTray}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="IsLocked" Value="{Binding IsLocked,RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type local:MainWindow}}}"/>
    </Style>

    <Style x:Key="{x:Type ToolBar}" TargetType="{x:Type ToolBar}">
        <Style.Resources>
            <Style TargetType="{x:Type ListView}">
                <Style.Resources>
                    <Style TargetType="{x:Type ListViewItem}">
                        <Setter Property="OverridesDefaultStyle" Value="True"/>
                        <Setter Property="HorizontalAlignment" Value="Left"/>
                        <Setter Property="VerticalAlignment" Value="Top"/>
                        <Setter Property="Width" Value="{Binding Height, RelativeSource={RelativeSource Mode=Self}}"/>
                        <Setter Property="Height" Value="30"/>
                        <Setter Property="HorizontalContentAlignment" Value="Center"/>
                        <Setter Property="VerticalContentAlignment" Value="Center"/>
                        <Setter Property="BorderBrush" Value="Transparent"/>
                        <Setter Property="BorderThickness" Value="0"/>
                        <Setter Property="Padding" Value="0"/>
                        <Setter Property="Margin" Value="0"/>
                        <Setter Property="Foreground" Value="White"/>
                        <Setter Property="Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type ListViewItem}">
                                    <Grid Background="#01000000">
                                        <Grid x:Name="HoverBackground" Opacity="1">
                                            <Border x:Name="HoverOuterBorder" BorderBrush="Black" Background="#4D000000" BorderThickness="1" CornerRadius="3" Opacity="0">
                                                <Border x:Name="HoverInnerBorder" BorderBrush="#40406F74" BorderThickness="1" CornerRadius="2">
                                                    <Grid>
                                                        <Rectangle Height="10" VerticalAlignment="Bottom" Margin="1,-1">
                                                            <Rectangle.Fill>
                                                                <RadialGradientBrush Center="0.5,1" GradientOrigin="0.5,1">
                                                                    <GradientStop Offset="0" Color="#FF89C2C8"/>
                                                                    <GradientStop Offset="1" Color="#0089C2C8"/>
                                                                </RadialGradientBrush>
                                                            </Rectangle.Fill>
                                                        </Rectangle>
                                                    </Grid>
                                                </Border>
                                            </Border>
                                        </Grid>
                                        <Border x:Name="PressedOuterBorder" BorderBrush="Transparent" Background="#B8000000" BorderThickness="1" CornerRadius="{Binding CornerRadius, ElementName=HoverOuterBorder}" Opacity="0">
                                            <Border x:Name="PressedInnerBorder" BorderBrush="#F7030303" BorderThickness="1" CornerRadius="{Binding CornerRadius, ElementName=HoverInnerBorder}">
                                                <Grid>
                                                    <Rectangle Width="5" HorizontalAlignment="Left">
                                                        <Rectangle.Fill>
                                                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                                                <GradientStop Offset="0" Color="#40000000"/>
                                                                <GradientStop Offset="1" Color="#00000000"/>
                                                            </LinearGradientBrush>
                                                        </Rectangle.Fill>
                                                    </Rectangle>
                                                    <Rectangle Width="5" HorizontalAlignment="Right">
                                                        <Rectangle.Fill>
                                                            <LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
                                                                <GradientStop Offset="0" Color="#40000000"/>
                                                                <GradientStop Offset="1" Color="#00000000"/>
                                                            </LinearGradientBrush>
                                                        </Rectangle.Fill>
                                                    </Rectangle>
                                                    <Rectangle Height="7" VerticalAlignment="Top">
                                                        <Rectangle.Fill>
                                                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                                <GradientStop Offset="0" Color="#40000000"/>
                                                                <GradientStop Offset="1" Color="#00000000"/>
                                                            </LinearGradientBrush>
                                                        </Rectangle.Fill>
                                                    </Rectangle>
                                                </Grid>
                                            </Border>
                                        </Border>
                                        <Grid x:Name="ContentGrid" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="2,0">
                                            <ContentPresenter x:Name="PART_ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="4,0" Visibility="Hidden" />
                                            <GridViewRowPresenter x:Name="PART_GridViewRowPesenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="4,0" Visibility="Visible" />
                                        </Grid>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="GridView.ColumnCollection" Value="{x:Null}">
                                            <Setter TargetName="PART_ContentPresenter" Property="Visibility" Value="Visible"/>
                                            <Setter TargetName="PART_GridViewRowPesenter" Property="Visibility" Value="Hidden"/>
                                        </Trigger>
                                        <Trigger Property="IsSelected" Value="False">
                                            <Trigger.EnterActions>
                                                <BeginStoryboard>
                                                    <Storyboard>
                                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125"/>
                                                        <DoubleAnimation Storyboard.TargetName="PressedOuterBorder" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125"/>
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </Trigger.EnterActions>
                                            <Trigger.ExitActions>
                                                <BeginStoryboard>
                                                    <Storyboard>
                                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125"/>
                                                        <DoubleAnimation Storyboard.TargetName="PressedOuterBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125"/>
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </Trigger.ExitActions>
                                        </Trigger>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Trigger.EnterActions>
                                                <BeginStoryboard>
                                                    <Storyboard>
                                                        <DoubleAnimation Storyboard.TargetName="HoverOuterBorder" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125"/>
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </Trigger.EnterActions>
                                            <Trigger.ExitActions>
                                                <BeginStoryboard>
                                                    <Storyboard>
                                                        <DoubleAnimation Storyboard.TargetName="HoverOuterBorder" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125"/>
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </Trigger.ExitActions>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                                <!--ControlTemplate TargetType="{x:Type ListViewItem}">
                                    <Grid Background="#01000000">
                                        <Border x:Name="HoverBackground" Background="#30FFFFFF" Visibility="Collapsed"/>
                                        <Grid HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                            <ContentPresenter x:Name="PART_ContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="4,0" Visibility="Hidden" />
                                            <GridViewRowPresenter x:Name="PART_GridViewRowPesenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="4,0" Visibility="Visible" />
                                        </Grid>
                                    </Grid>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="GridView.ColumnCollection" Value="{x:Null}">
                                            <Setter TargetName="PART_ContentPresenter" Property="Visibility" Value="Visible"/>
                                            <Setter TargetName="PART_GridViewRowPesenter" Property="Visibility" Value="Hidden"/>
                                        </Trigger>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter TargetName="HoverBackground" Property="Visibility" Value="Visible"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate-->
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Style.Resources>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListView}">
                            <WrapPanel x:Name="ItemsHostWrapPanel" IsItemsHost="True" Width="{Binding Path=ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ScrollViewer}}}" VerticalAlignment="Stretch" Orientation="Horizontal" Margin="0,-1,0,-3"/>
                            <ControlTemplate.Triggers>
                                <DataTrigger Binding="{Binding Path=Orientation, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type win:AppBarWindow}}}" Value="Vertical">
                                    <Setter TargetName="ItemsHostWrapPanel" Property="Orientation" Value="vertical"/>
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="ItemTemplate">
                    <Setter.Value>
                        <DataTemplate DataType="{x:Type disk:DiskItem}">
                            <Rectangle Width="16" Height="16" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{Binding ItemSmallIcon, Converter={StaticResource IconToImageBrushConverter}, ConverterParameter='16'}" IsHitTestVisible="False">
                                <Rectangle.ToolTip>
                                    <TextBlock Text="{Binding ItemDisplayName}"/>
                                </Rectangle.ToolTip>
                            </Rectangle>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ToolBarThumbStyle" TargetType="{x:Type Thumb}">
                <Setter Property="Width" Value="8" />
                <Setter Property="VerticalAlignment" Value="Stretch"/>
                <Setter Property="Cursor" Value="SizeAll" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Thumb}">
                            <UniformGrid Rows="1" Background="#01000000" SnapsToDevicePixels="True">
                                <!--Separator HorizontalAlignment="Left"/>
                                <Separator HorizontalAlignment="Right"/-->
                                <Rectangle HorizontalAlignment="Center" VerticalAlignment="Stretch" Width="1" Margin="0,2" Fill="#60FFFFFF"/>
                                <Rectangle HorizontalAlignment="Center" VerticalAlignment="Stretch" Width="1" Margin="0,2" Fill="#60FFFFFF"/>
                            </UniformGrid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="ToolBarOverflowButtonStyle" TargetType="{x:Type ToggleButton}">
                <Setter Property="OverridesDefaultStyle" Value="true" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border x:Name="Border" CornerRadius="0" SnapsToDevicePixels="true">
                                <Border.Background>
                                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                                        <GradientStop Color="#00000000" Offset="0" />
                                        <GradientStop Offset="1" />
                                    </LinearGradientBrush>
                                </Border.Background>
                                <Grid>
                                    <Path x:Name="Arrow" Fill="Black" VerticalAlignment="Bottom" Margin="2,3" Data="M -0.5 3 L 5.5 3 L 2.5 6 Z" />
                                    <ContentPresenter />
                                </Grid>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.Resources>
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolBar}">
                    <Grid>
                        <DockPanel>
                            <ToggleButton DockPanel.Dock="Right" Visibility="{TemplateBinding HasOverflowItems, Converter={StaticResource BooleanToVisibilityConverter}}" IsEnabled="{TemplateBinding HasOverflowItems}" Style="{DynamicResource ToolBarOverflowButtonStyle}" ClickMode="Press" IsChecked="{Binding IsOverflowOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                                <Popup x:Name="OverflowPopup" AllowsTransparency="true" Placement="Bottom" StaysOpen="false" Focusable="false" PopupAnimation="Slide" IsOpen="{Binding IsOverflowOpen,  RelativeSource={RelativeSource TemplatedParent}}">
                                    <Border x:Name="DropDownBorder" BorderThickness="1">
                                        <ToolBarOverflowPanel x:Name="PART_ToolBarOverflowPanel" Margin="2" WrapWidth="200" Focusable="true" FocusVisualStyle="{x:Null}" KeyboardNavigation.TabNavigation="Cycle" KeyboardNavigation.DirectionalNavigation="Cycle" />
                                    </Border>
                                </Popup>
                            </ToggleButton>
                            <Thumb x:Name="ToolBarThumb" Style="{DynamicResource ToolBarThumbStyle}" />
                            <ToolBarPanel x:Name="PART_ToolBarPanel" IsItemsHost="true" Margin="0,1,2,2" />
                        </DockPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsOverflowOpen" Value="True">
                            <Setter TargetName="ToolBarThumb" Property="IsEnabled" Value="False" />
                        </Trigger>
                        <Trigger Property="ToolBarTray.IsLocked" Value="True">
                            <Setter TargetName="ToolBarThumb" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion Start/QuickLaunch Styles-->


    <!--#region Tray Styles-->

    <Style x:Key="ShowTrayFlyoutButtonStyle" TargetType="ToggleButton">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Foreground" Value="{DynamicResource TaskbarGlyphIdleBrush}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Width" Value="24"/>
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid Background="#01000000">
                        <Grid Width="16" Height="16" HorizontalAlignment="Center" VerticalAlignment="Center">
                            <Ellipse x:Name="HoverBackground" Opacity="0">
                                <Ellipse.Fill>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <GradientStop Offset="0" Color="#FF242424"/>
                                        <GradientStop Offset="1" Color="#FF040404"/>
                                    </LinearGradientBrush>
                                </Ellipse.Fill>
                            </Ellipse>
                            <StackPanel x:Name="ArrowsStackPanel" Orientation="Vertical" HorizontalAlignment="Center" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5">
                                <StackPanel.RenderTransform>
                                    <RotateTransform Angle="0"/>
                                </StackPanel.RenderTransform>
                                <Path x:Name="ArrowPath" Data="M 0 3 L 3 0 L 6 3" Stroke="{TemplateBinding Foreground}" StrokeThickness="2" SnapsToDevicePixels="True"/>
                                <Path Data="{Binding Data, ElementName=ArrowPath}" Stroke="{TemplateBinding Foreground}" StrokeThickness="{Binding StrokeThickness, ElementName=ArrowPath}" SnapsToDevicePixels="True" Margin="0,1,0,0"/>
                            </StackPanel>
                            <Grid x:Name="PressedBackground" Background="#60FFFFFF" Visibility="Collapsed"/>
                            <!--Path HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 6 L 6 0 L 12 6" Stroke="White" StrokeThickness="1"/-->
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{DynamicResource TaskbarGlyphPressedBrush}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ArrowsStackPanel" Storyboard.TargetProperty="RenderTransform.Angle" To="180" Duration="0:0:0.125">
                                            <DoubleAnimation.EasingFunction>
                                                <CircleEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ArrowsStackPanel" Storyboard.TargetProperty="RenderTransform.Angle" To="0" Duration="0:0:0.125">
                                            <DoubleAnimation.EasingFunction>
                                                <CircleEase EasingMode="EaseOut"/>
                                            </DoubleAnimation.EasingFunction>
                                        </DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ShowTrayFlyoutIcon" TargetType="Control">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Background" Value="Black"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Control">
                    <StackPanel Orientation="Vertical">
                        <Path Width="6" Height="4" Data="M 1 3 L 3 0 L 5 3 L 3 0 L 1 3 Z" Stroke="{TemplateBinding Foreground}" StrokeThickness="1"/>
                        <Path Width="6" Height="4" Data="M 1 3 L 3 0 L 5 3 L 3 0 L 1 3 Z" Stroke="{TemplateBinding Foreground}" StrokeThickness="1"/>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ClockStyle" TargetType="TextBlock">
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="White"/>
    </Style>

    <Style x:Key="ClockToggleButtonStyle" TargetType="ToggleButton" BasedOn="{StaticResource SearchTaskViewBaseToggleButtonStyle}">
        <!--Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Margin" Value="5,0"/>
        <Setter Property="Padding" Value="5,0"/>
        <Setter Property="Background" Value="Transparent" /-->
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Padding" Value="5,0"/>
        <!--Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Background="{TemplateBinding Background}">
                        <ContentPresenter Content="{TemplateBinding Content}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Margin="{TemplateBinding Padding}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="#30FFFFFF"/>
                        </MultiTrigger>
                        <Trigger Property="IsPressed" Value="True">
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" Value="#60FFFFFF"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter-->
    </Style>

    <Style x:Key="ShowDesktopButtonStyle" TargetType="Button">
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Width" Value="15"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Rectangle Margin="1,0,0,0">
                            <Rectangle.Fill>
                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                    <GradientStop Offset="0" Color="#35F4F4F4"/>
                                    <GradientStop Offset="1" Color="#894E4E4E"/>
                                </LinearGradientBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                        <Border x:Name="HoverBackground" Background="#D72E2E2E" Opacity="0" Margin="1,1,0,0">
                            <Grid>
                                <Rectangle Height="3" VerticalAlignment="Top">
                                    <Rectangle.Fill>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                            <GradientStop Offset="0" Color="#E4B4EAF0"/>
                                            <GradientStop Offset="1" Color="#00B4EAF0"/>
                                        </LinearGradientBrush>
                                    </Rectangle.Fill>
                                </Rectangle>
                                <Rectangle Width="3" HorizontalAlignment="Right">
                                    <Rectangle.Fill>
                                        <LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
                                            <GradientStop Offset="0" Color="#F663A5AD"/>
                                            <GradientStop Offset="1" Color="#0063A5AD"/>
                                        </LinearGradientBrush>
                                    </Rectangle.Fill>
                                </Rectangle>
                                <Rectangle Height="6" VerticalAlignment="Bottom">
                                    <Rectangle.Fill>
                                        <LinearGradientBrush StartPoint="0,1" EndPoint="0,0">
                                            <GradientStop Offset="0" Color="#F86EBAC3"/>
                                            <GradientStop Offset="1" Color="#006EBAC3"/>
                                        </LinearGradientBrush>
                                    </Rectangle.Fill>
                                </Rectangle>
                                <Rectangle Width="2" HorizontalAlignment="Left">
                                    <Rectangle.Fill>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                            <GradientStop Offset="0" Color="#E4B4EAF0"/>
                                            <GradientStop Offset="1" Color="#00B4EAF0"/>
                                        </LinearGradientBrush>
                                    </Rectangle.Fill>
                                </Rectangle>
                            </Grid>
                        </Border>
                        <!--Border BorderBrush="#60FFFFFF" BorderThickness="1,0,0,0"/-->
                        <ContentControl Content="{TemplateBinding Content}" VerticalAlignment="Center" FontWeight="Bold" FontSize="11"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsPressed" Value="False"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:0.125"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="HoverBackground" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.125"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion Tray Styles-->

    <Style x:Key="{x:Type local:SettingsWindow}" TargetType="{x:Type local:SettingsWindow}" BasedOn="{StaticResource {x:Type win:DecoratableWindow}}">
        <Style.Resources>
            <!--{StaticResource {x:Type }}-->
            <Style TargetType="{x:Type TabControl}" BasedOn="{StaticResource {x:Type TabControl}}">
                <Setter Property="Margin" Value="6,7,6,0"/>
            </Style>

            <Style x:Key="FooterContentControlStyle" TargetType="{x:Type ContentControl}" BasedOn="{StaticResource {x:Type ContentControl}}">
                <Style.Resources>
                    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                        <Setter Property="Height" Value="21"/>
                        <Setter Property="VerticalAlignment" Value="Center"/>
                        <Setter Property="Margin" Value="4,0"/>
                    </Style>
                </Style.Resources>
                <Setter Property="Height" Value="36"/>
                <Setter Property="Margin" Value="2,0"/>
            </Style>

            <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
                <Setter Property="Margin" Value="0,2,0,3"/>
                <Setter Property="Width" Value="175"/>
            </Style>

            <Style TargetType="{x:Type ui:ToggleSwitch}" BasedOn="{StaticResource {x:Type ui:ToggleSwitch}}">
                <Setter Property="Width" Value="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type ContentPresenter}}}"/>
            </Style>
        </Style.Resources>
        <Setter Property="Width" Value="400"/>
        <Setter Property="Height" Value="525"/>
        <Setter Property="Background" Value="#FFF0F0F0"/>
    </Style>
</ResourceDictionary>